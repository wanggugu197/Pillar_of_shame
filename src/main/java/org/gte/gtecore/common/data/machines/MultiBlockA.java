package org.gte.gtecore.common.data.machines;

import org.gte.gtecore.GTECore;
import org.gte.gtecore.api.machine.feature.multiblock.ICoilMachine;
import org.gte.gtecore.api.machine.multiblock.*;
import org.gte.gtecore.api.machine.part.GTEPartAbility;
import org.gte.gtecore.api.machine.trait.IEnhancedRecipeLogic;
import org.gte.gtecore.api.pattern.GTEPredicates;
import org.gte.gtecore.common.data.*;
import org.gte.gtecore.common.machine.multiblock.electric.FishingGroundMachine;
import org.gte.gtecore.common.machine.multiblock.electric.StellarForgeMachine;
import org.gte.gtecore.common.machine.multiblock.electric.gcym.GCYMMultiblockMachine;
import org.gte.gtecore.common.machine.multiblock.electric.voidseries.VoidFluidDrillingRigMachine;
import org.gte.gtecore.common.machine.multiblock.electric.voidseries.VoidMinerMachine;
import org.gte.gtecore.common.machine.multiblock.noenergy.AdvancedPrimitiveBlastFurnaceMachine;
import org.gte.gtecore.common.machine.multiblock.steam.*;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.GTValues;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.MultiblockShapeInfo;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.*;

import net.minecraft.core.Direction;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.DirectionalBlock;
import net.minecraft.world.level.material.Fluids;

import appeng.core.definitions.AEBlocks;
import earth.terrarium.adastra.common.registry.ModBlocks;

import java.util.Comparator;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gregtechceu.gtceu.api.pattern.util.RelativeDirection.*;
import static com.gregtechceu.gtceu.common.data.GTMaterials.Aluminium;
import static org.gte.gtecore.api.GTEValues.*;
import static org.gte.gtecore.common.block.BlockMap.*;
import static org.gte.gtecore.utils.register.MachineRegisterUtils.CHEMICAL_PLANT_DISPLAY;
import static org.gte.gtecore.utils.register.MachineRegisterUtils.multiblock;

public interface MultiBlockA {

    static void init() {}

    MultiblockMachineDefinition EVAPORATION_PLANT = multiblock("evaporation_plant", "蒸发塔", ElectricMultiblockMachine::new)
            .langValue("Evaporation Tower")
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.EVAPORATION_RECIPES)
            .overclock()
            .block(GTEBlocks.STAINLESS_EVAPORATION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RIGHT, BACK, UP)
                    .aisle("FYF", "YYY", "FYF")
                    .aisle("YSY", "Y#Y", "YYY")
                    .aisle("XXX", "X#X", "XXX").setRepeatable(5)
                    .aisle(" Z ", "ZZZ", " Z ")
                    .where('S', Predicates.controller(blocks(definition.getBlock())))
                    .where('Y', blocks(GTEBlocks.STAINLESS_EVAPORATION_CASING.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMinGlobalLimited(1)
                                    .setMaxGlobalLimited(2))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where('X', blocks(GTEBlocks.STAINLESS_EVAPORATION_CASING.get())
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS_1X).setMinLayerLimited(1)
                                    .setMaxLayerLimited(1)))
                    .where('Z', blocks(GTEBlocks.STAINLESS_EVAPORATION_CASING.get()))
                    .where('F', Predicates.frames(Aluminium))
                    .where('#', Predicates.air())
                    .where(' ', Predicates.any())
                    .build())
            .partSorter(Comparator.comparingInt(a -> a.self().getPos().getY()))
            .workableCasingRenderer(GTECore.id("block/casings/stainless_evaporation_casing"), GTCEu.id("block/multiblock/evaporation_plant"))
            .register();

    MultiblockMachineDefinition PLASMA_CONDENSER = multiblock("plasma_condenser", "等离子冷凝器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.PLASMA_CONDENSER_RECIPES)
            .customTooltipsBuilder(true, false, false)
            .perfectOverclock()
            .block(GTEBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("       ", "       ", "  aaa  ", "  aaa  ", "  aaa  ", "       ", "       ")
                    .aisle("       ", "  aaa  ", " aaaaa ", " aabaa ", " aaaaa ", "  aaa  ", "       ")
                    .aisle("  aaa  ", " aaaaa ", "aabbbaa", "aabcbaa", "aabbbaa", " aaaaa ", "  aaa  ")
                    .aisle("  aaa  ", " aabaa ", "aabcbaa", "abcccba", "aabcbaa", " aabaa ", "  aaa  ")
                    .aisle("  aaa  ", " aaaaa ", "aabbbaa", "aabcbaa", "aabbbaa", " aaaaa ", "  aaa  ")
                    .aisle("       ", "  aaa  ", " aaaaa ", " aabaa ", " aaaaa ", "  aaa  ", "       ")
                    .aisle("       ", "       ", "  aaa  ", "  ada  ", "  aaa  ", "       ", "       ")
                    .where('a', blocks(GTEBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get())
                            .setMinGlobalLimited(120)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('b', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('c', blocks(GTEBlocks.LASER_COOLING_CASING.get()))
                    .where('d', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/antifreeze_heatproof_machine_casing"), GTCEu.id("block/multiblock/vacuum_freezer"))
            .register();

    MultiblockMachineDefinition RARE_EARTH_CENTRIFUGAL = multiblock("rare_earth_centrifugal", "稀土离心机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.RARE_EARTH_CENTRIFUGAL_RECIPES)
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.CASING_HSSE_STURDY)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle(" bbb ", "bbbbb", "bbbbb", "bbbbb", " bbb ")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle("bbbbb", "bcdcb", "bcdcb", "bcdcb", "bbbbb")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle(" bbb ", "bbbbb", "bbabb", "bbbbb", " bbb ")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_HSSE_STURDY.get())
                            .setMinGlobalLimited(80)
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('d', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    MultiblockMachineDefinition ADVANCED_RARE_EARTH_CENTRIFUGAL = multiblock("advanced_rare_earth_centrifugal", "进阶稀土离心机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.RARE_EARTH_CENTRIFUGAL_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, true, false)
            .parallelizablePerfectOverclock()
            .block(GTEBlocks.SPS_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("   AAAAAAA              ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("  AADDDDDAA             ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ")
                    .aisle(" AADDDDDDDA             ", "  B  D  B               ", "  B  E  B               ", " CB EEE BC              ", "  B EEE B               ", "  B EEE B               ", " CB EEE BC              ", "  B EEE B               ", "  B  E  B               ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("AADDDDDDDDA             ", "     D                  ", "   EEEEE                ", "C  EEEEE  C             ", "   E F E                ", "   E F E                ", "C  E F E  C             ", "   EEEEE                ", "   EEEEE                ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDAA            ", "    DDD                 ", "   EEEEE                ", "C EEGGGEE C             ", "  E H H E               ", "  E H H E               ", "C E H H E C             ", "  EEGGGEE               ", "   EEEEE                ", "    DDD                 ", "                        ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDAAA  AAAAA   ", "B DDDDDDD B             ", "B EEEEEE  B             ", "C EEGGGEE C             ", "B EF G FE B             ", "B EF G FE B             ", "C EF G FE C             ", "B EEGGGEE B             ", "B EEEGEEE B             ", "    D D                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDDDAAAADDDAA  ", "    DDD          B      ", "   EEEEE         B      ", "C EEGGGEE C    CCCCC    ", "  E H H E        B      ", "  E H H E        B      ", "C E H H E C    CCCCC    ", "  EEGGGEE        B      ", "   EEEEE         B      ", "    DAD                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDDDDADDDDDDA  ", "     D                  ", "   EEEEE                ", "C  EEEEE  C   C     C   ", "   E F E                ", "   E F E                ", "C  E F E  C   C     C   ", "   EEEEE                ", "   EEEEE                ", "                        ", "    IAI                 ", "    IAI                 ", "                        ")
                    .aisle("AAADDDDDDDDDDDDDDDDDDAb ", "  B  D  B     B  D  B   ", "  B  E  B     B  E  B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B EEE B     B EEE B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B  E  B     B  E  B   ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("  AADDDDDDDDDDDDDDDDDDb ", "                 D      ", "               EEEEE    ", "  C     C   C  EEEEE  C ", "               E F E    ", "               E F E    ", "  C     C   C  E F E  C ", "               EEEEE    ", "               EEEEE    ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("   ADDDDDDDDDDDDDDDDDDAb", "     B   A      DDD   Ab", "     B   A     EEEEE  Ab", "   CCCCC A  C EEGGGEE C ", "     B   A    E H H E   ", "     B   A    E H H E   ", "   CCCCC A  C E H H E C ", "     B   A    EEGGGEE   ", "     B   A     EEEEE    ", "         A      DDD     ", "         A     III      ", "    IAAAAAIIIIII        ", "     DDDDDDDD           ")
                    .aisle("   ADDDDDDDDDDDDDDDDDDAb", "        AAA B DDDDDDD B~", "        AAA B EEEEEE  Bb", "        AAA C EEGGGEE C ", "        AAA B EF G FE B ", "        AAA B EF G FE B ", "        AAA C EF G FE C ", "        AAA B EEGGGEE B ", "        AAA B EEEGEEE B ", "        AAA     AGD     ", "        AAA    AAA      ", "    IIIIAAAAAAAA        ", "     DDDDDDDD           ")
                    .aisle("   ADDDDDDDDDDDDDDDDDDAb", "     B   A      DDD   Ab", "     B   A     EEEEE  Ab", "   CCCCC A  C EEGGGEE C ", "     B   A    E H H E   ", "     B   A    E H H E   ", "   CCCCC A  C E H H E C ", "     B   A    EEGGGEE   ", "     B   A     EEEEE    ", "         A      DDD     ", "         A     III      ", "    IAAAAAIIIIII        ", "     DDDDDDDD           ")
                    .aisle("  AADDDDDDDDDDDDDDDDDDb ", "                 D      ", "               EEEEE    ", "  C     C   C  EEEEE  C ", "               E F E    ", "               E F E    ", "  C     C   C  E F E  C ", "               EEEEE    ", "               EEEEE    ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("AAADDDDDDDDDDDDDDDDDDAb ", "  B  D  B     B  D  B   ", "  B  E  B     B  E  B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B EEE B     B EEE B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B  E  B     B  E  B   ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("ADDDDDDDDDDDDDADDDDDDA  ", "     D                  ", "   EEEEE                ", "C  EEEEE  C   C     C   ", "   E F E                ", "   E F E                ", "C  E F E  C   C     C   ", "   EEEEE                ", "   EEEEE                ", "                        ", "    IAI                 ", "    IAI                 ", "                        ")
                    .aisle("ADDDDDDDDDDDDAAAADDDAA  ", "    DDD          B      ", "   EEEEE         B      ", "C EEGGGEE C    CCCCC    ", "  E H H E        B      ", "  E H H E        B      ", "C E H H E C    CCCCC    ", "  EEGGGEE        B      ", "   EEEEE         B      ", "    DAD                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDAAA  AAAAA   ", "B DDDDDDD B             ", "B EEEEEE  B             ", "C EEGGGEE C             ", "B EF G FE B             ", "B EF G FE B             ", "C EF G FE C             ", "B EEGGGEE B             ", "B EEEGEEE B             ", "    D D                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDAA            ", "    DDD                 ", "   EEEEE                ", "C EEGGGEE C             ", "  E H H E               ", "  E H H E               ", "C E H H E C             ", "  EEGGGEE               ", "   EEEEE                ", "    DDD                 ", "                        ", "                        ", "                        ")
                    .aisle("AADDDDDDDDA             ", "     D                  ", "   EEEEE                ", "C  EEEEE  C             ", "   E F E                ", "   E F E                ", "C  E F E  C             ", "   EEEEE                ", "   EEEEE                ", "                        ", "                        ", "                        ", "                        ")
                    .aisle(" AADDDDDDDA             ", "  B  D  B               ", "  B  E  B               ", " CB EEE BC              ", "  B EEE B               ", "  B EEE B               ", " CB EEE BC              ", "  B EEE B               ", "  B  E  B               ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("  AADDDDDAA             ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("   AAAAAAA              ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "                        ", "                        ", "                        ", "                        ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.SPS_CASING.get()))
                    .where('B', blocks(GTEBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('C', blocks(GTEBlocks.ADVANCED_FUSION_COIL.get()))
                    .where('D', blocks(GTEBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('F', blocks(GTEBlocks.HYPER_CORE.get()))
                    .where('G', blocks(GTEBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('H', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where('b', blocks(GTEBlocks.SPS_CASING.get())
                            .or(GTEPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/sps_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    MultiblockMachineDefinition SPS_CRAFTING = multiblock("sps_crafting", "超临界合成机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.TRANSCENDING_CRAFTING_RECIPES)
            .customTooltipsBuilder(true, false, false)
            .perfectOverclock()
            .block(GTBlocks.FUSION_CASING_MK2)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbbbbbb", "bcccccb", "bcfffcb", "bcfffcb", "bcfffcb", "bcccccb", "bbbbbbb")
                    .aisle("bcccccb", "c     c", "c     c", "c     c", "c     c", "c     c", "bcccccb")
                    .aisle("bcccccb", "c ddd c", "f ddd f", "f ddd f", "f ddd f", "c ddd c", "bcccccb")
                    .aisle("bcccccb", "c ded c", "f ded f", "f dgd f", "f ded f", "c ded c", "bcccccb")
                    .aisle("bcccccb", "c ddd c", "f ddd f", "f ddd f", "f ddd f", "c ddd c", "bcccccb")
                    .aisle("bcccccb", "c     c", "c     c", "c     c", "c     c", "c     c", "bcccccb")
                    .aisle("bbbbbbb", "bccaccb", "bcfffcb", "bcfffcb", "bcfffcb", "bcccccb", "bbbbbbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTEBlocks.SPS_CASING.get()))
                    .where('c', blocks(GTBlocks.FUSION_CASING_MK2.get())
                            .setMinGlobalLimited(100)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('d', blocks(Blocks.CRYING_OBSIDIAN))
                    .where('e', blocks(Blocks.REINFORCED_DEEPSLATE))
                    .where('f', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('g', blocks(GTEBlocks.MAGIC_CORE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/fusion/fusion_casing_mk2"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    MultiblockMachineDefinition ADVANCED_SPS_CRAFTING = multiblock("advanced_sps_crafting", "进阶超临界合成机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.TRANSCENDING_CRAFTING_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, true, false)
            .parallelizablePerfectOverclock()
            .block(GTBlocks.FUSION_CASING_MK2)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle
                    .aisle("         CCCCCCCCCCCCCCC        ", "         DDEABBBBBBBAEDD        ", "          CEABBA ABBAEC         ", "           EABBA ABBAE          ", "           EABBA ABBAE          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("        CCCCCCCCCCCCCCCCC       ", "        DDAAABBBBBBBAAADD       ", "         CAAABFBBBFBAAAC        ", "          AAABFBBBFBAAA         ", "           AABBBBBBBAA          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       DD AAABBBBBBBAAA DD      ", "        C AEFB  G  BFEA C       ", "          AGFB     BFGA         ", "          AAAB BBB BAAA         ", "             BBCCCBB            ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       D  AAABBBBBBBAAA  D      ", "       C  AEFB  G  BFEA  C      ", "          AGFB     BFGA         ", "          AAABBBBBBBAAA         ", "               AAA              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      DD  AAABBBBBBBAAA  DD     ", "       C  AEFBBBGBBBFEA  C      ", "          AGFBBBBBBBFGA         ", "          AAA  AAA  AAA         ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      D   AAA  AAA  AAA   D     ", "      C   AAA  AGA  AAA   C     ", "          AGA  AAA  AGA         ", "           AA       AA          ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     DD                   DD    ", "      C         G         C     ", "           G    G    G          ", "                G               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     D AAA             AAA D    ", "     C AAA             AAA C    ", "       HHH G         G HHH      ", "       HHH      G      HHH      ", "       AAA             AAA      ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    DDAAAAA           AAAAADD   ", "     CAFEFIIIIIIIIIIIIIFEFAC    ", "      HF FHG         GHF FH     ", "      HFEFH     G     HFEFH     ", "      AAAAA           AAAAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA           AAAAA D   ", "    C AEEEA  I     I  AEEEA C   ", "      H J HG         GH J H     ", "      HEEEH     G     HEEEH     ", "      AAEAA           AAEAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA    C C    AAAAA D   ", "    C AFEFIIII C C IIIIFEFA C   ", "      HF FHG   C C   GHF FH     ", "      HFEFH    CGC    HFEFH     ", "      AAAAA    C C    AAAAA     ", "               C C              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   DD  AAA   KKKEKKK   AAA  DD  ", "    C  AAA   BBBBBBB   AAA  C   ", "       HHH G BHBBBHB G HHH      ", "       HHH   BHBGBHB   HHH      ", "       AAA   BBBBBBB   AAA      ", "             KKKKKKK            ", "               CBC              ", "                B               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D        KAAAEAAAK        D  ", "   C        BB     BB        C  ", "           GBB     BBG          ", "            BB     BB           ", "            BB     BB           ", "            KK  E  KK           ", "             BBBBBBB            ", "              BBBBB             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              BBBBB             ", "                E               ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D       KAAAAEAAAAK       D  ", "   C       BB       BB       C  ", "           GB       BG          ", "           BB       BB          ", "           BB       BB          ", "           KK   E   KK          ", "            BB     BB           ", "             BB   BB            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             BB B BB            ", "              BBBBB             ", "                E               ", "                                ")
                    .aisle("  CCCCCCCCCCCCCCCCCCCCCCCCCCCCC ", "  DD      KAAAAAEAAAAAK      DD ", "   C      BB         BB      C  ", "          BG         GB         ", "          BB         BB         ", "          BB         BB         ", "          KK    E    KK         ", "           BB       BB          ", "            BB     BB           ", "            HH LLL HH           ", "            HH  L  HH           ", "            HH  L  HH           ", "            HH LLL HH           ", "            BB     BB           ", "             BBBBBBB            ", "              AAEAA             ", "                                ")
                    .aisle(" ACCCCCCCCCCCCCCCCCCCCCCCCCCCCCA", " ADAAAACC KAAAAAEAAAAAK CCAAAADA", " AAAAAAAAAB   F   F   BAAAAAAAAA", "       AAAB   FFFFF   BAAA      ", "        AAB   F   F   BAA       ", "        AAB   FFFFF   BAA       ", "         AK   F E F   KA        ", "         AAB  FFFFF  BAA        ", "           BB       BB          ", "           HH L L L HH          ", "           HH       HH          ", "           HH       HH          ", "           HH L L L HH          ", "           BB       BB          ", "            BB     BB           ", "             AAAKAAA            ", "                                ")
                    .aisle("  MCCCCCCCCCCCCCCCCCCCCCCCCCCCMA", "  MMMMMMM KAAAAAEAAAAAK MMMMMMMA", " ACCCCCCC B           B CCCCCCCA", "   AAAANN B   F   F   B NNAAAA  ", "       NN B           B NN      ", "        N B   F   F   B N       ", "        NAK     E     KAN       ", "        NAAB  F   F  BAAN       ", "         AAB         BAA        ", "           H L  L  L H          ", "           H         H          ", "           H         H          ", "           H L  L  L H          ", "           B         B          ", "            BB     BB           ", "             AAEKEAA            ", "               AAA              ")
                    .aisle("  MCCCCCCCCCCCCCCCCCCCCCCCCCCCMA", "  MMMMMMM EEEEEEJEEEEEE MMMMMMM~", " ACCCCCCC B     J     B CCCCCCCA", "  AAEEENN B   F J F   B NNEEEAA ", "       NN B     J     B NN      ", "       NN B   F J F   B NN      ", "       NNAEEEEEEJEEEEEEANN      ", "        NABB  F J F  BBAN       ", "        NABB    J    BBAN       ", "           B LLLJLLL B          ", "           B L  J  L B          ", "           B L  J  L B          ", "           B LLLJLLL B          ", "           BB   J   BB          ", "           EBB  K  BBE          ", "            EEKKKKKEE           ", "               AAA              ")
                    .aisle("  MCCCCCCCCCCCCCCCCCCCCCCCCCCCMA", "  MMMMMMM KAAAAAEAAAAAK MMMMMMMA", " ACCCCCCC B           B CCCCCCCA", "   AAAANN B   F   F   B NNAAAA  ", "       NN B           B NN      ", "        N B   F   F   B N       ", "        NAK     E     KAN       ", "        NAAB  F   F  BAAN       ", "         AAB         BAA        ", "           H L  L  L H          ", "           H         H          ", "           H         H          ", "           H L  L  L H          ", "           B         B          ", "            BB     BB           ", "             AAEKEAA            ", "               AAA              ")
                    .aisle(" ACCCCCCCCCCCCCCCCCCCCCCCCCCCCCA", " ADAAAACC KAAAAAEAAAAAK CCAAAADA", " AAAAAAAAAB   F   F   BAAAAAAAAA", "       AAAB   FFFFF   BAAA      ", "        AAB   F   F   BAA       ", "        AAB   FFFFF   BAA       ", "         AK   F E F   KA        ", "         AAB  FFFFF  BAA        ", "           BB       BB          ", "           HH L L L HH          ", "           HH       HH          ", "           HH       HH          ", "           HH L L L HH          ", "           BB       BB          ", "            BB     BB           ", "             AAAKAAA            ", "                                ")
                    .aisle("  CCCCCCCCCCCCCCCCCCCCCCCCCCCCC ", "  DD      KAAAAAEAAAAAK      DD ", "   C      BB         BB      C  ", "          BG         GB         ", "          BB         BB         ", "          BB         BB         ", "          KK    E    KK         ", "           BB       BB          ", "            BB     BB           ", "            HH LLL HH           ", "            HH  L  HH           ", "            HH  L  HH           ", "            HH LLL HH           ", "            BB     BB           ", "             BBBBBBB            ", "              AAEAA             ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D       KAAAAEAAAAK       D  ", "   C       BB       BB       C  ", "           GB       BG          ", "           BB       BB          ", "           BB       BB          ", "           KK   E   KK          ", "            BB     BB           ", "             BB   BB            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             BB B BB            ", "              BBBBB             ", "                E               ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D        KAAAEAAAK        D  ", "   C        BB     BB        C  ", "           GBB     BBG          ", "            BB     BB           ", "            BB     BB           ", "            KK  E  KK           ", "             BBBBBBB            ", "              BBBBB             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              BBBBB             ", "                E               ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   DD  AAA   KKKEKKK   AAA  DD  ", "    C  AAA   BBBBBBB   AAA  C   ", "       HHH G BHBBBHB G HHH      ", "       HHH   BHBBBHB   HHH      ", "       AAA   BBBBBBB   AAA      ", "             KKKKKKK            ", "               CBC              ", "                B               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA    C C    AAAAA D   ", "    C AFEFIIII C C IIIIFEFA C   ", "      HF FHG   C C   GHF FH     ", "      HFEFH    CGC    HFEFH     ", "      AAAAA    C C    AAAAA     ", "               C C              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA           AAAAA D   ", "    C AEEEA  I     I  AEEEA C   ", "      H J HG         GH J H     ", "      HEEEH     G     HEEEH     ", "      AAEAA           AAEAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    DDAAAAA           AAAAADD   ", "     CAFEFAIIIIIIIIIIIIFEFAC    ", "      HF FHG         GHF FH     ", "      HFEFH     G     HFEFH     ", "      AAAAA           AAAAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     D AAA             AAA D    ", "     C AAA             AAA C    ", "       HHH G         G HHH      ", "       HHH      G      HHH      ", "       AAA             AAA      ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     DD                   DD    ", "      C         G         C     ", "           G    G    G          ", "                G               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      D   AAA  AAA  AAA   D     ", "      C   AAA  AGA  AAA   C     ", "          AGA  AAA  AGA         ", "           AA       AA          ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      DD  AAABBBBBBBAAA  DD     ", "       C  AEFBBBGBBBFEA  C      ", "          AGFBBBBBBBFGA         ", "          AAA  AAA  AAA         ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       D  AAABBBBBBBAAA  D      ", "       C  AEFB  G  BFEA  C      ", "          AGFB     BFGA         ", "          AAABBBBBBBAAA         ", "               AAA              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       DD AAABBBBBBBAAA DD      ", "        C AEFB  G  BFEA C       ", "          AGFB     BFGA         ", "          AAAB BBB BAAA         ", "             BBCCCBB            ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("        CCCCCCCCCCCCCCCCC       ", "        DDAAABBBBBBBAAADD       ", "         CAAABFBBBFBAAAC        ", "          AAABFBBBFBAAA         ", "           AABBBBBBBAA          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("         CCCCCCCCCCCCCCC        ", "         DDEABBBBBBBAEDD        ", "          CEABBA ABBAEC         ", "           EABBA ABBAE          ", "           EABBA ABBAE          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.SPS_CASING.get())
                            .setMinGlobalLimited(800)
                            .or(GTEPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTEBlocks.FUSION_CASING_MK4.get()))
                    .where('C', blocks(GTEBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('E', blocks(GTEBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('F', blocks(Blocks.CRYING_OBSIDIAN))
                    .where('G', blocks(GTEBlocks.ACCELERATED_PIPELINE.get()))
                    .where('H', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('I', blocks(GCYMBlocks.MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where('J', blocks(GTEBlocks.MAGIC_CORE.get()))
                    .where('K', blocks(GTEBlocks.AMPROSIUM_CASING.get()))
                    .where('L', blocks(GTEBlocks.FUSION_COIL_MK2.get()))
                    .where('M', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('N', blocks(GTEBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/fusion/fusion_casing_mk2"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    MultiblockMachineDefinition MATTER_FABRICATOR = multiblock("matter_fabricator", "物质生成机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.MATTER_FABRICATOR_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(false, true, false)
            .parallelizableOverclock()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle(" CCCCDDDDDCCCC ", "EFFFFDGGGDFFFFE", "EFFFFDHHHDFFFFE", "EFFFFDGGGDFFFFE", " CCCCDDDDDCCCC ")
                    .aisle("EFFFFDGGGDFFFFE", "F I IIIIIII I F", "F I I     I I F", "F I IIIIIII I F", "EFFFFDGGGDFFFFE")
                    .aisle("EFFFFDHHHDFFFFE", "F I I     I I F", "FJJJJJJJJJJJJJF", "F I I     I I F", "EFFFFDHHHDFFFFE")
                    .aisle("EFFFFDGGGDFFFFE", "F I IIIIIII I F", "F I I     I I F", "F I IIIIIII I F", "EFFFFDGGGDFFFFE")
                    .aisle(" CCCCDDDDDCCCC ", "EFFFFDGGGDFFFFE", "EFFFFDHHHDFFFFE", "EFFFFDGGGDFFFFE", " CCCCDDDDDCCCC ")
                    .aisle("               ", "   AAA   AAA   ", "   ABA   AAA   ", "   AAA   AAA   ", "               ")
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('D', blocks(GTBlocks.MACHINE_CASING_UHV.get()))
                    .where('E', blocks(GTEBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('F', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('G', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('H', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('I', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('J', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('A', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTEPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition VOID_FLUID_DRILLING_RIG = multiblock("void_fluid_drilling_rig", "虚空流体钻机", VoidFluidDrillingRigMachine::new)
            .nonYAxisRotation()
            .tooltipsText("Requires a minimum power of 30,720EU/t", "需要最低30720EU/t的功率")
            .tooltipsText("Outputs fluids based on the dimension and circuit value", "按维度和电路值输出流体")
            .recipe(GTERecipeTypes.DUMMY_RECIPES)
            .alwaysTryModifyRecipe(true)
            .block(GTBlocks.CASING_HSSE_STURDY)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("ABBBBA ", "AAAAAA ", " C C   ", " C C   ", " C C   ", " C C   ", "       ", "       ")
                    .aisle("B   BBB", "A   DDD", "    DDD", "    DDD", " C CDDD", " EEE   ", "       ", "       ")
                    .aisle("B FGBBB", "H IGDDD", "  IGD D", "  IGD D", "  IGD D", " EIEDDD", "  I    ", "  I    ")
                    .aisle("B   BBB", "A   DDD", "    DDD", "    DDD", " C CDDD", " EEE   ", "       ", "       ")
                    .aisle("ABBBBA ", "AAAAAA ", " C C   ", " C C   ", " C C   ", " C C   ", "       ", "       ")
                    .where('B', blocks(GTEBlocks.COBALT_OXIDE_CERAMIC_STRONG_THERMALLY_CONDUCTIVE_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSSG)))
                    .where('F', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('G', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('A', blocks(GTBlocks.CASING_HSSE_STURDY.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setMinGlobalLimited(1))
                            .or(abilities(GTEPartAbility.ITEMS_INPUT).setExactLimit(1))
                            .or(abilities(EXPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/fluid_drilling_rig"))
            .register();

    MultiblockMachineDefinition VOID_MINER = multiblock("void_miner", "虚空采矿机", VoidMinerMachine::new)
            .nonYAxisRotation()
            .tooltipsText("Requires 1B drilling fluid and a minimum power of 1920EU/t", "需要输入1B钻井液和最低1920EU/t的功率")
            .tooltipsText("Randomly selects 4 types of ores output based on the dimension, with the voltage level determining the maximum output quantity and the current determining the parallels", "按维度随机选取4分矿石输出，电压等级决定最大输出数量，电流决定并行数")
            .recipe(GTERecipeTypes.DUMMY_RECIPES)
            .alwaysTryModifyRecipe(true)
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle(" AAAAA ", " BBBBB ", "  C C  ", "  C C  ", "  CCC  ", "       ")
                    .aisle("AAA AAA", "BCD DCB", "B DED B", "B D D B", " CD DC ", "  C C  ")
                    .aisle("AA   AA", "B  F  B", "  FEF  ", "   F   ", "       ", "  C C  ")
                    .aisle("AA   AA", "B     G", "   E   ", "       ", "       ", "  C C  ")
                    .aisle("AA   AA", "B  F  B", "  FEF  ", "   F   ", "       ", "  C C  ")
                    .aisle("AAA AAA", "BCD DCB", "B DED B", "B D D B", " CD DC ", "  C C  ")
                    .aisle(" AAAAA ", " BBBBB ", "  C C  ", "  C C  ", "  CCC  ", "       ")
                    .where('A', blocks(GTEBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('E', blocks(GTBlocks.MACHINE_CASING_HV.get()))
                    .where('F', blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where('B', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setMinGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(EXPORT_ITEMS).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/large_miner"))
            .register();

    MultiblockMachineDefinition LARGE_VOID_MINER = multiblock("large_void_miner", "大型虚空采矿厂", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.LARGE_VOID_MINER_RECIPES)
            .recipe(GTERecipeTypes.RANDOM_ORE_RECIPES)
            .tooltipsText("Precision mode consumes resources to collect specified veins", "精准模式消耗精华采集指定矿脉")
            .tooltipsText("Random mode consumes 10KB of drilling fluid and has a longer Duration to randomly collect all ores; ensure enough output space in random mode", "随机模式消耗10KB的钻井液和更长的耗时随机采集所有矿石，随机模式注意输出空间要足够")
            .recipeModifier((machine, recipe) -> {
                if (((ElectricMultiblockMachine) machine).getRecipeType() == GTERecipeTypes.RANDOM_ORE_RECIPES) {
                    return GTERecipeModifiers.overclocking(machine, GTERecipeModifiers.accurateParallel(machine, recipe, 1 << ((((ElectricMultiblockMachine) machine).getTier() - GTValues.ZPM) << 1)));
                }
                return GTERecipeModifiers.overclocking(machine, recipe);
            })
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbbbbbbbb", "bbbbbbbbb", "b       b", "b       b", "b       b", "bbbbbbbbb", "bcccccccb", "bcccccccb", "b       b", "b       b")
                    .aisle("b       b", "b       b", "         ", "         ", "         ", "b   d   b", "c  ddd  c", "c  ddd  c", "   ddd   ", "         ")
                    .aisle("b       b", "b       b", "         ", "    d    ", "   ddd   ", "b  ddd  b", "c dd dd c", "c d   d c", "  d   d  ", "         ")
                    .aisle("b   d   b", "b   d   b", "   ddd   ", "   d d   ", "  dd dd  ", "b d   d b", "cdd   ddc", "cd     dc", " d     d ", "         ")
                    .aisle("b  d d  b", "b  d d  b", "   d d   ", "  d   d  ", "  d   d  ", "bdd   ddb", "cd     dc", "cd     dc", " d     d ", "         ")
                    .aisle("b   d   b", "b   d   b", "   ddd   ", "   d d   ", "  dd dd  ", "b d   d b", "cdd   ddc", "cd     dc", " d     d ", "         ")
                    .aisle("b       b", "b       b", "         ", "    d    ", "   ddd   ", "b  ddd  b", "c dd dd c", "c d   d c", "  d   d  ", "         ")
                    .aisle("b       b", "b       b", "         ", "         ", "         ", "b   d   b", "c  ddd  c", "c  ddd  c", "   ddd   ", "         ")
                    .aisle("bbbbbbbbb", "bbbbabbbb", "b       b", "b       b", "b       b", "bbbbbbbbb", "bcccccccb", "bcccccccb", "b       b", "b       b")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .setMinGlobalLimited(110)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ultimet)))
                    .where('d', blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/large_miner"))
            .register();

    MultiblockMachineDefinition CHEMICAL_PLANT = multiblock("chemical_plant", "化工厂", CoilMultiblockMachine.createCoilMachine(false, false))
            .allRotation()
            .recipe(GTERecipeTypes.CHEMICAL)
            .tooltipsText("Coil tier above Bronze reduction energy consumption and duration by 5%", "线圈等级每高出白铜一级能耗与时间减少5%")
            .parallelizableTooltips()
            .customTooltipsBuilder(true, false, false)
            .recipeModifier(GTERecipeModifiers.coilReductionOverclock(true))
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("b   b", "bbbbb", "b   b", "bbbbb", "b   b")
                    .aisle("bbbbb", "bcccb", "bdddb", "bcccb", "bbbbb")
                    .aisle("b   b", "bdddb", "bcccb", "bdddb", "b   b")
                    .aisle("bbbbb", "bcccb", "bdddb", "bcccb", "bbbbb")
                    .aisle("b   b", "abbbb", "b   b", "bbbbb", "b   b")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .setMinGlobalLimited(60)
                            .or(blocks(GTEMachines.CATALYST_HATCH.getBlock()).setMaxGlobalLimited(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(GTEPredicates.autoAccelerateAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', heatingCoils())
                    .where('d', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where(' ', any())
                    .build())
            .additionalDisplay(CHEMICAL_PLANT_DISPLAY)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/machines/chemical_reactor"))
            .register();

    MultiblockMachineDefinition DECAY_HASTENER = multiblock("decay_hastener", "衰变加速器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.DECAY_HASTENER_RECIPES)
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTEBlocks.HYPER_MECHANICAL_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "ABBBA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "ABBBA", "AAAAA")
                    .aisle("A   A", "BEEEB", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "BEEEB", "A   A")
                    .aisle("A   A", "BEEEB", "DGHGD", "EGHGE", "FGHGF", "EGHGE", "DGHGD", "EGHGE", "FGHGF", "EGHGE", "DGHGD", "BEEEB", "A   A")
                    .aisle("A   A", "BEEEB", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "BEEEB", "A   A")
                    .aisle("AAAAA", "ABCBA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "ABBBA", "AAAAA")
                    .where('A', blocks(GTEBlocks.FISSION_REACTOR_CASING.get()))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('E', blocks(GTEBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('G', blocks(GTBlocks.FUSION_CASING.get()))
                    .where('H', blocks(GTBlocks.HERMETIC_CASING_UV.get()))
                    .where('B', blocks(GTEBlocks.HYPER_MECHANICAL_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/data_bank"))
            .register();

    MultiblockMachineDefinition RECYCLER = multiblock("recycler", "回收机", CustomParallelMultiblockMachine.createParallel(m -> 1 << Math.max(0, (2 * (m.getTier() - 4))), true))
            .allRotation()
            .recipe(GTERecipeTypes.RECYCLER_RECIPES)
            .tooltipsText("Maximum parallelism x4 for every voltage tier above EV1", "电压等级每高出EV1级，最大并行数x4")
            .overclock()
            .block(GTBlocks.STEEL_HULL)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("DDDDD", "DDGDD", "EEEEE", "EEEEE")
                    .aisle("DEEED", "D   D", "E   E", "EFFFE")
                    .aisle("DEEED", "D   D", "EEEEE", "EEEEE")
                    .aisle("AAAAA", "ACCCA", "AAAAA", "CAAAC")
                    .aisle("AAAAA", "B   B", "A   A", "CAAAC")
                    .aisle("AAAAA", "B   B", "A   A", "CAAAC")
                    .aisle("AAAAA", "B   B", "A   A", "CAAAC")
                    .aisle("AAAAA", "ABBBA", "AAAAA", "     ")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('B', blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('E', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('F', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.STEEL_HULL.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/steam/steel/side"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .afterWorking(m -> {
                if (m.getRecipeLogic().getLastRecipe() != null && m.getRecipeLogic().getLastRecipe().data.getBoolean("isCustom")) {
                    m.getRecipeLogic().markLastRecipeDirty();
                    ((IEnhancedRecipeLogic) m.getRecipeLogic()).gTECore$setLockRecipe(false);
                }
            })
            .register();

    MultiblockMachineDefinition MASS_FABRICATOR = multiblock("mass_fabricator", "质量发生器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.MASS_FABRICATOR_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, false, false)
            .parallelizablePerfectOverclock()
            .block(GTBlocks.MACHINE_CASING_UHV)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbbbb", " c c ", " c c ", " c c ", "bbbbb")
                    .aisle("bbbbb", "cdfdc", "cdfdc", "cdfdc", "bbbbb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", "cdfdc", "cdfdc", "cdfdc", "bbbbb")
                    .aisle("bbabb", " c c ", " c c ", " c c ", "bbbbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.MACHINE_CASING_UHV.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(16).setPreviewCount(16))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('d', blocks(GTEBlocks.HYPER_CORE.get()))
                    .where('e', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('f', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/uhv/side"), GTCEu.id("block/multiblock/gcym/large_electrolyzer"))
            .register();

    MultiblockMachineDefinition ADVANCED_MASS_FABRICATOR = multiblock("advanced_mass_fabricator", "进阶质量发生器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.MASS_FABRICATOR_RECIPES)
            .eutMultiplierTooltips(0.8)
            .durationMultiplierTooltips(0.5)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, true, false)
            .recipeModifiers(GTERecipeModifiers.HATCH_PARALLEL, GTERecipeModifiers.overclocking(true, 0.8, 0.5))
            .block(GTBlocks.MACHINE_CASING_UXV)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "                     ", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "CAAAAAAAAA AAAAAAAAAC", "C                    ", "CAAAAAAAAA AAAAAAAAAC", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("                     ", " DDDDDDDD   DDDDDDDD ", " EEEEEEEEEEEEEEEEEEE ", " EEEEEEEEEEEEEEEEEEE ", " DDDDDDDD   DDDDDDDD ", "C                    ", "G                    ", "C                    ", " DDDDDDDD   DDDDDDDD ", " EEEEEEEEEEEEEEEEEEE ", " EEEEEEEEEEEEEEEEEEE ", " DDDDDDDD   DDDDDDDD ", "                     ")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "CAAAAAAAAA AAAAAAAAAC", "C                    ", "CAAAAAAAAA AAAAAAAAAC", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "                     ", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA")
                    .where('A', blocks(GTBlocks.MACHINE_CASING_UXV.get()))
                    .where('B', blocks(GTEBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where('C', blocks(GTBlocks.MACHINE_CASING_UXV.get())
                            .or(GTEPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTEBlocks.TITANSTEEL_COIL_BLOCK.get()))
                    .where('E', blocks(GTEBlocks.HOLLOW_CASING.get()))
                    .where('F', blocks(GTEBlocks.RESTRAINT_DEVICE.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/uxv/side"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition PRECISION_ASSEMBLER = multiblock("precision_assembler", "精密组装机", TierCasingParallelMultiblockMachine.createParallel(m -> 1 << (m.getCasingTier(GLASS_TIER)), true, GLASS_TIER, MACHINE_CASING_TIER))
            .allRotation()
            .recipe(GTERecipeTypes.PRECISION_ASSEMBLER_RECIPES)
            .recipe(GTRecipeTypes.ASSEMBLER_RECIPES)
            .tooltipsText("The machine casing tier determines the upper limit of recipe tier, while the glass tier determines the parallel.", "外壳等级决定配方等级上限，玻璃等级决定并行")
            .customTooltipsBuilder(true, false, false)
            .perfectOverclock()
            .block(GTEBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("bbbbbbbbb", "d       d", "d       d", "d       d", "bbbbbbbbb")
                    .aisle("bAAAAAAAb", "bcccccccb", "bcccccccb", "bcccccccb", "bbbbbbbbb")
                    .aisle("bAAAAAAAb", "b-------b", "b-------b", "b-------b", "bbbbbbbbb")
                    .aisle("bAAAAAAAb", "bcccccccb", "bcccccccb", "bcccccccb", "bbbbbbbbb")
                    .aisle("bbbbabbbb", "d       d", "d       d", "d       d", "bbbbbbbbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTEBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get())
                            .setMinGlobalLimited(70)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', GTEPredicates.glass())
                    .where('d', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTEMaterials.HastelloyN)))
                    .where('A', GTEPredicates.machineCasing())
                    .where('-', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/oxidation_resistant_hastelloy_n_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    MultiblockMachineDefinition FISHING_GROUND = multiblock("fishing_ground", "渔场", FishingGroundMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.FISHING_GROUND_RECIPES)
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTEBlocks.ALUMINIUM_BRONZE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("    AAAAA    ", "    AAFAA    ", "    BBBBB    ", "             ")
                    .aisle("   BBBBBBB   ", "   BCCCCCB   ", "   BB E BB   ", "             ")
                    .aisle("  BBBBBBBBB  ", "  BCCCCCCCB  ", "  BB  E  BB  ", "             ")
                    .aisle(" BBBBBBBBBBB ", " BCCCCCCCCCB ", " BB   E   BB ", "             ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCCCCCCCCA", "BB    E    BB", "             ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCBEBCCCCA", "B    BEB    B", "     BBB     ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCEDECCCCA", "BEEEEEDEEEEEB", "     BBB     ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCBEBCCCCA", "B    BDB    B", "     BBB     ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCCCCCCCCA", "BB    D    BB", "             ")
                    .aisle(" BBBBBBBBBBB ", " BCCCCCCCCCB ", " BB   D   BB ", "             ")
                    .aisle("  BBBBBBBBB  ", "  BCCCCCCCB  ", "  BB  D  BB  ", "             ")
                    .aisle("   BBBBBBB   ", "   BCCCCCB   ", "   BB D BB   ", "             ")
                    .aisle("    AAAAA    ", "    AAAAA    ", "    BBBBB    ", "             ")
                    .where('A', blocks(GTEBlocks.ALUMINIUM_BRONZE_CASING.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTEBlocks.ALUMINIUM_BRONZE_CASING.get()))
                    .where('C', fluids(Fluids.WATER))
                    .where('D', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('F', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/aluminium_bronze_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    MultiblockMachineDefinition LAVA_FURNACE = multiblock("lava_furnace", "熔岩炉", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.LAVA_FURNACE_RECIPES)
            .tooltipsText("Each provided piece of any type of cobblestone or stone can output 1B of lava.", "每提供一个任意类型的圆石或石头可输出1B熔岩")
            .overclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("CCC", "DDD", "DDD")
                    .aisle("CCC", "D D", "DMD")
                    .aisle("CCC", "DAD", "DDD")
                    .where('A', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(autoAbilities(definition.getRecipeTypes())))
                    .where('M', abilities(MUFFLER))
                    .where('C', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_oven"))
            .register();

    MultiblockMachineDefinition LARGE_GAS_COLLECTOR = multiblock("large_gas_collector", "大型集气室", CustomParallelMultiblockMachine.createParallel(m -> 100000, true))
            .noneRotation()
            .recipe(GTERecipeTypes.LARGE_GAS_COLLECTOR_RECIPES)
            .overclock()
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaaaa", "abbba", "abbba", "abbba", "aaaaa")
                    .aisle("aaaaa", "bcccb", "bcccb", "bcccb", "abbba")
                    .aisle("aaaaa", "bcccb", "bcecb", "bcccb", "abdba")
                    .aisle("aaaaa", "bcccb", "bcccb", "bcccb", "abbba")
                    .aisle("aaaaa", "abbba", "abbba", "abbba", "aaaaa")
                    .where('d', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .setMinGlobalLimited(40)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('b', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('e', blocks(GTBlocks.HERMETIC_CASING_IV.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/machines/gas_collector"))
            .register();

    MultiblockMachineDefinition ENGRAVING_LASER_PLANT = multiblock("engraving_laser_plant", "激光蚀刻工厂", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.PRECISION_LASER_ENGRAVER_RECIPES)
            .recipe(GTRecipeTypes.LASER_ENGRAVER_RECIPES)
            .recipe(GTERecipeTypes.LASER_WELDER_RECIPES)
            .tooltipsText("Precision laser mode does not support parallelism, Running the Laser Welder formula at speed x5.", "精密激光模式不支持并行，运行激光焊接配方时速度x5")
            .parallelizableTooltips()
            .customTooltipsBuilder(true, false, false)
            .recipeModifiers((machine, recipe) -> {
                if (machine instanceof ElectricMultiblockMachine workableElectricMultiblockMachine) {
                    if (workableElectricMultiblockMachine.getRecipeType() == GTRecipeTypes.LASER_ENGRAVER_RECIPES) return GTERecipeModifiers.hatchParallel(workableElectricMultiblockMachine, recipe);
                    if (workableElectricMultiblockMachine.getRecipeType() == GTERecipeTypes.LASER_WELDER_RECIPES) {
                        recipe.duration = recipe.duration / 5;
                        return GTERecipeModifiers.hatchParallel(workableElectricMultiblockMachine, recipe);
                    }
                }
                return recipe;
            }, GTERecipeModifiers.PERFECT_OVERCLOCKING)
            .block(GTEBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("       aaaaaaa       ", "       aaaaaaa       ", "       aaa~aaa       ", "       aaaaaaa       ", "        aaaaa        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        JDIDJ        ", "        A   A        ", "         AAA         ", "          B          ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        JDIDJ        ", "        A   A        ", "         AAA         ", "          B          ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  JDIDJ  FAF   ", "   FAF  A   A  FAF   ", "   FAF   AAA   FAF   ", "   FAF    B    FAF   ", "   FAF         FAF   ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FMDMF JDIDJ FBDBF  ", "  FM MF A   A FB BF  ", "  FM MF  AAA  FB BF  ", "  FM MF   B   FB BF  ", "  FMDMF       FBDBF  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  ADDDA JDIDJ ADDDA  ", "  A I A A   A A I A  ", "  A I A  AAA  A I A  ", "  A I A   B   A I A  ", "  ADDDA       ADDDA  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FMDMF JDIDJ FBDBF  ", "  FM MF A   A FB BF  ", "  FM MF  AAA  FB BF  ", "  FM MF   B   FB BF  ", "  FMDMF       FBDBF  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  JDIDJ  FAF   ", "   FAF  A   A  FAF   ", "   FAF   AAA   FAF   ", "   FAF    B    FAF   ", "   FAF         FAF   ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("       AAAAAAA       ", "       JADIDAJ       ", "       AABBBAA       ", "    I   AAAAA   I    ", "         AAA         ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle(" AAA   AAAAAAA   AAA ", " AKA   JDBBBDJ   ALA ", " AKA   ABDDDBA   ALA ", " AKAI  AABBBAA  IALA ", " AKA    AAAAA    ALA ", " AAA    AAHAA    AAA ", "         AHA         ", "         AHA         ", "         AHA         ", "         AHA         ", "         AAA         ", "                     ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB   BDJ ABBBA", "ACDCA ABD I DBA ACDCA", "ACDCA  AB   BA  ACDCA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AAD DAA  ALLLA", " AAA    AD DA    AAA ", "        AD DA        ", "        AD DA        ", "        AAAAA        ", "        ABBBA        ", "         BBB         ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB I BDJ ABBBA", "AD DA ABDIIIDBA AD DA", "AD DAIIAB I BAIIAD DA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AH I HA  ALLLA", " AAACCCCH I HCCCCAAA ", "        H I H        ", "        H I H        ", "        HAAAH        ", "        ABBBA        ", "         BBB         ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB   BDJ ABBBA", "ACDCA ABD I DBA ACDCA", "ACDCA  AB   BA  ACDCA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AAD DAA  ALLLA", " AAA    AD DA    AAA ", "        AD DA        ", "        AD DA        ", "        AAAAA        ", "        ABBBA        ", "         BBB         ")
                    .aisle(" AAA   AAAAAAA   AAA ", " AKA   JDBBBDJ   ALA ", " AKA   ABDDDBA   ALA ", " AKAI  AABBBAA  IALA ", " AKA    AAAAA    ALA ", " AAA    AAHAA    AAA ", "         AHA         ", "         AHA         ", "         AHA         ", "         AHA         ", "         AAA         ", "                     ")
                    .aisle("       AAAAAAA       ", "       JJDDDJJ       ", "       AABBBAA       ", "    I   AAAAA   I    ", "         AAA         ", "         AAA         ", "          C          ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA   AAA   AAA   ", "   FAF   JJJ   FAF   ", "   FAF   AAA   FAF   ", "   FAF    I    FAF   ", "   FAF         FAF   ", "   FAF         FAF   ", "   AAA    C    AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA       AAAAA  ", "  FHDHF       FEDEF  ", "  FH HF       FE EF  ", "  FH HF   I   FE EF  ", "  FH HF       FE EF  ", "  FHDHF       FEDEF  ", "  ABBBA   C   ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA  AAA  AAAAA  ", "  ADDDA  AAA  ADDDA  ", "  A I A  AAA  A I A  ", "  A I AIIAAAIIA I A  ", "  A I A  AAA  A I A  ", "  ADDDA  AAA  ADDDA  ", "  ABBBA   C   ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FHDHF ABBBA FEDEF  ", "  FH HF ACDCA FE EF  ", "  FH HF ACDCA FE EF  ", "  FH HF ABBBA FE EF  ", "  FHDHF AEEEA FEDEF  ", "  ABBBA  AAA  ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  GBBBG  FAF   ", "   FAF  GD DG  FAF   ", "   FAF  GD DG  FAF   ", "   FAF  GBBBG  FAF   ", "   FAF  AEEEA  FAF   ", "   AAA   AAA   AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        ABBBA        ", "        ACDCA        ", "        ACDCA        ", "        ABBBA        ", "        AEEEA        ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('D', blocks(GTEBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('E', blocks(GTEBlocks.COMPONENT_ASSEMBLY_LINE_CASING_UV.get()))
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('H', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('I', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('J', blocks(GTBlocks.FILTER_CASING_STERILE.get()))
                    .where('K', blocks(GTEBlocks.ADVANCED_COMPRESSED_FUSION_COIL.get()))
                    .where('L', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('M', blocks(GTEBlocks.MOLECULAR_CASING.get()))
                    .where('a', blocks(GTEBlocks.IRIDIUM_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_ITEMS).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(EXPORT_ITEMS).setPreviewCount(1))
                            .or(abilities(COMPUTATION_DATA_RECEPTION).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/gcym/large_engraving_laser"))
            .register();

    MultiblockMachineDefinition MEGA_ALLOY_BLAST_SMELTER = multiblock("mega_alloy_blast_smelter", "巨型合金冶炼炉", CoilMultiblockMachine.createCoilMachine(true, true))
            .nonYAxisRotation()
            .recipe(GCYMRecipeTypes.ALLOY_BLAST_RECIPES)
            .eutMultiplierTooltips(0.8)
            .durationMultiplierTooltips(0.6)
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.2")
            .parallelizableTooltips()
            .recipeModifier(GTERecipeModifiers.GCYM_OVERCLOCKING)
            .block(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("   eeeee   ", "   cbbbc   ", "   cbbbc   ", "   cbbbc   ", "   eeeee   ", "   bbbbb   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .aisle("  ebbbbbe  ", "  c     c  ", "  c     c  ", "  c     c  ", "  efffffe  ", "  bbbbbbb  ", "   bbbbb   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   bbbbb   ", "           ")
                    .aisle(" ebbbbbbbe ", " cbeeeeebc ", " cbeeeeebc ", " cbeeeeebc ", " ebeeeeebe ", " bbbbbbbbb ", "  baaaaab  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  bbbbbbb  ", "   bbbbb   ")
                    .aisle("ebbbbbbbbbe", "c ehhhhhe c", "c eiiiiie c", "c ejjjjje c", "efeeeeeeefe", "bbbb   bbbb", " baa   aab ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " bbb   bbb ", "  bbbbbbb  ")
                    .aisle("ebbbbbbbbbe", "b ehhhhhe b", "b eiiiiie b", "b ejjjjje b", "efeeeeeeefe", "bbb     bbb", " ba     ab ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " bb     bb ", "  bbbbbbb  ")
                    .aisle("ebbbbbbbbbe", "b ehhkhhe b", "b eiikiie b", "b ejjkjje b", "efeeekeeefe", "bbb  k  bbb", " ba  k  ab ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " bb  k  bb ", "  bbbgbbb  ")
                    .aisle("ebbbbbbbbbe", "b ehhhhhe b", "b eiiiiie b", "b ejjjjje b", "efeeeeeeefe", "bbb     bbb", " ba     ab ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " bb     bb ", "  bbbbbbb  ")
                    .aisle("ebbbbbbbbbe", "c ehhhhhe c", "c eiiiiie c", "c ejjjjje c", "efeeeeeeefe", "bbbb   bbbb", " baa   aab ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " bbb   bbb ", "  bbbbbbb  ")
                    .aisle(" ebbbbbbbe ", " cbeeeeebc ", " cbeeeeebc ", " cbeeeeebc ", " ebeeeeebe ", " bbbbbbbbb ", "  baaaaab  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  bbbbbbb  ", "   bbbbb   ")
                    .aisle("  ebbbbbe  ", "  c     c  ", "  c     c  ", "  c     c  ", "  efffffe  ", "  bbbbbbb  ", "   bbbbb   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   bbbbb   ", "           ")
                    .aisle("   eeeee   ", "   cbbbc   ", "   cb~bc   ", "   cbbbc   ", "   eeeee   ", "   bbbbb   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .where('~', controller(blocks(definition.get())))
                    .where('b', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()).setMinGlobalLimited(280)
                            .or(GTEPredicates.autoMnaAccelerateAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where('a', heatingCoils())
                    .where('g', abilities(MUFFLER))
                    .where('e', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('c', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('f', blocks(GTBlocks.CASING_EXTREME_ENGINE_INTAKE.get()))
                    .where('h', blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where('i', blocks(GTBlocks.FIREBOX_TITANIUM.get()))
                    .where('j', blocks(GTBlocks.FIREBOX_TUNGSTENSTEEL.get()))
                    .where('k', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/high_temperature_smelting_casing"), GTCEu.id("block/multiblock/gcym/blast_alloy_smelter"))
            .register();

    MultiblockMachineDefinition MAGNETIC_CONFINEMENT_DIMENSIONALITY_SHOCK_DEVICE = multiblock("magnetic_confinement_dimensionality_shock_device", "磁约束维度震荡装置", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.DIMENSIONALLY_TRANSCENDENT_MIXER_RECIPES)
            .recipe(GTRecipeTypes.MIXER_RECIPES)
            .tooltipsText("Time multiplication factor for running the mixer recipe is 0.1", "运行搅拌机配方时耗时倍数为0.1")
            .parallelizableTooltips()
            .customTooltipsBuilder(true, true, false)
            .recipeModifiers((machine, recipe) -> {
                if (machine instanceof ElectricMultiblockMachine workableElectricMultiblockMachine && workableElectricMultiblockMachine.getRecipeType() == GTRecipeTypes.MIXER_RECIPES) {
                    recipe.duration = recipe.duration / 10;
                    return recipe;
                }
                return recipe;
            }, GTERecipeModifiers.HATCH_PARALLEL, GTERecipeModifiers.PERFECT_OVERCLOCKING)
            .block(GTEBlocks.MOLECULAR_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ", "AACCCCCCCCCCCCCCCCCCCCCCCCCCCAA ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa ", "A                             A ", "                                ", "                                ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "E  E     E  E     E  E     E  E ", "                                ", "                                ", "                                ", "E  E     E  E     E  E     E  E ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "                                ", "                                ", "                                ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "                                ", "                                ", "                                ", "                                ", "                                ", "FFFF     FFFF     FFFF     FFFF ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", " I                           I  ", " I             J             I  ", " I                           I  ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "                                ", "                                ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I                           I  ", " I                           I  ", " I                           I  ", " IK  L  L  K   J   K  L  L  KI  ", " I                           I  ", " I                           I  ", " I                           I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "                                ", "                                ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            AAa", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa", "E  E     E  E     E  E     E  E ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", " I                           I  ", " I                           I  ", " I                           I  ", " IK  L  L  K   J   K  L  L  KI  ", " I                           I  ", " I                           I  ", " I                           I  ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "E  E     E  E     E  E     E  E ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AA            BCB            AA ")
                    .aisle("AABBBBBBBBBBBBBCBBBBBBBBBBBBBAAa", "A                             Aa", "                                ", "                                ", "                                ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I                           I  ", " I                           I  ", " I                           I  ", " EK        K  KKK  K        KE  ", " EK  L  L  K  KJK  K  L  L  KE  ", " EK        K  KKK  K        KE  ", " I                           I  ", " I                           I  ", " I                           I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "                                ", "                                ", "                                ", "A                             A ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ")
                    .aisle("AACCCCCCCCCCCCCCCCCCCCCCCCCCCAAa", "A                             A~", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I             J             I  ", " IK  L  L  K   J   K  L  L  KI  ", " IK  L  L  K   J   K  L  L  KI  ", " EK  L  L  K  KJK  K  L  L  KE  ", " NOOOOOOOOOOOOOOOOOOOOOOOOOOON  ", " EK  L  L  K  KJK  K  L  L  KE  ", " IK  L  L  K   J   K  L  L  KI  ", " IK  L  L  K   J   K  L  L  KI  ", " I             J             I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "A                             A ", "AACCCCCCCCCCCCCCCCCCCCCCCCCCCAA ")
                    .aisle("AABBBBBBBBBBBBBCBBBBBBBBBBBBBAAa", "A                             Aa", "                                ", "                                ", "                                ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I                           I  ", " I                           I  ", " I                           I  ", " EK        K  KKK  K        KE  ", " EK  L  L  K  KJK  K  L  L  KE  ", " EK        K  KKK  K        KE  ", " I                           I  ", " I                           I  ", " I                           I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "                                ", "                                ", "                                ", "A                             A ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ")
                    .aisle("AA            BCB            AAa", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa", "E  E     E  E     E  E     E  E ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", " I                           I  ", " I                           I  ", " I                           I  ", " IK  L  L  K   J   K  L  L  KI  ", " I                           I  ", " I                           I  ", " I                           I  ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "E  E     E  E     E  E     E  E ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "                                ", "                                ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I                           I  ", " I                           I  ", " I                           I  ", " IK  L  L  K   J   K  L  L  KI  ", " I                           I  ", " I                           I  ", " I                           I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "                                ", "                                ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", " I                           I  ", " I             J             I  ", " I                           I  ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "                                ", "                                ", "                                ", "                                ", "                                ", "FFFFFFFFFFFFF     FFFF     FFFF ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa ", "A                             A ", "                                ", "                                ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "E  E     E  E     E  E     E  E ", "                                ", "                                ", "                                ", "E  E     E  E     E  E     E  E ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "                                ", "                                ", "                                ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ", "AACCCCCCCCCCCCCCCCCCCCCCCCCCCAA ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.MOLECULAR_CASING.get()))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where('C', blocks(GTEBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('D', blocks(GTEBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('E', blocks(GTEBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('F', blocks(GTBlocks.FUSION_COIL.get()))
                    .where('G', blocks(GTEBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.SamariumMagnetic)))
                    .where('I', blocks(GTEBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('J', blocks(GTEBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('K', blocks(GTEBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTEMaterials.HeavyQuarkDegenerateMatter)))
                    .where('N', blocks(GTEBlocks.AMPROSIUM_CASING.get()))
                    .where('O', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('a', blocks(GTEBlocks.MOLECULAR_CASING.get())
                            .or(GTEPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition QUANTUM_FORCE_TRANSFORMER = multiblock("quantum_force_transformer", "量子操纵者", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.QUANTUM_FORCE_TRANSFORMER_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(false, true, false)
            .parallelizableOverclock()
            .block(GTEBlocks.MANIPULATOR)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("      AAAAAA    AAAAAA    AAAAAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("      AAAAAA    AAAAAA    AAAAAA     ", "      AACCAA    AACCAA    AACCAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    DDAACCAADDDDAACCAADDDDAACCAADD   ", "    EEAACCAAEEEEAACCAAEEEEAACCAAEE   ", "      AACCAA    AACCAA    AACCAA     ", "      AACCAA    AACCAA    AACCAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    D AE  EA    AE  EA    AE  EA D   ", "    EDAE  EADDDDAE  EADDDDAE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "     FAACCAA    AACCAA    AACCAAF    ", "   FFFAACCAAFFFFAACCAAFFFFAACCAAFFF  ", "   FFFAACCAAFFFFAACCAAFFFFAACCAAFFF  ", "     FABBBBA    ABBBBA    ABBBBAF    ", "      ABBBBA    ABBBBA    ABBBBA     ", "      ABBBBA    ABBBBA    ABBBBA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    D AE  EA    AE  EA    AE  EA D   ", "    EDAE  EA    AE  EA    AE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "   FFFA    AFFFFA    AFFFFA    AFFF  ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "   FFFACCCCAFFFFACCCCAFFFFACCCCAFFF  ", "      BCCCCB    BCCCCB    BCCCCB     ", "      ACCCCA    ACCCCA    ACCCCA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "        AA        AA        AA       ", "                                     ")
                    .aisle("   DDDAAAAAADDDDAAAAAADDDDAAAAAADDD  ", "   DD AE  EA    AE  EA    AE  EA DD  ", "    EDAE  EA    AE  EA    AE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "   FFFA    AFFFFA    AFFFFA    AFFF  ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "   FFFAIIIIAFFFFAIIIIAFFFFAIIIIAFFF  ", "      BIIIIB    BIIIIB    BIIIIB     ", "      AIIIIA    AIIIIA    AIIIIA     ", "      AIIIIA    AIIIIA    AIIIIA     ", "      BIIIIB    BIIIIB    BIIIIB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAJJAA    AAJJAA    AAJJAA     ", "                                     ")
                    .aisle("   DDDAAAAAADDDDAAAAAADDDDAAAAAADDD  ", "   D  AEAAEA    AEAAEA    AEAAEA  D  ", "    DDAEAAEA    AEAAEA    AEAAEADD   ", "    DDAEAAEADDDDAEAAEADDDDAEAAEADD   ", "      AEAAEA    AEAAEA    AEAAEA     ", "   FFFAAAAAA    AAAAAA    AAAAAAFFF  ", "  FHHFAAAAAAFFFFAAAAAAFFFFAAAAAAFHHF ", "  FHHFAAAAAAFFFFAAAAAAFFFFAAAAAAFHHF ", "   FFFAAAAAA    AAAAAA    AAAAAAFFF  ", "      BBBBBB    BBBBBB    BBBBBB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      BBBBBB    BBBBBB    BBBBBB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAJJAA    AAJJAA    AAJJAA     ", "                                     ")
                    .aisle("   DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD  ", "   D   E  E         E      E  E   D  ", "    D                            D   ", "    DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD   ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "      AAAAAA    AAAAAA    AAAAAA     ", "       AAAA      AAAA      AAAA      ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  DD   E  E         E      E  E   DD ", "    D                            D   ", "    DKLDAAAAAAAAAAAAAAAAAAAAAADLKD   ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  EDD                            DDE ", "   DDKLDAAAAAAAAAAAAAAAAAAAAAADLKDD  ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  ED                              DE ", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       E  E      IIII      E  E      ", "   FF            FFFF            FF  ", "  FHHF           FFFF           FHHF ", "  FHHF           IIII           FHHF ", "   FF            IIII            FF  ", "                 IIII                ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  ED                              DE ", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       EIIEII   IKKKKI   IIEIIE      ", "   FF  IIIIIB   FFCCFF   BIIIII  FF  ", "  FHHF     II   FFCCFF   II     FHHF ", "  FHHF          II  II          FHHF ", "   FF           II  II           FF  ", "                II  II               ", "                 HHHH                ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle(" DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", " DD    E  E         E      E  E    DD", " EED                              DEE", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       HHCC I  IKKKKKKI  I CCHH      ", "   FF    BBCB  FFC  CFF  BCBB    FF  ", "  FHHF     BI  FFC  CFF  IB     FHHF ", "  FHHF         II    II         FHHF ", "   FF          II    II          FF  ", "               II    II              ", "                HJJJJH               ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "NH     E  E         E      E  E     H", "NEDD                              DDE", "  DDKKLDAAAAAAAAAAAAAAAAAAAAAADLKKDD ", "       HHCC I IKKKKKKKKI I CCHH      ", "   FF    BBCB FFCG  GCFF BCBB    FF  ", "  FHHF     BI FFCG  GCFF IB     FHHF ", "  FHHF        II G  G II        FHHF ", "   FF         II G  G II         FF  ", "              II G  G II             ", "               HJG  GJH              ", "                 AAAA                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "NH     E  E         E      E  E     H", "NED                                DE", "  DKKKLDAAAAAAAAAAAAAAAAAAAAAADLKKKD ", "       HHGGGI IKKKKKKKKI IGGGHH      ", "   FF    BBLLLLC      CLLLLBB    FF  ", "  FHHF     BI FC      CF IB     FHHF ", "  FHHF        I        I        FHHF ", "   FF         I        I         FF  ", "              I        I             ", "              AHJ    JHA             ", "               AAAHHAAA              ", "                  HH                 ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "~H     E  E         E      E  E     H", "NED                                DE", "  DLLLLDAAAAAAAAAAAAAAAAAAAAAADLLLLD ", "       HHGGGI IKKKKKKKKI IGGGHH      ", "   FF    BBLLLLLLLLLLLLLLLLBB    FF  ", "  FHHF     BI F        F IB     FHHF ", "  FHHF        I        I        FHHF ", "   FF         I        I         FF  ", "              I        I             ", "               HJ    JH              ", "                 AHHA                ", "                  HH                 ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "NH     E  E         E      E  E     H", "NED                                DE", "  DKKKLDAAAAAAAAAAAAAAAAAAAAAADLKKKD ", "       HHGGGI IKKKKKKKKI IGGGHH      ", "   FF    BBLLLLC      CLLLLBB    FF  ", "  FHHF     BI FC      CF IB     FHHF ", "  FHHF        I        I        FHHF ", "   FF         I        I         FF  ", "              I        I             ", "              AHJ    JHA             ", "               AAAHHAAA              ", "                  HH                 ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "NH     E  E         E      E  E     H", "NEDD                              DDE", "  DDKKLDAAAAAAAAAAAAAAAAAAAAAADLKKDD ", "       HHCC I IKKKKKKKKI I CCHH      ", "   FF    BBCB FFCG  GCFF BCBB    FF  ", "  FHHF     BI FFCG  GCFF IB     FHHF ", "  FHHF        II G  G II        FHHF ", "   FF         II G  G II         FF  ", "              II G  G II             ", "               HJG  GJH              ", "                 AAAA                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle(" DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", " DD    E  E         E      E  E    DD", " EED                              DEE", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       HHCC I  IKKKKKKI  I CCHH      ", "   FF    BBCB  FFC  CFF  BCBB    FF  ", "  FHHF     BI  FFC  CFF  IB     FHHF ", "  FHHF         II    II         FHHF ", "   FF          II    II          FF  ", "               II    II              ", "                HJJJJH               ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  ED                              DE ", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       EIIEII   IKKKKI   IIEIIE      ", "   FF  IIIIIB   FFCCFF   BIIIII  FF  ", "  FHHF     II   FFCCFF   II     FHHF ", "  FHHF          II  II          FHHF ", "   FF           II  II           FF  ", "                II  II               ", "                 HHHH                ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  ED                              DE ", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       E  E      IIII      E  E      ", "   FF            FFFF            FF  ", "  FHHF           FFFF           FHHF ", "  FHHF           IIII           FHHF ", "   FF            IIII            FF  ", "                 IIII                ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  EDD                            DDE ", "   DDKLDAAAAAAAAAAAAAAAAAAAAAADLKDD  ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  DD   E  E         E      E  E   DD ", "    D                            D   ", "    DKLDAAAAAAAAAAAAAAAAAAAAAADLKD   ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("   DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD  ", "   D   E  E         E      E  E   D  ", "    D                            D   ", "    DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD   ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "      AAAAAA    AAAAAA    AAAAAA     ", "       AAAA      AAAA      AAAA      ")
                    .aisle("   DDDAAAAAADDDDAAAAAADDDDAAAAAADDD  ", "   D  AEAAEA    AEAAEA    AEAAEA  D  ", "    DDAEAAEA    AEAAEA    AEAAEADD   ", "    DDAEAAEADDDDAEAAEADDDDAEAAEADD   ", "      AEAAEA    AEAAEA    AEAAEA     ", "   FFFAAAAAA    AAAAAA    AAAAAAFFF  ", "  FHHFAAAAAAFFFFAAAAAAFFFFAAAAAAFHHF ", "  FHHFAAAAAAFFFFAAAAAAFFFFAAAAAAFHHF ", "   FFFAAAAAA    AAAAAA    AAAAAAFFF  ", "      BBBBBB    BBBBBB    BBBBBB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      BBBBBB    BBBBBB    BBBBBB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAJJAA    AAJJAA    AAJJAA     ", "                                     ")
                    .aisle("   DDDAAAAAADDDDAAAAAADDDDAAAAAADDD  ", "   DD AE  EA    AE  EA    AE  EA DD  ", "    EDAE  EA    AE  EA    AE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "   FFFA    AFFFFA    AFFFFA    AFFF  ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "   FFFAIIIIAFFFFAIIIIAFFFFAIIIIAFFF  ", "      BIIIIB    BIIIIB    BIIIIB     ", "      AIIIIA    AIIIIA    AIIIIA     ", "      AIIIIA    AIIIIA    AIIIIA     ", "      BIIIIB    BIIIIB    BIIIIB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAJJAA    AAJJAA    AAJJAA     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    D AE  EA    AE  EA    AE  EA D   ", "    EDAE  EA    AE  EA    AE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "   FFFA    AFFFFA    AFFFFA    AFFF  ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "   FFFACCCCAFFFFACCCCAFFFFACCCCAFFF  ", "      BCCCCB    BCCCCB    BCCCCB     ", "      ACCCCA    ACCCCA    ACCCCA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "        AA        AA        AA       ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    D AE  EA    AE  EA    AE  EA D   ", "    EDAE  EADDDDAE  EADDDDAE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "     FAACCAA    AACCAA    AACCAAF    ", "   FFFAACCAAFFFFAACCAAFFFFAACCAAFFF  ", "   FFFAACCAAFFFFAACCAAFFFFAACCAAFFF  ", "     FABBBBA    ABBBBA    ABBBBAF    ", "      ABBBBA    ABBBBA    ABBBBA     ", "      ABBBBA    ABBBBA    ABBBBA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    DDAACCAADDDDAACCAADDDDAACCAADD   ", "    EEAACCAAEEEEAACCAAEEEEAACCAAEE   ", "      AACCAA    AACCAA    AACCAA     ", "      AACCAA    AACCAA    AACCAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("      AAAAAA    AAAAAA    AAAAAA     ", "      AACCAA    AACCAA    AACCAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("      AAAAAA    AAAAAA    AAAAAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.SPS_CASING.get()))
                    .where('B', blocks(GTEBlocks.FORCE_FIELD_GLASS.get()))
                    .where('C', blocks(GTEBlocks.QUANTUM_FORCE_TRANSFORMER_COIL.get()))
                    .where('D', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('E', blocks(GTEBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('F', blocks(GTEBlocks.QUANTUM_GLASS.get()))
                    .where('G', blocks(GTEBlocks.HYPER_CORE.get()))
                    .where('H', blocks(GTEBlocks.SPACETIMEBENDINGCORE.get()))
                    .where('I', blocks(GTEBlocks.SPACETIMECONTINUUMRIPPER.get()))
                    .where('J', blocks(GTEBlocks.LAW_FILTER_CASING.get()))
                    .where('K', blocks(GTEBlocks.MANIPULATOR.get()))
                    .where('L', blocks(GTEBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('N', blocks(GTEBlocks.MANIPULATOR.get())
                            .or(GTEPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/manipulator"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition LARGE_CHEMICAL_PLANT = multiblock("large_chemical_plant", "大型化工厂", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .allRotation()
            .recipe(GTERecipeTypes.CHEMICAL)
            .coilParallelTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("aaaaaaaaaaa", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " aaaaaaaaa ", " a       a ", " a       a ", " a       a ", " a       a ", " a       a ", " aaaaaaaaa ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbbbbbb  ", "  bacccab  ", "  bacccab  ", "  bacccab  ", "  bbbbbbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbdddbb  ", "  abdddba  ", "  abdddba  ", "  abdddba  ", "  bbdddbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abb b bba ", "  bd   db  ", "  cd   dc  ", "  cd   dc  ", "  cd   dc  ", "  bd   db  ", " abb b bba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bd b db  ", "  cd b dc  ", "  cd b dc  ", "  cd b dc  ", "  bd b db  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abb b bba ", "  bd   db  ", "  cd   dc  ", "  cd   dc  ", "  cd   dc  ", "  bd   db  ", " abb b bba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbdddbb  ", "  abdddba  ", "  abdddba  ", "  abdddba  ", "  bbdddbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbbbbbb  ", "  bacccab  ", "  bacccab  ", "  bacccab  ", "  bbbbbbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " aaaa~aaaa ", " a       a ", " a       a ", " a       a ", " a       a ", " a       a ", " aaaaaaaaa ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "aaaaaaaaaaa")
                    .where('~', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .setMinGlobalLimited(60)
                            .or(blocks(GTEMachines.CATALYST_HATCH.getBlock()).setMaxGlobalLimited(2))
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('d', heatingCoils())
                    .where('b', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where(' ', any())
                    .build())
            .additionalDisplay(CHEMICAL_PLANT_DISPLAY)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/machines/chemical_reactor"))
            .register();

    MultiblockMachineDefinition INTEGRATED_ORE_PROCESSOR = multiblock("integrated_ore_processor", "集成矿石处理厂", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.INTEGRATED_ORE_PROCESSOR)
            .tooltipsText("Completes ore processing in one step", "一步完成矿石处理")
            .tooltipsText("Circuit 1 is crusher-macerator-centrifuging", "1号电路为破碎-研磨-离心")
            .tooltipsText("Circuit 2 is crusher-ore washer-thermal separation-macerator", "2号电路为破碎-洗矿-热离-研磨")
            .tooltipsText("Circuit 3 is crusher-ore washer-macerator-centrifuging", "3号电路为破碎-洗矿-研磨-离心")
            .tooltipsText("Circuit 4 is crusher-ore washer-sifter-centrifuging", "4号电路为破碎-洗矿-筛选-离心")
            .tooltipsText("Circuit 5 is crusher-chemical bath-thermal centrifuging-macerator", "5号电路为破碎-浸洗-热离-研磨")
            .tooltipsText("Circuit 6 is crusher-chemical bath-macerator-centrifuging", "6号电路为破碎-浸洗-研磨-离心")
            .tooltipsText("Circuit 7 is crusher-chemical bath-sifter-centrifuging", "7号电路为破碎-浸洗-筛选-离心")
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("aaaaaa     ", "abbbba     ", "abbbba     ", "abbbba     ", "abbbba     ", "aaaaaa     ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .aisle("aaaaaaaaaaa", "bd  d accca", "bd  d accca", "bd  d accca", "bd  d accca", "aaaaaaaccca", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "           ")
                    .aisle("aaaaaaaaaaa", "b ee  c   c", "b ee  ffffc", "b ee  c   c", "b ee  ffffc", "aaaaaac   c", "      cfffc", "      c   c", "      cfffc", "      c   c", "      cfffc", "       gcc ")
                    .aisle("aaaaaaaaaaa", "b ee  c   c", "b ee  ffffc", "b ee  c   c", "b ee  ffffc", "aaaaaac   c", "      cfffc", "      c   c", "      cfffc", "      c   c", "      cfffc", "       ccc ")
                    .aisle("aaaaaaaaaaa", "bd  d accca", "bd  d ac~ca", "bd  d accca", "bd  d accca", "aaaaaaaccca", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "           ")
                    .aisle("aaaaaa     ", "abbbba     ", "abbbba     ", "abbbba     ", "abbbba     ", "aaaaaa     ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .where('~', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('c', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(60)
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('b', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('d', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlueSteel)))
                    .where('e', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('f', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('g', blocks(GTMachines.MUFFLER_HATCH[GTValues.ZPM].get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    MultiblockMachineDefinition DRAGON_EGG_COPIER = multiblock("dragon_egg_copier", "龙蛋复制机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.DRAGON_EGG_COPIER_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, false, false)
            .parallelizablePerfectOverclock()
            .block(GTEBlocks.DRAGON_STRENGTH_TRITANIUM_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbb", "bbb", "bbb")
                    .aisle("bbb", "bcb", "bdb")
                    .aisle("bbb", "bab", "bbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTEBlocks.DRAGON_STRENGTH_TRITANIUM_CASING.get())
                            .setMinGlobalLimited(10)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTEBlocks.MAGIC_CORE.get()))
                    .where('d', blocks(GTMachines.MUFFLER_HATCH[GTValues.UEV].get()))
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/extreme_strength_tritanium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition LARGE_CRACKER = multiblock("large_cracker", "大型裂化机", CoilMultiblockMachine.createCoilMachine(false, false))
            .allRotation()
            .recipe(GTRecipeTypes.CRACKING_RECIPES)
            .parallelizableTooltips()
            .recipeModifiers(GTERecipeModifiers.HATCH_PARALLEL, GTERecipeModifiers::crackerOverclock)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("aaaaaaaaa", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ")
                    .aisle("aaaaaaaaa", "aabbbbbaa", "aabaaabaa", "aabaaabaa", "aabaaabaa", "aabbbbbaa", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", "aabbbbbaa", "aabaaabaa", "aabaaabaa", "aabaaabaa", "aabbbbbaa", "aaaaaaaaa")
                    .aisle("aaaa~aaaa", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ")
                    .where('~', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(200)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('b', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('c', heatingCoils())
                    .build())
            .additionalDisplay((controller, components) -> components.add(Component.translatable("gtceu.multiblock.cracking_unit.energy", 100 - 10 * ((ICoilMachine) controller).getCoilTier())))
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/cracking_unit"))
            .register();

    MultiblockMachineDefinition STEAM_PISTON_HAMMER = multiblock("steam_piston_hammer", "蒸汽活塞锤", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .allRotation()
            .recipe(GTRecipeTypes.FORGE_HAMMER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAA", " E ", "   ", "   ", "   ")
                    .aisle("ABA", "E#E", "EBE", "ECE", "EDE")
                    .aisle("AAA", " S ", "   ", "   ", "   ")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.WroughtIron)))
                    .where('C', blocks(Blocks.STICKY_PISTON))
                    .where('D', abilities(STEAM))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .shapeInfo(definition -> MultiblockShapeInfo.builder()
                    .aisle("IAO", " S ", "   ", "   ", "   ")
                    .aisle("ABA", "E E", "EBE", "ECE", "EDE")
                    .aisle("AAA", " E ", "   ", "   ", "   ")
                    .where('S', definition, Direction.NORTH)
                    .where('A', GTBlocks.CASING_BRONZE_BRICKS.get())
                    .where('E', GTBlocks.CASING_BRONZE_BRICKS.get())
                    .where('I', GTMachines.STEAM_IMPORT_BUS, Direction.NORTH)
                    .where('O', GTMachines.STEAM_EXPORT_BUS, Direction.NORTH)
                    .where('D', GTMachines.STEAM_HATCH, Direction.NORTH)
                    .where('B', ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.WroughtIron))
                    .where('C', Blocks.STICKY_PISTON.defaultBlockState().setValue(DirectionalBlock.FACING, Direction.DOWN))
                    .where(' ', Blocks.AIR)
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/forge_hammer"))
            .register();

    MultiblockMachineDefinition STEAM_PRESSOR = multiblock("steam_pressor", "蒸汽挤压机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .allRotation()
            .recipe(GTRecipeTypes.COMPRESSOR_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXX", "XXX", "XXX")
                    .aisle("XXX", "X#X", "XXX")
                    .aisle("XXX", "X#X", "XXX")
                    .aisle("XXX", "XSX", "XXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM).setExactLimit(1)))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTECore.id("block/multiblock/steam_pressor"))
            .register();

    MultiblockMachineDefinition STEAM_FOUNDRY = multiblock("steam_foundry", "蒸汽铸造炉", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .allRotation()
            .recipe(GTRecipeTypes.ALLOY_SMELTER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("FFF", "XXX", "XXX")
                    .aisle("FFF", "X#X", "XXX")
                    .aisle("FFF", "XSX", "XXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('F', blocks(GTBlocks.FIREBOX_BRONZE.get())
                            .or(abilities(STEAM).setExactLimit(1)))
                    .where('X', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/alloy_smelter"))
            .register();

    MultiblockMachineDefinition LARGE_STEAM_MACERATOR = multiblock("large_steam_macerator", "大型蒸汽研磨机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 32))
            .allRotation()
            .recipe(GTRecipeTypes.MACERATOR_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A       A", "A BBBBB A", "A       A", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A   C   A", "A B C B A", "A   C   A", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A D C D A", "ADDD DDDA", "A D C D A", "AAAAEAAAA")
                    .aisle("AAAAAAAAA", "A   C   A", "A B C B A", "A   C   A", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A       A", "A BBBBB A", "A       A", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(ModBlocks.STEEL_BLOCK.get()))
                    .where('E', abilities(MUFFLER))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_grinder"))
            .register();

    MultiblockMachineDefinition LARGE_STEAM_CIRCUIT_ASSEMBLER = multiblock("large_steam_circuit_assembler", "大型蒸汽电路组装机", largeSteamCircuitAssemblerMachine::new)
            .allRotation()
            .tooltipsText("Can only operate recipes corresponding to the engraved circuits", "仅能运行对应铭刻电路的配方")
            .tooltipsText("Produces x4 output of the recipe before running", "运行前会将配方产出x4")
            .tooltipsText("Can operate MV-Tier recipes and below", "可运行MV等级及以下配方")
            .tooltipsText("Can install and use large steam input to upgrade to HV-Tier, unlocking overclocking function", "可安装大型蒸汽输入仓提升到HV等级，并解锁超频功能")
            .recipe(GTRecipeTypes.CIRCUIT_ASSEMBLER_RECIPES)
            .alwaysTryModifyRecipe(true)
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAA", "AAA", "DDD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ASA", "DDD", " D ")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('C', blocks(GTEBlocks.STEAM_ASSEMBLY_BLOCK.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTECore.id("block/multiblock/steam_circuit_assembler"))
            .register();

    MultiblockMachineDefinition LARGE_STEAM_MIXER = multiblock("large_steam_mixer", "大型蒸汽搅拌机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 32))
            .allRotation()
            .existingTooltips("steam_mixer", 0)
            .recipe(GTRecipeTypes.MIXER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ")
                    .aisle("AAAAAAAAA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA  B  AA")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A   D   A", "A CCCCC A", "A   D   A", "A CCCCC A", "A   D   A", "ABBBBBBBA")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA  B  AA")
                    .aisle(" AAAAAAA ", " AAASAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTECore.id("block/multiblock/steam_mixer"))
            .register();

    MultiblockMachineDefinition STEAM_MIXER = multiblock("steam_mixer", "蒸汽搅拌机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .allRotation()
            .recipe(GTRecipeTypes.MIXER_RECIPES)
            .tooltipsText("Cannot process fluids", "无法处理流体")
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAA ", " AAA ", " AAA ")
                    .aisle("AAAAA", "ABCBA", "AEEEA")
                    .aisle("AAAAA", "ACDCA", "AEEEA")
                    .aisle("AAAAA", "ABCBA", "AEEEA")
                    .aisle(" AAA ", " ASA ", " AAA ")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', air())
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(blocks(Blocks.GLASS))
                            .or(air()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTECore.id("block/multiblock/steam_mixer"))
            .register();

    MultiblockMachineDefinition STEAM_SEPARATOR = multiblock("steam_separator", "蒸汽分离机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8, 8))
            .allRotation()
            .recipe(GTRecipeTypes.CENTRIFUGE_RECIPES)
            .steamOverclock("ULV")
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("AAAAA", " B~B ", " BBB ", " BBB ", "  B  ")
                    .aisle("AAAAA", "BC CB", "B   B", "BC CB", " BBB ")
                    .aisle("AAAAA", "B D B", "B D B", "B D B", "BBBBB")
                    .aisle("AAAAA", "BC CB", "B   B", "BC CB", " BBB ")
                    .aisle("AAAAA", " BBB ", " BBB ", " BBB ", "  B  ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.BRONZE_BRICKS_HULL.get()))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(4)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTECore.id("block/multiblock/steam_centrifuge"))
            .register();

    MultiblockMachineDefinition LARGE_STEAM_CENTRIFUGE = multiblock("large_steam_centrifuge", "大型蒸汽离心机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 32, 8))
            .allRotation()
            .recipe(GTRecipeTypes.CENTRIFUGE_RECIPES)
            .steamOverclock("ULV")
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("           ", "   AAAAA   ", "  AAAAAAA  ", "   AAAAA   ", "           ")
                    .aisle("  AAAAAAA  ", "  A     A  ", " AB     BA ", "  A     A  ", "  AAAAAAA  ")
                    .aisle(" AAAAAAAAA ", " A       A ", "AB   C   BA", " A       A ", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A         A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A    E    A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A   ECE   A", "A CCCCCCC A", "A    C    A", " AAAAFAAAA ")
                    .aisle(" AAAAAAAAA ", "A    E    A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A         A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", " A       A ", "AB   C   BA", " A       A ", " AAAAAAAAA ")
                    .aisle("  AAAAAAA  ", "  A     A  ", " AB     BA ", "  A     A  ", "  AAAAAAA  ")
                    .aisle("           ", "   AAAAA   ", "  AAASAAA  ", "   AAAAA   ", "           ")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('F', abilities(MUFFLER))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(4)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTECore.id("block/multiblock/steam_centrifuge"))
            .register();

    MultiblockMachineDefinition LARGE_STEAM_THERMAL_CENTRIFUGE = multiblock("large_steam_thermal_centrifuge", "大型蒸汽热力离心机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 32))
            .allRotation()
            .recipe(GTRecipeTypes.THERMAL_CENTRIFUGE_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAAAA ", " BBBBB ", " BBBBB ", " BBBBB ", "       ")
                    .aisle("ABBABBA", "BC   CB", "BC   CB", "BC   CB", " BBBBB ")
                    .aisle("ABAAABA", "B     B", "B     B", "B     B", " BBBBB ")
                    .aisle("AAAAAAA", "B  D  B", "B  D  B", "B  D  B", " BBEBB ")
                    .aisle("ABAAABA", "B     B", "B     B", "B     B", " BBBBB ")
                    .aisle("ABBABBA", "BC   CB", "BC   CB", "BC   CB", " BBBBB ")
                    .aisle(" AAAAA ", " BBBBB ", " BBSBB ", " BBBBB ", "       ")
                    .where('S', controller(blocks(definition.get())))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('A', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where('E', abilities(MUFFLER))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTECore.id("block/multiblock/steam_thermal_centrifuge"))
            .register();

    MultiblockMachineDefinition LARGE_STEAM_BATH = multiblock("large_steam_bath", "大型蒸汽浸洗机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 32))
            .allRotation()
            .recipe(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "ABBBBBBBA", "ABBBDBBBA", "ABBBBBBBA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AB     BA", "AB  D  BA", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "AB  D  BA", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "ABBBBBBBA", "ABBBDBBBA", "ABBBBBBBA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('C', blocks(Blocks.GLASS))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Potin)))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/chemical_bath"))
            .register();

    MultiblockMachineDefinition STEAM_BATH = multiblock("steam_bath", "蒸汽浸洗机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .allRotation()
            .recipe(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "ABCBA", "ADDDA")
                    .aisle("AAAAA", "ABCBA", "ADDDA")
                    .aisle("AAAAA", "AASAA", "AAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('B', air())
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Potin)))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(blocks(Blocks.GLASS))
                            .or(air()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/chemical_bath"))
            .register();

    MultiblockMachineDefinition LARGE_STEAM_ORE_WASHER = multiblock("large_steam_ore_washer", "大型蒸汽洗矿机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 32))
            .allRotation()
            .recipe(GTRecipeTypes.ORE_WASHER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A   B   A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "ABBBDBBBA", "A  BBB  A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A   B   A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('C', blocks(Blocks.GLASS))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTECore.id("block/multiblock/steam_ore_washer"))
            .register();

    MultiblockMachineDefinition STEAM_ORE_WASHER = multiblock("steam_ore_washer", "蒸汽洗矿机", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .allRotation()
            .recipe(GTRecipeTypes.ORE_WASHER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "A C A", "A E A")
                    .aisle("AAAAA", "ACDCA", "AEDEA")
                    .aisle("AAAAA", "A C A", "A E A")
                    .aisle("AAAAA", "AASAA", "AAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTECore.id("block/multiblock/steam_ore_washer"))
            .register();

    MultiblockMachineDefinition LARGE_STEAM_FURNACE = multiblock("large_steam_furnace", "大型蒸汽熔炉", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 32))
            .allRotation()
            .recipe(GTRecipeTypes.FURNACE_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("   A    A", "   A    A", "   A    A", "   A    A", "   A    A", "    AAAA ", "         ", "         ")
                    .aisle("BBBCCCCCC", "BKBDEEEED", "BBBDDDDDD", "DDDDDDDDD", "   DDDDDD", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("GGGCHHHHC", "GAGD    D", "GIGD II D", "GGGD JJ D", "GGGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("GGGCHHHHC", "GAGD    D", "GIGD II D", "GGGD JJ D", "GGGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("BBBCCCCCC", "BBBDDDDDD", "BBBDEEEED", "DDDDDDDDD", "   DDDDDD", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("   A    A", "   A    A", "   A    A", "   A    A", "   A    A", "    AAAA ", "         ", "         ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setPreviewCount(1)))
                    .where('C', blocks(GTBlocks.BRONZE_BRICKS_HULL.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('E', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where('F', blocks(GTBlocks.BRONZE_HULL.get()))
                    .where('G', blocks(GCYMBlocks.CASING_INDUSTRIAL_STEAM.get()))
                    .where('H', blocks(Blocks.STONE_BRICKS))
                    .where('I', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_oven"))
            .register();

    MultiblockMachineDefinition LEAP_FORWARD_ONE_BLAST_FURNACE = multiblock("leap_forward_one_blast_furnace", "跃进一号高炉", AdvancedPrimitiveBlastFurnaceMachine::new)
            .nonYAxisRotation()
            .tooltipsText("We're on the road!", "我们走在大路上！")
            .tooltipsText("According to the temperature, the next recipe obtains a duration reduction of 400 / temperature.", "按温度，下次配方获得400/温度的时间减免")
            .tooltipsText("Based on the construction height, the parallelism is obtained, with a maximum parallelism of: 1 + height * 2 * temperature / 500", "根据搭建高度获得并行，最大并行数：高度x2x温度/500")
            .recipe(GTRecipeTypes.PRIMITIVE_BLAST_FURNACE_RECIPES)
            .alwaysTryModifyRecipe(true)
            .block(GTBlocks.CASING_PRIMITIVE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.RIGHT, RelativeDirection.UP)
                    .aisle("     AAAAA     ", "  DDDDDDDDDDD  ", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", "  DDDDDDDDDDD  ", "     AAAAA     ")
                    .aisle("     AAAAA     ", "    DEEEEED    ", "   DE     ED   ", "  DE       ED  ", " DE         ED ", "AE           EA", "AE           EA", "GE           EA", "AE           EA", "AE           EA", " DE         ED ", "  DE       ED  ", "   DE     ED   ", "    DEEEEED    ", "     AAAAA     ")
                    .aisle("     BCCCB     ", "    D     D    ", "   D       D   ", "  D         D  ", " D           D ", "B             B", "C             C", "C             C", "C             C", "B             B", " D           D ", "  D         D  ", "   D       D   ", "    D     D    ", "     BCCCB     ")
                    .aisle("     BCCCB     ", "    D     D    ", "   D       D   ", "  D         D  ", " D           D ", "B             B", "C             C", "C             C", "C             C", "B             B", " D           D ", "  D         D  ", "   D       D   ", "    D     D    ", "     BCCCB     ")
                    .aisle("     DDDDD     ", "    DEEEEED    ", "   DE     ED   ", "  DE       ED  ", " DE         ED ", "DE           ED", "DE           ED", "DE           ED", "DE           ED", "DE           ED", " DE         ED ", "  DE       ED  ", "   DE     ED   ", "    DEEEEED    ", "     DDDDD     ")
                    .aisle("               ", "     DDDDD     ", "    DDEEEDD    ", "   DEDFFFDED   ", "  DEEDFFFDEED  ", " DDDDDDDDDDDDDD", " DEFFDE EDFFEDF", " DEFFD   DFFEDF", " DEFFDE EDFFEDF", " DDDDDDDDDDDDDD", "  DEEDFFFDEED  ", "   DEDFFFDED   ", "    DDEEEDD    ", "     DDDDD     ", "               ")
                    .aisle("               ", "       D       ", "      EDE      ", "    EE   EE    ", "   EE     EE   ", "   E       E   ", "  E    E    E F", " DD   E E   DD ", "  E    E    E F", "   E       E   ", "   EE     EE   ", "    EE   EE    ", "      EDE      ", "       D       ", "               ")
                    .aisle("               ", "               ", "      EDE      ", "     E   E     ", "    E     E    ", "   E       E   ", "  E    E    E F", "  D   E E   D  ", "  E    E    E H", "   E       E   ", "    E     E    ", "     E   E     ", "      EDE      ", "               ", "               ").setRepeatable(2, 32)
                    .aisle("               ", "               ", "      DDD      ", "     DEEED     ", "    D     D    ", "   D       D   ", "  DE   E   ED F", "  DE  E E  ED  ", "  DE   E   ED F", "   D       D   ", "    D     D    ", "     DEEED     ", "      DDD      ", "               ", "               ")
                    .aisle("               ", "               ", "     FFFFF     ", "    FDEDEDF    ", "   FDEE EEDF   ", "  FDEE   EEDF  ", "  FEE  E  EEFFF", "  FD  E E  DF F", "  FEE  E  EEFFF", "  FDEE   EEDF  ", "   FDEE EEDF   ", "    FDEDEDF    ", "     FFFFF     ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "      EDE      ", "     EEEEE     ", "    EEEEEEE    ", "   EEEEEEEEE   ", "   DEEE EEED   ", "   EEEEEEEEE   ", "    EEEEEEE    ", "     EEEEE     ", "      EDE      ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "      EEE      ", "     E   E     ", "    E     E    ", "   E       E   ", "   E       E   ", "   E       E   ", "    E     E    ", "     E   E     ", "      EEE      ", "               ", "               ", "               ")
                    .where('A', blocks(GTBlocks.CASING_PRIMITIVE_BRICKS.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4, 1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(2, 1)))
                    .where('B', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('C', blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where('D', blocks(Blocks.STONE_BRICKS))
                    .where('E', blocks(GTBlocks.CASING_PRIMITIVE_BRICKS.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('G', controller(blocks(definition.get())))
                    .where('H', GTEPredicates.countBlock("SteelFrame", ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_primitive_bricks"), GTCEu.id("block/multiblock/primitive_blast_furnace"))
            .register();

    MultiblockMachineDefinition PETROCHEMICAL_PLANT = multiblock("petrochemical_plant", "石化工厂", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.PETROCHEMICAL_PLANT_RECIPES)
            .coilParallelTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle(" AAAAAAAAA        AAAAA     ", "  [=====[          AAA      ", "  [=^^^=[                   ", "  [=^~^=[                   ", "  [=^^^=[                   ", "  [=====[                   ", "  [[[[[[[                   ", "                            ", "                    T       ", "                   TTT      ", "                  TTTTT     ", "                   TTT      ", "                    T       ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA       AAAAAAA    ", "  ^=====^          AAA      ", "   =^^^=                    ", "   =^ ^=                    ", "   ]^^^]                    ", "   =====                    ", "  [     [           T       ", "                  TTTTT     ", "                 TTT TTT    ", "                 TT   TT    ", "                TT     TT   ", "                 TT   TT    ", "                 TTT TTT    ", "                  TTTTT     ", "                    T       ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA     AAAAAAAAAAA  ", "  ^=====^        AAAAAAA    ", "   =^^^=                    ", "   =^ ^=                    ", "   ]^^^]                    ", "   =====           TTT      ", "  [     [        TTT TTT    ", "                TT     TT   ", "                T       T   ", "               TT       TT  ", "               T         T  ", "               TT       TT  ", "                T       T   ", "                TT     TT   ", "                 TTT TTT    ", "                   TTT      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA     AAAAAAAAAAA  ", "  ^=====^      AAAAAAAAAAA  ", "   =^^^=                    ", "   =^ ^=                    ", "   ]^^^]                    ", "   =====           TTT      ", "  [     [        TT   TT    ", "                T       T   ", "                T       T   ", "               T         T  ", "               T         T  ", "               T         T  ", "                T       T   ", "                T       T   ", "                 TT   TT    ", "                   TTT      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA  AAAAAAAAAAAAAA  ", "  [=====[   AAAAAAAAAAAAAA  ", "  [=]]]=[      BBBB   BBBB  ", "  [=]]]=[      BBBB   BBBB  ", "  [=]]]=[      BBBB   BBBB  ", "  [=====[      BBBBTTTBBBB  ", "  [[[[[[[      BBTT   TTBB  ", "               BT       TB  ", "                T  U U  T   ", "               T         T  ", "               T         T  ", "               T         T  ", "                T       T   ", "                T       T   ", "                 TT M TT    ", "                   TTT      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("    AAA     AYAAAAAAAAAAAA  ", "            AYAAAAAAAAAAAA  ", "             Y              ", "             Y              ", "             Y              ", "             Y     TTT      ", "             Y   TT   TT    ", "             Y  T  U U  T   ", "             Y  T   U   T   ", "             Y T         T  ", "             Y T         T  ", "             Y T   X     T  ", "             Y  T  X    T   ", "             Y  T  M    T   ", "             YY  TT M TT    ", "              YY   TYT      ", "               YY   Y       ", "                YYYYY       ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA  AAAAAAAAAAAAAA  ", " AAAAAAAAA  AAAAAAAAAAAAAA  ", " AAAAAAAAA                  ", "                            ", "                            ", "                   TTT      ", "                 TT   TT    ", "   CDDDC        T       T   ", "                T  U U  T   ", "               T         T  ", "               T         T  ", "               T         T  ", "   CDDDC        T       T   ", "                T       T   ", "                 TT M TT    ", "                   TTT      ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA     AAAAAAAAAAA  ", " AAAEEEAAA     AAAAAAAAAAA  ", " AAAEEEAAA                  ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J          TTT      ", "  J EEE J        TT   TT    ", "  JDEEEDJ       T       T   ", "  J EEE J       T  U U  T   ", "  J EEE J      T         T  ", "  J EEE J      T     X   T  ", "  J EEE J      T     X   T  ", "  JDEEEDJ       T    X  T   ", "  J EEE J       T    M  T   ", "  J EEE J        TT M TT    ", "  J EEE J          TTT      ", "  J EEE J                   ", "  JDEEEDJ                   ", "  R EEE R                   ", "  R EEE R                   ", "  R EEE R                   ", "  R EEE R                   ", "  RDEEEDR                   ", "  R EEE R                   ", "  R EEE R                   ", "    EEE                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAA  ", " AAEAAAEAA     AAAAAZAAAAA  ", " AAEKKKEAA          Z       ", "   E   E            Z       ", "   E   E            Z       ", "   E   E           TZT      ", "   E   E         TT Z TT    ", " CDEEEEEDC      T       T   ", "   E   E        T  U U  T   ", "   E   E       T         T  ", "   E   E       T         T  ", "   EKKKE       T         T  ", " CDEEEEEDC      T       T   ", "   E   E        T       T   ", "   E   E         TT M TT    ", "   E   E           TTT      ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "    EEE                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAA  ", " AEAKLKAEAAAAAAAAAAAAAAAAA  ", " AEK   KEA                  ", "  E     E                   ", "  E     E                   ", "  E     E          TTT      ", "  E     E        TT   TT    ", " DEELLLEED      T       T   ", "  E     E       T  U U  T   ", "  E     E      T         T  ", "  E     E      T         T  ", "  EK   KE      T   X     T  ", " DEELLLEED      T  X    T   ", "  E     E       T  M    T   ", "  E     E        TT M TT    ", "  E     E          TTT      ", "  E     E                   ", " DEELLLEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", " DEELLLEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "   E   E                    ", "    EEE                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAA  ", " AEALLLAEAAAAAAAAAAAAAAAAA  ", " AEK L KEA     BBBB   BBBB  ", "  E  L  E      BBBB   BBBB  ", "  E  L  E      BBBB   BBBB  ", "  E  L  E      BBBBTTTBBBB  ", "  E  L  E      BBTT   TTBB  ", " DEELLLEED     BT       TB  ", "  E  L  E       T  U U  T   ", "  E  L  E      T         T  ", "  E  L  E      T         T  ", "  EK L KE      T         T  ", " DEELLLEEDDDD   T       T   ", "  E  L  E       T       T   ", "  E  L  E        TT M TT    ", "  E  L  E          TTT      ", "  E  L  E                   ", " DEELLLEED                  ", "  E  L  E                   ", "  E  L  E                   ", "  E  L  E                   ", "  E  L  E                   ", " DEELLLEEDDDD               ", "  E  L  E                   ", "  E  L  E                   ", "  E  L  E                   ", "   E   E                    ", "    EOE                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAA  ", " AEAKLKAEAAAAAAAAAAAAAAAAA  ", " AEK   KEA                  ", "  E     E                   ", "  E     E                   ", "  E     E          TTT      ", "  E     E        TT   TT    ", " DEELLLEED      T       T   ", "  E     E       T  U U  T   ", "  E     E      T         T  ", "  E     E      T     X   T  ", "  EK   KE      T     X   T  ", " DEELLLEED  D   T    X  T   ", "  E     E       T    M  T   ", "  E     E        TT M TT    ", "  E     E          TTT      ", "  E     E                   ", " DEELLLEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", " DEELLLEED  D               ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "   E   E                    ", "    EEE                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAA  ", " AAEAAAEAA     AAAAAAAAAAA  ", " AAEKKKEAA                  ", "   E   E                    ", "   E   E                    ", "   E   E           TTT      ", "   E   E         TT   TT    ", " CDEEEEEDC      T       T   ", "   E   E        T  U U  T   ", "   E   E       T         T  ", "   E   E       T         T  ", "   EKKKE       T         T  ", " CDEEEEEDC  D   T       T   ", "   E   E        T       T   ", "   E   E         TT M TT    ", "   E   E           TTT      ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC  D               ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "    EEE                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA     AAAAAAAAAAA  ", " AAAEEEAAA     AAAAAAAAAAA  ", " AAAEEEAAA                  ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J          TTT      ", "  J EEE J        TT   TT    ", "  JDEEEDJ       T       T   ", "  J EEE J       T  U U  T   ", "  J EEE J      T         T  ", "  J EEE J      T         T  ", "  J EEE J      T   X     T  ", "  JDEEEDJ   D   T  X    T   ", "  J EEE J       T  M    T   ", "  J EEE J        TT M TT    ", "  J EEE J          TTT      ", "  J EEE J                   ", "  JDEEEDJ                   ", "  R EEE R                   ", "  R EEE R                   ", "  R EEE R                   ", "  R EEE R                   ", "  RDEEEDR   D               ", "  R EEE R                   ", "  R EEE R                   ", "    EEE                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA     AAAAAAAAAAA  ", " AAAAAAAAA     AAAAAUAAAAA  ", " AAAAAAAAA          U       ", "                    U       ", "                    U       ", "                   TUT      ", "                 TT U TT    ", "   CDDDC        T   U   T   ", "                T  U U  T   ", "               T         T  ", "               T         T  ", "               T         T  ", "   CDDDC    D   T       T   ", "                T       T   ", "                 TT M TT    ", "                   TTT      ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC    D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("   AAAAA       AAAAAAAAAAA  ", "    AAA        AAAAAAAAAAA  ", "                            ", "                            ", "                            ", "                   TTT      ", "                 TT   TT    ", "                T       T   ", "                T  U U  T   ", "               T         T  ", "               T     X   T  ", "               T     X   T  ", "            D   T    X  T   ", "                T    M  T   ", "                 TT M TT    ", "                   TTT      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("   AAAAA   C C AAAAAAAAAAA  ", "    AAA    C C AAAAAAAAAAA  ", "           C C              ", "           C C              ", "           C C              ", "           C C     TTT      ", "           C C   TT   TT    ", "           C C  T       T   ", "           C C  T  U U  T   ", "           C C T         T  ", "           C C T         T  ", "           CCC T         T  ", "           CDC  T       T   ", "           CCC  T       T   ", "           C C   TT M TT    ", "           C C     TTT      ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           CCC              ", "           CDC              ", "           CCC              ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("   AAAAA       AAAAAAAAAAA  ", "    AAA        AAAAAAAAAAA  ", "                            ", "                            ", "                            ", "                   TTT      ", "                 TT   TT    ", "                T       T   ", "                T  U U  T   ", "               T         T  ", "               T         T  ", "               T   X     T  ", "            D   T  X    T   ", "                T  M    T   ", "                 TT M TT    ", "                   TTT      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA     AAAAAAAAAAA  ", "  AAAAAAA      AAAAAAAAAAA  ", "               BBBB   BBBB  ", "               BBBB   BBBB  ", "               BBBB   BBBB  ", "               BBBBTTTBBBB  ", "               BBTT   TTBB  ", "               BT       TB  ", "                T  U U  T   ", "    VVV        T         T  ", "   VIIIV       T         T  ", "   VIIIV       T         T  ", "   VIIIV    D   T       T   ", "    VVV         T       T   ", "                 TT M TT    ", "                   TTT      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAAA    AAAAAAAAAAA  ", " AAAAAAAAA     AAAAAAAAAAA  ", "                            ", "                            ", "                            ", "                   TTT      ", "                 TT   TT    ", "                T       T   ", "   VVVVV        T  U U  T   ", "  VVWWWVV      T         T  ", "  VWWWWWV      T     X   T  ", "  V     V      T     X   T  ", "  V  M  V   D   T    X  T   ", "  VV M VV       T    M  T   ", "   VVVVV         TT M TT    ", "                   TTT      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAAA AAAAAAAAAAAAAA  ", "AAAAAAAAAAA AAAAAAAAAAAAAA  ", "  H     H                   ", "  H     H                   ", "  H     H                   ", "  H     H          TTT      ", "  H     H        TT   TT    ", "  HVVVVVH       T       T   ", "  VWWWWWV       T  U U  T   ", " VWWKKKWWV     T         T  ", " VWWWWWWWV     T         T  ", " V   M   V     T         T  ", " V       V  D   T       T   ", " V       V      T       T   ", "  V  M  V        TT M TT    ", "   VVVVV           TTT      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAAA AYAAAAAAAAAAAA  ", "AAAAAAAAAAA AYAAAAAAAAAAAA  ", "   H   H     Y              ", "   H   H     Y              ", "   H   H     Y              ", "   H   H     Y     TTT      ", "   HVVVH     Y   TT   TT    ", "  VVWWWVV    Y  T       T   ", " VWWWWWWWV   Y  T  U U  T   ", " VWWKWKWWV   Y T         T  ", "VWWWWWWWWWV  Y T         T  ", "V    M    V  Y T   X     T  ", "V         V DY  T  X    T   ", " V       V   Y  T  M    T   ", " V       V   YY  TT M TT    ", "  VV M VV     YY   TYT      ", "    VVV        YY   Y       ", "                YYYYY       ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAAA AAAAAAAAAAAAAA  ", "AAAAAAAAAAA AAAAAAAAAAAAAA  ", "     I                      ", "     I                      ", "     I                      ", "     I             TTT      ", "   VVVVV         TT   TT    ", "  VWKKKWV       T       T   ", " VWWWWWWWV      T  U U  T   ", "VVKKKKKKKVV    T         T  ", "VWWWWWWWWWV    T         T  ", "V    M    V    T         T  ", "V         V D   T       T   ", "V         V     T       T   ", " V       V       TT M TT    ", "  V  M  V          TTT      ", "   VVVVV                    ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAAA    AAAAAAAAAAA  ", "AAAAAUAAAAA    AAAAAAAAAAA  ", "    IUI                     ", "    IUI                     ", "    IUI                     ", "    IUI            TTT      ", "   VVUVV         TT   TT    ", "  VWKUKWV       T  U U  T   ", " VWWWUWWWV      T  UU   T   ", "VVKWKWKWKVV    T         T  ", "VWWWWWWWWWV    T     X   T  ", "V MMMMMMM V    T     X   T  ", "VM   M   MV D   T    X  T   ", "VM   M   MV     T    M  T   ", " VM  M  MV       TT M TT    ", "  VMMMMMV          TTT      ", "   VVOVV                    ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAAA    AAAAAAAAAAA  ", "AAAAAAAAAAA    AAAAAAAAAAA  ", "     I         BBBB   BBBB  ", "     I         BBBB   BBBB  ", "     I         BBBB   BBBB  ", "     I         BBBBTTTBBBB  ", "   VVVVV       BBTT   TTBB  ", "  VWKKKWV      BT       TB  ", " VWWWWWWWV      T  U U  T   ", "VVKKKKKKKVV    T         T  ", "VWWWWWWWWWV    T         T  ", "V    M    V    T         T  ", "V         V D   T       T   ", "VV       VV     T       T   ", " V       V       TT M TT    ", "  V  M  V          TTT      ", "   VVVVV                    ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAAA    AAAAAAAAAAA  ", "AAAAAAAAAAA    AAAAAAAAAAA  ", "   H   H                    ", "   H   H                    ", "   H   H                    ", "   H   H           TTT      ", "   HVVVH         TT   TT    ", "  VVWWWVV       T       T   ", " VWWWWWWWV      T       T   ", " VWWKWKWWV     T         T  ", "VWWWWWWWWWV    T         T  ", "V    M    V    T         T  ", "V         V D   T       T   ", " V       V      T       T   ", " V       V       TT   TT    ", "  VV M VV          TTT      ", "    VVV                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAAA    AAAAAAAAAAA  ", "AAAAAAAAAAA      AAAAAAA    ", "  H     H                   ", "  H     H                   ", "  H     H                   ", "  H     H          TTT      ", "  H     H        TTTTTTT    ", "  HVVVVVH       TT     TT   ", "  VWWWWWV       T       T   ", " VWWKKKWWV     TT       TT  ", " VWWWWWWWV     T         T  ", " V   M   V     TT       TT  ", " V       V  D   T       T   ", " V       V      TT     TT   ", "  V  M  V        TTTTTTT    ", "   VVVVV           TTT      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAAA      AAAAAAA    ", " AAAAAAAAA         AAA      ", "                            ", "                            ", "                            ", "                            ", "                    T       ", "                  TTTTT     ", "   VVVVV         TTT TTT    ", "  VVWWWVV        TT   TT    ", "  VWWWWWV       TT     TT   ", "  V  M  V        TT   TT    ", "  V  M  V   D    TTT TTT    ", "  VV M VV         TTTTT     ", "   VVVVV            T       ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA        AAAAA     ", "  AAAAAAA          AAA      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                    T       ", "    VVV            TTT      ", "   VVVVV          TTTTT     ", "   VVMVV           TTT      ", "   VVVVV    D       T       ", "    VVV                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("   AAAAA          AAAAA     ", "    AAA            AAA      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "     I                      ", "    IMI                     ", "     I      D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("   AAAAA   C C    AAAAA     ", "    AAA    C C     AAA      ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "     I     C C              ", "    IMI    CCC              ", "     I     CDC              ", "           CCC              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           CCC              ", "           CDC              ", "           CCC              ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("   AAAAA          AAAAA     ", "    AAA            AAA      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "     I                      ", "    IMI                     ", "     I      D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAA       AAAAAAA    ", "    AAA            AAA      ", "                    B       ", "                    B       ", "  T     T           B       ", "                    B       ", "                    B       ", "                    B       ", "                  BBBBB     ", "                    B       ", "     I              B       ", "    IMI             B       ", "     I      D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "  T     T                   ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAA      AAAAAAAAA   ", "  T AAA T        AATTTAA    ", "  T     T          TTT      ", "  T     T          TTT      ", " TTTTTTTTT         TTT      ", "  TIIIIIT          TTT      ", "  TIIIIIT          TTT      ", "  TIIIIIT          TTT      ", "  TIIIIIT       BB TTT BB   ", "  TIIIIIT          TTT      ", "  TITTTIT          TTT      ", "  TITMTIT                   ", "  TITTTIT   D               ", "  TIIIIIT                   ", "  TIIIIIT                   ", "  TIIIIIT                   ", "  TIIIIIT                   ", "  TIIIIIT                   ", " TTTTTTTTT                  ", "  T     T                   ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAA     AAAAAAAAAAA  ", " AAAAAAAAA      ATTTTTTTA   ", "                 TT   TT    ", "                 TT   TT    ", "  TTTTTTT        TT   TT    ", "  I     I        TT   TT    ", "  IKKKKKI        TT   TT    ", "  I     I        TT   TT    ", "  IKKKKKI      B TT   TT B  ", "  I     I        TT   TT    ", "  IKKKKKI        TT   TT    ", "  I  M  I          TTT      ", "  IKKKKKI   D               ", "  I     I                   ", "  IKKKKKI                   ", "  I     I                   ", "  IKKKKKI                   ", "  I     I                   ", "  TIIIIIT                   ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAA A AAA    AAAAAAAAAAAAA ", " AAALALAAA     ATTTTTTTTTA  ", "    L L         T       T   ", "    L L         T       T   ", "  TTUTLTT       T       T   ", "  I F F I       T       T   ", "  IKFKFKI       T       T   ", "  I F F I       T       T   ", "  IKFKFKI     B T       T B ", "  I F F I       T       T   ", "  IKFKFKI       T       T   ", "  I FMF I        TTT TTT    ", "  IKFKFKI   D       T       ", "  I F F I                   ", "  IKFKFKI                   ", "  I F F I                   ", "  IKFKFKI                   ", "  I F F I                   ", "  TITTTIT                   ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAA    AAAAAAAAAAAAAA", " AAAAAAAAA    ATTTTTTTTTTTA ", "               T         T  ", "               T         T  ", "  TTTTTTT      T         T  ", "  I     I      T         T  ", "  IKKKKKI      T         T  ", "  I     I      T         T  ", "  IKKKKKI     BT         TB ", "  I     I      T         T  ", "  IKKKKKI      T         T  ", "  I  M  I       TT     TT   ", "  IKKKKKI   D     TTTTT     ", "  I     I                   ", "  IKKKKKI                   ", "  I     I                   ", "  IKKKKKI                   ", "  I     I                   ", "  TITOTIT                   ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAA A AAA   AAAAAAAAAAAAAAA", " AAALALAAA    ATTTTTTTTTTTA ", "    L L        T         T  ", "    L L        T         T  ", "  TTLTLTT      T         T  ", "  I F F I      T         T  ", "  IKFKFKI      T         T  ", "  I F F I      T         T  ", "  IKFKFKI    B T         T B", "  I F F I      T         T  ", "  IKFKFKI      T         T  ", "  I FMF I       T       T   ", "  IKFKFKI   D    TTT TTT    ", "  I F F I           T       ", "  IKFKFKI                   ", "  I F F I                   ", "  IKFKFKI                   ", "  I F F I                   ", "  TITTTIT                   ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAA   AAAAAAAAAAAAAAA", " AAAAAAAAA   ATTTTTTTTTTTTTA", "              T           T ", "              T           T ", "  TTTTTTT     T           T ", "  I     I     T           T ", "  IKKKKKI     T           T ", "  I     I     T           T ", "  IKKKKKI    BT           TB", "  I     I     T           T ", "  IKKKKKI     T           T ", "  I  M  I      TT       TT  ", "  IKKKKKI   D    TT   TT    ", "  I     I          TTT      ", "  IKKKKKI                   ", "  I     I                   ", "  IKKKKKI                   ", "  I     I                   ", "  TIIIIIT                   ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAA   AAAAAAAAAAAAAAA", "  T AAA T    ATTTTTTTTTTTTTA", "  T     T    BT           TB", "  T     T    BT           TB", " TTTTTTTTT   BT           TB", "  TIIIIIT    BT           TB", "  TIIIIIT    BT           TB", "  TIIIIIT    BT           TB", "  TIIIIIT    BT           TB", "  TIIIIIT    BT           TB", "  TITTTIT    BT           TB", "  TITTTIT    B T    S    T B", "  TITTTIT   D   TT  S  TT   ", "  TIIIIIT         TTSTT     ", "  TIIIIIT           S       ", "  TIIIIIT           S       ", "  TIIIIIT                   ", "  TIIIIIT                   ", " TTTTTTTTT                  ", "  T     T                   ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("AAAAAAAAAA   AAAAAAAAAAAAAAA", "    AAA      ATTTTTTTTTTTTTA", "              T           T ", "              T           T ", "  T     T     T           T ", "              T           T ", "              T           T ", "              T           T ", "             BT           TB", "              T           T ", "              T           T ", "               TT       TT  ", "            D    TT   TT    ", "                   TTT      ", "                            ", "                    S       ", "                            ", "                            ", "  T     T                   ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("   AAAAA     AAAAAAAAAAAAAAA", "    AAA       ATTTTTTTTTTTA ", "               T         T  ", "               T         T  ", "               T         T  ", "               T         T  ", "               T         T  ", "               T         T  ", "             B T         T B", "               T         T  ", "               T         T  ", "                T       T   ", "            D    TTT TTT    ", "                    T       ", "                            ", "                    S       ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("   AAAAA   C CAAAAAAAAAAAAAA", "    AAA    C CATTTTTTTTTTTA ", "           C C T         T  ", "           C C T         T  ", "           C C T         T  ", "           C C T         T  ", "           C C T         T  ", "           C C T         T  ", "           C CBT         TB ", "           C C T         T  ", "           C C T         T  ", "           CCC  TT     TT   ", "           CDC    TTTTT     ", "           CCC              ", "           C C              ", "           C C      S       ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           C C              ", "           CCC              ", "           CDC              ", "           CCC              ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle("   AAAAA      AAAAAAAAAAAAA ", "    AAA        ATTTTTTTTTA  ", "                T       T   ", "                T       T   ", "                T       T   ", "                T       T   ", "                T       T   ", "                T       T   ", "              B T       T B ", "                T       T   ", "                T       T   ", "                 TTT TTT    ", "            D       T       ", "                            ", "                            ", "                    S       ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "            D               ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA     AAAAAAAAAAA  ", " AAAAAAAAA      ATTTTTTTA   ", " AAAAAAAAA       TT   TT    ", "                 TT   TT    ", "                 TT   TT    ", "                 TT   TT    ", "                 TT   TT    ", "   CDDDC         TT   TT    ", "               B TT   TT B  ", "                 TT   TT    ", "                 TT   TT    ", "                   TTT      ", "   CDDDC    D               ", "                            ", "                            ", "                    S       ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC    D               ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA      AAAAAAAAA   ", " AAAEEEAAA       AATTTAA    ", " AAAEEEAAA         TTT      ", "  H EEE H          TTT      ", "  H EEE H          TTT      ", "  H EEE H          TTT      ", "  H EEE H          TTT      ", "  HDEEEDH          TTT      ", "  H EEE H       BB TTT BB   ", "  H EEE H          TTT      ", "  H EEE H          TTT      ", "  H EEE H                   ", "  HDEEEDH   D               ", "  H EEE H                   ", "  H EEE H           S       ", "  H EEE H           S       ", "  H EEE H                   ", "  HDEEEDH                   ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  FDEEEDF   D               ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  FDEEEDF                   ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  FDEEEDF                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA       AAAAAAA    ", " AAEAAAEAA         AAA      ", " AAEKKKEAA          B       ", "   E   E            B       ", "   E   E            B       ", "   E   E            B       ", "   EKKKE            B       ", " CDEEEEEDC          B       ", "   E   E          BBBBB     ", "   E   E            B       ", "   E   E            B       ", "   EKKKE            B       ", " CDEEEEEDC  D               ", "   E   E            S       ", "   E   E            S       ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC  D               ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "    EEE                     ", "                            ")
                    .aisle(" AAAAAAAAA        AAAAA     ", " AEAKKKAEA         AAA      ", " AEK   KEA                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED  D       S       ", "  E     E           S       ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED  D               ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "   E   E                    ", "    EEE                     ")
                    .aisle(" AAAAAAAAA        AAAAA     ", " AEAKMKAEA         ASA      ", " AEK M KEA          S       ", "  E  M  E           S       ", "  E  M  E           S       ", "  E  M  E           S       ", "  EK M KE           S       ", " DEEMMMEED          S       ", "  E  M  E           S       ", "  E  M  E           S       ", "  E  M  E           S       ", "  EK M KE           S       ", " DEEMMMEED  D       S       ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED  D               ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "   E   E                    ", "    EOE                     ")
                    .aisle(" AAAAAAAAA        AAAAA     ", " AEAKKKAEA         AAA      ", " AEK   KEA                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED  D               ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED  D               ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "   E   E                    ", "    EEE                     ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AAEAAAEAA   AAAAAAAAAAAAAAA", " AAEKKKEAA                  ", "   E   E                    ", "   E   E                    ", "   E   E        BBB         ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC  D               ", "   E   E        BBB         ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE        BBB         ", " CDEEEEEDC  D               ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "    EEE                     ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AAAEEEAAA   AAAAAAAAAAAAAAA", " AAAEEEAAA    F G G         ", "  H EEE H     F G G         ", "  H EEE H     F G G         ", "  H EEE H     FBGGGB        ", "  H EEE H     FPGIG         ", "  HDEEEDH     F GIG         ", "  H EEE H     F GIG         ", "  H EQE H     F GIG         ", "  H EQE H     F GIG         ", "  H EEE H     F GIG         ", "  HDEEEDH   D F GIG         ", "  H EEE H     FBGGGB        ", "  H EEE H     FPGIG         ", "  H EEE H     F GIG         ", "  H EEE H     F GIG         ", "  HDEEEDH     F GGG         ", "  F EEE F     F GGG         ", "  F EQE F     F GGG         ", "  F EQE F     F GGG         ", "  F EEE F     FBGGGB        ", "  FDEEEDF   D FPGGG         ", "  F EEE F     F             ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  FDEEEDF                   ", "  F EEE F                   ", "  F EQE F                   ", "  F EQE F                   ", "  F EEE F                   ", "  FDEEEDF                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EQE J                   ", "  J EQE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  JPEEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EQE J                   ", "  J EQE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AAAAAAAAA   AAAAAAAAAAAAAAA", " AAAAAAAAA                  ", "    R                       ", "                            ", "              BGGGGGB       ", "               GKKKG        ", "   CDDDC       G   G        ", "      R        GKKKG        ", "               G   G        ", "               GKKKG        ", "               G   G        ", "   CDDDC    D  G   G        ", "    R         BG   GB       ", "               G   G        ", "               GKKKG        ", "               G   G        ", "   CDDDC       G   G        ", "      R        G   G        ", "               G   G        ", "               GKKKG        ", "              BG   GB       ", "   CDDDC    D  G   G        ", "    R           GGG         ", "                            ", "                            ", "                            ", "   CDDDC                    ", "      R                     ", "                            ", "                            ", "                            ", "   CDDDC                    ", "    R                       ", "                            ", "                            ", "                            ", "   CDDDC                    ", "      R                     ", "                            ", "                            ", "                            ", "   CDDDC                    ", "    R                       ", "                            ", "                            ", "                            ", "   CDDDC                    ", "      R                     ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", "   AAAAA     AAAAALAAAAAAAAA", "    AAA       G   L GF      ", "              G   L GF      ", "    R         G   L GF      ", "             BGGGGLGGFBBB   ", "              GK  LKGF      ", "     D        G   L GF      ", "              GK  LKGF      ", "      R       G   L GF      ", "              GK  LKGF      ", "              G   L GF      ", "     D      D G   L GF      ", "             BG   L GFBBB   ", "    R         G   L GF      ", "              GK  LKGF      ", "              G   L GF      ", "     D        G   L GF      ", "              G   L GF      ", "      R       G   L GF      ", "              GK  LKGF      ", "             BG   L GFBBB   ", "     D      D G   L GF      ", "               G   G F      ", "    R           GGG         ", "                            ", "                            ", "     D                      ", "                            ", "      R                     ", "                            ", "                            ", "     D                      ", "                            ", "    R                       ", "                            ", "                            ", "     D                      ", "                            ", "      R                     ", "                            ", "                            ", "     D                      ", "                            ", "    R                       ", "                            ", "                            ", "     D                      ", "                            ", "      R                     ", "                            ", "                            ", "     D                      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", "   AAAAA     AAAAAAAAAAAAAAA", "    AAA             G G G F ", "                    G G G F ", "                    G G G F ", "    R        BGGGGGGGBGGGBF ", "              GK   KG GGG F ", "     D        G     G GGG F ", "              GK N KG GGG F ", "              G  N  G GGG F ", "      R       GK N KG GGG F ", "              G     G GGG F ", "     DDDDDDDD G     G GGG F ", "             BG     GBGGGBF ", "              G  N  G GGG F ", "    R         GK N KG GGG F ", "              G  N  G GGG F ", "     D        G     G GGG F ", "              G     G GGG F ", "              G  N  G GGG F ", "      R       GK N KG GGG F ", "             BG  N  GBGGGBF ", "     DDDDDDDD G     G GGG F ", "               G   G      F ", "                GOG         ", "    R                       ", "                            ", "     D                      ", "                            ", "                            ", "      R                     ", "                            ", "     DD                     ", "                            ", "                            ", "    R                       ", "                            ", "     D                      ", "                            ", "                            ", "      R                     ", "                            ", "     DD                     ", "                            ", "                            ", "    R                       ", "                            ", "     D                      ", "                            ", "                            ", "      R                     ", "                            ", "     DD                     ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", "   AAAAA     AAAMAAAAAAAAAAA", "    AAA       G M   G       ", "              G M   G       ", "              G M   G       ", "             BGGMGGGGGGGGGB ", "    R         GKM  KGGKKKG  ", "     D        G M   GG   G  ", "              GKM  KGGKKKG  ", "              G M   GG   G  ", "              GKM  KGGKKKG  ", "      R       G M   GG   G  ", "     D        G M   GG   G  ", "             BG M   GG   GB ", "              G M   GG   G  ", "              GKM  KGGKKKG  ", "    R         G M   GG   G  ", "     D        G M   GG   G  ", "              G M   GG   G  ", "              G M   GG   G  ", "              GKM  KGGKKKG  ", "      R      BG M   GG   GB ", "     D        G M   GG   G  ", "               G   G  GGG   ", "                GGG         ", "                            ", "    R                       ", "     D                      ", "                            ", "                            ", "                            ", "      R                     ", "     D                      ", "                            ", "                            ", "                            ", "    R                       ", "     D                      ", "                            ", "                            ", "                            ", "      R                     ", "     D                      ", "                            ", "                            ", "                            ", "    R                       ", "     D                      ", "                            ", "                            ", "                            ", "      R                     ", "     D                      ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AAAAAAAAA   AAAAAAAAAAAAAAA", " AAAAAAAAA            M   G ", "                      M   G ", "                      M   G ", "              BGGGGGGGMGGGGB", "    R          GKKKGGKM  KG ", "   CDDDC       G   GG M   G ", "               GKKKGGKM  KG ", "               G   GG M   G ", "               GKKKGGKM  KG ", "      R        G   GG M   G ", "   CDDDC       G   GG M   G ", "              BG   GG M   GB", "               G   GG M   G ", "               GKKKGGKM  KG ", "    R          G   GG M   G ", "   CDDDC       G   GG M   G ", "               G   GG M   G ", "               G   GG M   G ", "               GKKKGGKM  KG ", "      R       BG   GG M   GB", "   CDDDC       G   GG M   G ", "                GGG  G   G  ", "                      GGG   ", "                            ", "    R                       ", "   CDDDC                    ", "                            ", "                            ", "                            ", "      R                     ", "   CDDDC                    ", "                            ", "                            ", "                            ", "    R                       ", "   CDDDC                    ", "                            ", "                            ", "                            ", "      R                     ", "   CDDDC                    ", "                            ", "                            ", "                            ", "    R                       ", "   CDDDC                    ", "                            ", "                            ", "                            ", "      R                     ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AAAEEEAAA   AAAAAAAAAAAAAAA", " AAAEEEAAA     FGGG         ", "  H EEE H      FGGG         ", "  H EEE H      FGGG         ", "  H EEE H      FGGGPGGGGGGGB", "  H EEE H      FGGG GK   KI ", "  HDEEEDH      FGGG G     I ", "  H EEE H      FGGG GK N KI ", "  H EQE H      FGGG G  N  I ", "  H EQE H      FGGG GK N KI ", "  H EEE H      FGGG G     I ", "  HDEEEDH      FGGG G     I ", "  H EEE H      FGGG G     GB", "  H EEE H      FGGG G  N  I ", "  H EEE H      FGGG GK N KI ", "  H EEE H      FGGG G  N  I ", "  HDEEEDH      FGGG G     G ", "  F EEE F      FGGG G     G ", "  F EQE F      FGGG G  N  G ", "  F EQE F      FGGG GK N KG ", "  F EEE F      FGGG G  N  GB", "  FDEEEDF      FGGGPG     G ", "  F EEE F      F     G   G  ", "  F EEE F             GOG   ", "  F EEE F                   ", "  F EEE F                   ", "  FDEEEDF                   ", "  F EEE F                   ", "  F EQE F                   ", "  F EQE F                   ", "  F EEE F                   ", "  FDEEEDF                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EQE J                   ", "  J EQE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EQE J                   ", "  J EQE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AAEAAAEAA   AAAAAAAAAAAAAAA", " AAEKKKEAA              L G ", "   E   E                L G ", "   E   E                L G ", "   E   E      BGGGGGGGGGLGGB", "   EKKKE       GKKKGGK  LKG ", " CDEEEEEDC     G   GG   L G ", "   E   E       GKKKGGK  LKG ", "   E   E       G   GG   L G ", "   E   E       GKKKGGK  LKG ", "   EKKKE       G   GG   L G ", " CDEEEEEDC     G   GG   L G ", "   E   E      BG   GG   L GB", "   E   E       G   GG   L G ", "   E   E       GKKKGGK  LKG ", "   EKKKE       G   GG   L G ", " CDEEEEEDC     G   GG   L G ", "   E   E       G   GG   L G ", "   E   E       G   GG   L G ", "   E   E       GKKKGGK  LKG ", "   EKKKE      BG   GG   L GB", " CDEEEEEDC     G   GG   L G ", "   E   E        GGG  GM  G  ", "   E   E              GGG   ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "    EEE                     ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AEAKKKAEA   AAAAAMAAAAAAAAA", " AEK   KEA    G   M G       ", "  E     E     G   M G       ", "  E     E     G   M G       ", "  E     E    BGGGGMGGGGGGGB ", "  EK   KE     GK  MKGGKKKG  ", " DEEMMMEED    G   M GG   G  ", "  E     E     GK  MKGGKKKG  ", "  E     E     G   M GG   G  ", "  E     E     GK  MKGGKKKG  ", "  EK   KE     G   M GG   G  ", " DEEMMMEED    G   M GG   G  ", "  E     E    BG   M GG   GB ", "  E     E     G   M GG   G  ", "  E     E     GK  MKGGKKKG  ", "  EK   KE     G   M GG   G  ", " DEEMMMEED    G   M GG   G  ", "  E     E     G   M GG   G  ", "  E     E     G   M GG   G  ", "  E     E     GK  MKGGKKKG  ", "  EK   KE    BG   M GG   GB ", " DEEMMMEED    G   M GG   G  ", "  E     E      G   G  GGG   ", "  E     E       GGG         ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "   E   E                    ", "    EEE                     ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AEAKMKAEA   AAAAAAAAAAAAAAA", " AEK M KEA          G G G F ", "  E  M  E           G G G F ", "  E  M  E           G G G F ", "  E  M  E    BGGGGGGGBGGGBF ", "  EK M KE     GK   KG GGG F ", " DEEMMMEED    G     G GGG F ", "  E  M  E     GK N KG GGG F ", "  E  M  E     G  N  G GGG F ", "  E  M  E     GK N KG GGG F ", "  EK M KE     G     G GGG F ", " DEEMMMEED    G     G GGG F ", "  E  M  E    BG     GBGGGBF ", "  E  M  E     G  N  G GGG F ", "  E  M  E     GK N KG GGG F ", "  EK M KE     G  N  G GGG F ", " DEEMMMEED    G     G GGG F ", "  E  M  E     G     G GGG F ", "  E  M  E     G  N  G GGG F ", "  E  M  E     GK N KG GGG F ", "  EK M KE    BG  N  GBGGGBF ", " DEEMMMEED    G     G GGG F ", "  E  M  E      G   G      F ", "  E  M  E       GOG         ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  EK M KE                   ", " DEEMMMEED                  ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "  E  M  E                   ", "   E   E                    ", "    EOE                     ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AEAKKKAEA   AAALAAAAAAAAAAA", " AEK   KEA    G L   GF      ", "  E     E     G L   GF      ", "  E     E     G L   GF      ", "  E     E    BGGLGGGGFBBB   ", "  EK   KE     GKL  KGF      ", " DEEMMMEED    G L   GF      ", "  E     E     GKL  KGF      ", "  E     E     G L   GF      ", "  E     E     GKL  KGF      ", "  EK   KE     G L   GF      ", " DEEMMMEED    G L   GF      ", "  E     E    BG L   GFBBB   ", "  E     E     G L   GF      ", "  E     E     GKL  KGF      ", "  EK   KE     G L   GF      ", " DEEMMMEED    G L   GF      ", "  E     E     G L   GF      ", "  E     E     G L   GF      ", "  E     E     GKL  KGF      ", "  EK   KE    BG L   GFBBB   ", " DEEMMMEED    G L   GF      ", "  E     E      G   G F      ", "  E     E       GGG         ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  EK   KE                   ", " DEEMMMEED                  ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "  E     E                   ", "   E   E                    ", "    EEE                     ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AAEAAAEAA   AAAAAAAAAAAAAAA", " AAEKKKEAA                  ", "   E   E                    ", "   E   E                    ", "   E   E      BGGGGGB       ", "   EKKKE       GKKKG        ", " CDEEEEEDC     G   G        ", "   E   E       GKKKG        ", "   E   E       G   G        ", "   E   E       GKKKG        ", "   EKKKE       G   G        ", " CDEEEEEDC     G   G        ", "   E   E      BG   GB       ", "   E   E       G   G        ", "   E   E       GKKKG        ", "   EKKKE       G   G        ", " CDEEEEEDC     G   G        ", "   E   E       G   G        ", "   E   E       G   G        ", "   E   E       GKKKG        ", "   EKKKE      BG   GB       ", " CDEEEEEDC     G   G        ", "   E   E        GGG         ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   EKKKE                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", " CDEEEEEDC                  ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "   E   E                    ", "    EEE                     ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AAAEEEAAA   AAAAAAAAAAAAAAA", " AAAEEEAAA    F G G         ", "  H EEE H     F G G         ", "  H EEE H     F G G         ", "  H EEE H     FBGGGB        ", "  H EEE H     F GIG         ", "  HDEEEDH     F GIG         ", "  H EEE H     F GIG         ", "  H EEE H     F GIG         ", "  H EEE H     F GIG         ", "  H EEE H     F GIG         ", "  HDEEEDH     F GIG         ", "  H EEE H     FBGGGB        ", "  H EEE H     F GIG         ", "  H EEE H     F GIG         ", "  H EEE H     F GIG         ", "  HDEEEDH     F GGG         ", "  F EEE F     F GGG         ", "  F EEE F     F GGG         ", "  F EEE F     F GGG         ", "  F EEE F     FBGGGB        ", "  FDEEEDF     F GGG         ", "  F EEE F     F             ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  FDEEEDF                   ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  F EEE F                   ", "  FDEEEDF                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  J EEE J                   ", "  JDEEEDJ                   ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "    EEE                     ", "                            ", "                            ")
                    .aisle(" AAAAAAAAA   AAAAAAAAAAAAAAA", " AAAAAAAAA   AAAAAAAAAAAAAAA", " AAAAAAAAA                  ", "                            ", "                            ", "                BBB         ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                BBB         ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                BBB         ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "   CDDDC                    ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ", "                            ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('B', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('C', frames(GTMaterials.Steel))
                    .where('D', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('E', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('F', frames(GTMaterials.Tritanium))
                    .where('G', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('H', frames(GTMaterials.NaquadahAlloy))
                    .where('I', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('J', frames(GTMaterials.Tungsten))
                    .where('K', heatingCoils())
                    .where('L', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('M', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('N', blocks(GTEBlocks.HOLLOW_CASING.get()))
                    .where('O', abilities(MUFFLER))
                    .where('P', blocks(AEBlocks.QUARTZ_VIBRANT_GLASS.block()))
                    .where('Q', blocks(AEBlocks.QUARTZ_GLASS.block()))
                    .where('R', frames(GTMaterials.StainlessSteel))
                    .where('S', blocks(GTBlocks.CASING_TITANIUM_TURBINE.get()))
                    .where('T', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('U', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('V', blocks(GTEBlocks.SUPERCRITICAL_TURBINE_CASING.get()))
                    .where('W', air())
                    .where('X', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('Y', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('Z', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('[', blocks(GTEBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('=', blocks(GTBlocks.COMPUTER_CASING.get()))
                    .where(']', blocks(GTBlocks.COMPUTER_HEAT_VENT.get()))
                    .where('^', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .setMinGlobalLimited(20)
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition LARGE_PYROLYSE_OVEN = multiblock("large_pyrolyse_oven", "大型热解炉", CoilMultiblockMachine.createCoilMachine(false, false))
            .allRotation()
            .recipe(GTRecipeTypes.PYROLYSE_RECIPES)
            .parallelizableTooltips()
            .recipeModifiers(GTERecipeModifiers.HATCH_PARALLEL, GTERecipeModifiers::pyrolyseOvenOverclock)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAAAAAA", "ACCCCCCCCCCCA", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "             ")
                    .aisle("             ", "A FGFGFGFGF A", "BBBBBBDBBBBBB", "BDDDDDDDDDDDB", "BBBBBBDBBBBBB", "  FGFGFGFGF  ")
                    .aisle("             ", "A FGFGFGFGF A", "BBBBBBDBBBBBB", "B           B", "BEBBBBDBBBBEB", "  FGFGFGFGF  ")
                    .aisle("             ", "A FGFGFGFGF A", "BBBBBBDBBBBBB", "BDDDDDDDDDDDB", "BBBBBBDBBBBBB", "  FGFGFGFGF  ")
                    .aisle("AAAAAAAAAAAAA", "ACCCCCHCCCCCA", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "             ")
                    .where('A', frames(GTMaterials.Ruridit))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(autoAbilities(true, false, true)))
                    .where('D', heatingCoils())
                    .where('E', abilities(MUFFLER))
                    .where('F', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('G', frames(GTMaterials.StainlessSteel))
                    .where('H', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller instanceof ICoilMachine machine) {
                    components.add(Component.translatable("gtceu.multiblock.pyrolyse_oven.speed", machine.getCoilTier() == 0 ? 75 : 50 * (machine.getCoilTier() + 15)));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/pyrolyse_oven"))
            .register();

    MultiblockMachineDefinition LARGE_ROCK_CRUSHER = multiblock("large_rock_crusher", "大型碎岩机", GCYMMultiblockMachine::new)
            .allRotation()
            .recipe(GTRecipeTypes.ROCK_BREAKER_RECIPES)
            .eutMultiplierTooltips(0.8)
            .durationMultiplierTooltips(0.6)
            .tooltipsText("Requires the corresponding fluid to be placed in the input chamber", "需要在输入仓中放入对应流体")
            .parallelizableTooltips()
            .recipeModifier(GTERecipeModifiers.GCYM_OVERCLOCKING)
            .block(GCYMBlocks.CASING_SECURE_MACERATION)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "ABBBA", "A   A", "A C A")
                    .aisle("AAAAA", "ABaBA", "A   A", "ACCCA")
                    .aisle("AAAAA", "ABBBA", "A   A", "A C A")
                    .aisle("AAAAA", "AA~AA", "AAAAA", "AAAAA")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_SECURE_MACERATION.get())
                            .or(abilities(GTEPartAbility.ACCELERATE_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS_1X).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GCYMBlocks.CRUSHING_WHEELS.get()))
                    .where('C', frames(GTMaterials.MaragingSteel300))
                    .where(' ', air())
                    .where('a', GTEPredicates.integralFramework())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/secure_maceration_casing"), GTCEu.id("block/machines/rock_crusher"))
            .register();

    MultiblockMachineDefinition MEGA_WIREMILL = multiblock("mega_wiremill", "特大线材轧机", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .allRotation()
            .recipe(GTRecipeTypes.WIREMILL_RECIPES)
            .coilParallelTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GTBlocks.CASING_INVAR_HEATPROOF)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB CCC  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB C~C   B   B   B    B   B   B    B   B   B    B   B   B ", "D   D CCC                                                    ", "D   D CCC                                                    ", "D   D EEE                                                    ", "      EEE                                                    ", "                                                             ", "                                                             ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB EEEB BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB EFEB BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB EFEB  B   B   B    B   B   B    B   B   B    B   B   B ", "      EFEB                                                   ", "D   D EFEB                                                   ", "      EFEB                                                   ", "      BFBB                                                   ", "      B B                                                    ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB EEE  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD", "GG GG EEE  DGD DGD DGD  DGD DGD DGD  DGD DGD DGD  DGD DGD DGD", "BB BB EEE  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD", "BB BB EEE  DDDDDDDDDDD  DDDDDDDDDDD  DDDDDDDDDDD  DDDDDDDDDDD", "D   D EEE                                                    ", "      EEE                                                    ", "       F                                                     ", "      B B                                                    ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "      BBBB  B   B   B    B   B   B    B   B   B    B   B   B ", "GG GG BBBB BGB BGB BGB  BGB BGB BGB  BGB BGB BGB  BGB BGB BGB", "      BBBB  B   B   B    B   B   B    B   B   B    B   B   B ", "      BBBB                                                   ", "D   D BBBB                                                   ", "BBBBBBBBBB                                                   ", "      BHBB                                                   ", "      BBBB                                                   ", "      B BB                                                   ")
                    .aisle("AAAAAAIIIA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB  I   BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB  I   BGB BGB BGB  BGB BGB BGB  BGB BGB BGB  BGB BGB BGB", "BB BB  I   BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB IIIB  B   B   B    B   B   B    B   B   B    B   B   B ", "D   D BBB   B   B   B    B   B   B    B   B   B    B   B   B ", "BBBBBBB BB                                                   ", "     B HG                                                    ", "     BFGD                                                    ", "     BBBBB                                                   ")
                    .aisle("JKKKJAIIIA FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "     DH HD KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK", "     DH HD L L L L L L  L L L L L L  L L L L L L  L L L L L L", "JKKKJDH HD KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK", "BB BB IIIB  F J F J F    F J F J F    F J F J F    F J F J F ", "D   D BBB   BBBBBBBBB    BBBBBBBBB    BBBBBBBBB    BBBBBBBBB ", "     BB BB                                                   ", "       HG                                                    ", "      FGD                                                    ", "      BBBB                                                   ")
                    .aisle("JKKKJAIKIIIIJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "      DHD   L L L L L    L L L L L    L L L L L    L L L L L ", "      DHD  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JKKKJ DHD   L L L L L    L L L L L    L L L L L    L L L L L ", "BB BB IHIIIIF J F J F    F J F J F    F J F J F    F J F J F ", "D   D BHB   B   B   B    B   B   B    B   B   B    B   B   B ", "     BBHBB                                                   ", "       HG                                                    ", "       GD                                                    ", "      BBBB                                                   ")
                    .aisle("JKKKJAIKIA FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "     DHDHD IKKKKKKKKKIIIIKKKKKKKKKIIIIKKKKKKKKKIIIIKKKKKKKKKK", "     DHDHD L L L L L L  L L L L L L  L L L L L L  L L L L L L", "JKKKJDHDHD IKKKKKKKKKIIIIKKKKKKKKKIIIIKKKKKKKKKIIIIKKKKKKKKKK", "BB BB I IB  F J F J F    F J F J F    F J F J F    F J F J F ", "D   D BBB   BBBBBBBBB    BBBBBBBBB    BBBBBBBBB    BBBBBBBBB ", "     BB BB                                                   ", "       HG                                                    ", "       GD                                                    ", "      BBBB                                                   ")
                    .aisle("JKKKJAIKIIIIJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "      DHD   L L L L L    L L L L L    L L L L L    L L L L L ", "      DHD  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JKKKJ DHD   L L L L L    L L L L L    L L L L L    L L L L L ", "BB BB IHIIIIF J F J F    F J F J F    F J F J F    F J F J F ", "D   D BHB   B   B   B    B   B   B    B   B   B    B   B   B ", "     BBHBB                                                   ", "       HG                                                    ", "       GD                                                    ", "      BBBB                                                   ")
                    .aisle("JKKKJAIIIA FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "     DH HD KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK", "     DH HD L L L L L L  L L L L L L  L L L L L L  L L L L L L", "JKKKJDH HD KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK", "BB BB IIIB  F J F J F    F J F J F    F J F J F    F J F J F ", "D   D BBB   BBBBBBBBB    BBBBBBBBB    BBBBBBBBB    BBBBBBBBB ", "     BB BB                                                   ", "       HG                                                    ", "      FGD                                                    ", "      BBBB                                                   ")
                    .aisle("AAAAAAIIIA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB DI   BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB DI   BGB BGB BGB  BGB BGB BGB  BGB BGB BGB  BGB BGB BGB", "BB BB DI   BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB IIIB  B   B   B    B   B   B    B   B   B    B   B   B ", "D   D BBB   B   B   B    B   B   B    B   B   B    B   B   B ", "BBBBBBB BB                                                   ", "     B HG                                                    ", "     BFGD                                                    ", "     BBBBB                                                   ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "      BBBB  B   B   B    B   B   B    B   B   B    B   B   B ", "GG GG BBBB BGB BGB BGB  BGB BGB BGB  BGB BGB BGB  BGB BGB BGB", "      BBBB  B   B   B    B   B   B    B   B   B    B   B   B ", "      BBBB                                                   ", "D   D BBBB                                                   ", "BBBBBBBBBB                                                   ", "      BHBB                                                   ", "      BBBB                                                   ", "      B BB                                                   ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB EEE  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD", "GG GG EEE  DGD DGD DGD  DGD DGD DGD  DGD DGD DGD  DGD DGD DGD", "BB BB EEE  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD", "BB BB EEE  DDDDDDDDDDD  DDDDDDDDDDD  DDDDDDDDDDD  DDDDDDDDDDD", "D   D EEE                                                    ", "      EEE                                                    ", "       F                                                     ", "      B B                                                    ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB EEEB BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB EFEB BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB EFEB  B   B   B    B   B   B    B   B   B    B   B   B ", "      EFEB                                                   ", "D   D EFEB                                                   ", "      EFEB                                                   ", "      BFBB                                                   ", "      B B                                                    ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB CCC  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB CCC   B   B   B    B   B   B    B   B   B    B   B   B ", "D   D CCC                                                    ", "D   D CCC                                                    ", "D   D EEE                                                    ", "      EEE                                                    ", "                                                             ", "                                                             ", "                                                             ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('C', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', frames(GTMaterials.TungstenSteel))
                    .where('E', blocks(GTEBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('F', blocks(GTEBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('G', blocks(GTBlocks.CASING_ASSEMBLY_CONTROL.get()))
                    .where('H', blocks(GTEBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('I', heatingCoils())
                    .where('J', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('K', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('L', blocks(GTEBlocks.HOLLOW_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_heatproof"), GTCEu.id("block/multiblock/gcym/large_wiremill"))
            .register();

    MultiblockMachineDefinition SUPERCONDUCTING_MAGNETIC_PRESSER = multiblock("superconducting_magnetic_presser", "超导磁驱冲击装置", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .tooltipsText("I heard that this thing used to be an electromagnetic cannon", "听说这玩意以前是电磁炮")
            .recipe(GTRecipeTypes.FORMING_PRESS_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GTEBlocks.IRIDIUM_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("                                      ", "                                      ", "           CCCCCCCCCCCCCCCCCCC        ", "           CDDDDDDDDDCEEEEEEECCCCC    ", "           CCCCCCCCCCCCCCCCCCC        ", "                                      ", "                                      ")
                    .aisle(" FFFFFFFFFF                           ", " F        FCCCCCCCCCCCCCCCCCCC        ", " FCCCCCCCCCC         CCCCCCCCCCCCC    ", " FCEEEEEEECC         CCCCCCCCCCCCCCCCC", " FCCCCCCCCCC         CCCCCCCCCCCCC    ", " F        FCCCCCCCCCCCCCCCCCCC        ", " FFFFFFFFFF                           ")
                    .aisle(" F        FCCCCCCCCCCCCCCCCCCC        ", " ECCCCCCCCCC         CCCCCCCCCCCCC    ", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " DC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCC    ", " F        FCCCCCCCCCCCCCCCCCCC        ")
                    .aisle(" FCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    ", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " EC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " DC        GGGGGGGGGGGGGGGGGGGGGGGGGGG", " EC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " FCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    ")
                    .aisle(" FCHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC ", " ECHHH     CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECHHH     IIIIIIIIIIIIIIG           E", " DCHHH     GGGGGGGGGGGGGGGGGGGGGGGGGGG", " ECHHH     IIIIIIIIIIIIIIG           E", " ECHHH     CCCCCCCCCCCCCCCCCCCCCCCCCCC", " FCHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")
                    .aisle(" FHJKJH    G    LLLLLLLLLL       CCCCC", " EH   H    GGGGGGGGGGGGGGGGGGMMMMGGGGG", " EH   H  GGG             L            ", " DH   H  GGG    NNNNNNNNNLLLLLLLLL    ", " EH   H  GGG             L            ", " EH   H    GGGGGGGGGGGGGGGGGGMMMMGGGGG", " FHJKJH    G    LLLLLLLLLL       CCCCC")
                    .aisle("HHKJKJKH   G    LJJJJJJJJL           C", "HH     H GGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HH     HHHHEJJJE         NOOPPPPPQG   ", "HH     HHHHEEJEE          OLPPPPPLG   ", "HH     HHHHEJJJE         NOOPPPPPQG   ", "HH     H GGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHKJKJKH   G    LJJJJJJJJL           C")
                    .aisle("HJKJKJKJHGGG    LJJJJJJJJL            ", "H       HHHEJJJE         NOOPPPPPQG   ", "HIIIIIIIIIIH    R         OOPPPPPL    ", "H         SSSSSSR         OOPPPPPL    ", "HIIIIIIIIIIH    R         OOPPPPPL    ", "H       HHHEJJJE         NOOPPPPPQG   ", "HJKJKJKJHGGG    LJJJJJJJJL            ")
                    .aisle("HSSSSSSSHGGG    LJJJJJJJJLLLLLLLLL    ", "H      SSSHEEJEE          OLPPPPPLG   ", "H         SSSSSSR         OOPPPPPL    ", "H         OOOOOOR         OOPPPPPL    ", "H         SSSSSSR         OOPPPPPL    ", "H      SSSHEEJEE          OLPPPPPLG   ", "HSSSSSSSHGGG    LJJJJJJJJLLLLLLLLL    ")
                    .aisle("HJKJKJKJHGGG    LJJJJJJJJL            ", "H       HHHEJJJE         NOOPPPPPQG   ", "HIIIIIIIIIIH    R         OOPPPPPL    ", "H         SSSSSSR         OOPPPPPL    ", "HIIIIIIIIIIH    R         OOPPPPPL    ", "H       HHHEJJJE         NOOPPPPPQG   ", "HJKJKJKJHGGG    LJJJJJJJJL            ")
                    .aisle("HHKJKJKH   G    LJJJJJJJJL           C", "HH     H GGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HH     HHHHEJJJE         NOOPPPPPQG   ", "HH     HHHHEEJEE          OLPPPPPLG   ", "HH     HHHHEJJJE         NOOPPPPPQG   ", "HH     H GGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHKJKJKH   G    LJJJJJJJJL           C")
                    .aisle(" FHJKJH    G    LLLLLLLLLL       CCCCC", " EH   H    GGGGGGGGGGGGGGGGGGMMMMGGGGG", " EH   H  GGG             L            ", " DH   H  GGG    NNNNNNNNNLLLLLLLLL    ", " EH   H  GGG             L            ", " EH   H    GGGGGGGGGGGGGGGGGGMMMMGGGGG", " FHJKJH    G    LLLLLLLLLL       CCCCC")
                    .aisle(" FCHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECHHH     CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECHHH     IIIIIIIIIIIIIIG           E", " DCHHH     GGGGGGGGGGGGGGGGGGGGGGGGGGG", " ECHHH     IIIIIIIIIIIIIIG           E", " ECHHH     CCCCCCCCCCCCCCCCCCCCCCCCCCC", " FCHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")
                    .aisle(" FCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    ", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " EC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " DC        GGGGGGGGGGGGGGGGGGGGGGGGGGG", " EC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " FCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    ")
                    .aisle(" F        FCCCCCCCCCCCCCCCCCCC        ", " ECCCCCCCCCC         CCCCCCCCCCCCC    ", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " DC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCC    ", " F        FCCCCCCCCCCCCCCCCCCC        ")
                    .aisle(" FFFFFFFFFF                           ", " F        FCCCCCCCCCCCCCCCCCCC        ", " FCCCCCCCCCC         CCCCCCCCCCCCC    ", " FCEEEEEEECC         CCCCCCCCCCCCCCCCC", " FCCCCCCCCCC         CCCCCCCCCCCCC    ", " F        FCCCCCCCCCCCCCCCCCCC        ", " FFFFFFFFFF                           ")
                    .aisle("    AAAAA                             ", "    AABAA                             ", "    AAAAA  CCCCCCCCCCCCCCCCCCC        ", "           CDDDDDDDDDCEEEEEEECCCCC    ", "           CCCCCCCCCCCCCCCCCCC        ", "                                      ", "                                      ")
                    .where('A', blocks(GTEBlocks.IRIDIUM_CASING.get())
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('E', blocks(GTEBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('F', frames(GTMaterials.HastelloyC276))
                    .where('G', blocks(GTEBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('H', blocks(GTEBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('I', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('J', blocks(GTEBlocks.AMPROSIUM_BOROSILICATE_GLASS.get()))
                    .where('K', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('L', blocks(GTEBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('M', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('N', blocks(GTEBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('O', blocks(GTEBlocks.MOLECULAR_CASING.get()))
                    .where('P', blocks(GTEBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('Q', frames(GTMaterials.Naquadria))
                    .where('R', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Neutronium)))
                    .where('S', blocks(GTEBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition FIELD_FORGE_PRESS = multiblock("field_forge_press", "力场锻压机", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipe(GTRecipeTypes.FORGE_HAMMER_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GTEBlocks.MOLECULAR_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("a  a         a  a
                    .aisle("aaaa   aaa   aaaa", "AAAA   a~a   AAAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", " AACCCCCCCCCCCAA ", " AA           AA ", " AA           AA ", " AA           AA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A   AAA   A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  AA A L A AA  A", "AEEAA A L A AAEEA", "AFFAA A L A AAFFA", "BFFBAAAALAAAABFFB", " FF   L L L   FF ", " FF   L L L   FF ", " FF   L L L   FF ", "BFFB  L L L  BFFB", "A  AAALALALAAA  A", "A  A  L L LLLA  A", "A  A  LLL   LA  A", "A  A  L     LA  A", "BBBB  L     LBBBB", "      L     L    ", "      L     L    ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "AEEAAAAAAAAAAAEEA", "AFFAAAAAAAAAAAFFA", "BFFBAAAAAAAAABFFB", " FF           FF ", " FF           FF ", " FF           FF ", "BFFB         BFFB", "A  AAAAAAAAAAA  A", "A  AAALALALAAA  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "BBBB         BBBB", "                 ", "      L     L    ", "                 ", "                 ")
                    .aisle("AAAA  DDDDD   AAA", "AAAA          AAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", "CAA           AAC", "CAA           AAC", "CAAAAAAAAAAAAAAAC", "CAA           AAC", "CAA           AAC", "CAAAAAAAAAAAAAAAC", "BBBB         BBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", "CAAAAAAAAAAAAAAAC", " AA  AL L LA  AA ", " AA  A     A  AA ", " AA  A     A  AA ", "BBBBGGGGGGGGGBBBB", "                 ", "      L     L    ", "                 ", "                 ")
                    .aisle("ADDA  DDDDD   DDA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", " AA           AA ", " AA           AA ", "CAAAAAAAAAAAAAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A  L  A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "                 ", "      L     L    ", "                 ", "                 ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA         AAAC", " AA           AA ", "                 ", "CAAA         AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A  L  A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "    HHHHH   H    ", "    HHLHH  HLH   ", "    HHHHH   H    ", "     HHH         ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "     IIIIIII     ", "CAAA IIIIIII AAAC", "     IIIIIII     ", " AA  IIIIIII  AA ", "CAAA IIIIIII AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA BBBEBBBAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "    HHHHH   H    ", "    H   H  HLH   ", "    H   H   H    ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "     IDDDDDI     ", "CAAJ IIIIIII JAAC", " AAJ IIIIIII JAA ", "   J IFIIIFI J   ", "CAAJ IFIIIFI JAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IFFFIFFFI AA ", "CAAAIFFFIFFFIAAAC", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "CAAABFFFBFFFBAAAC", "  A           A  ", "  A           A  ", " AA           AA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIIIIII AA ", "    IIFIIIFII    ", "CAAAIIFIIIFIIAAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IIIIIIIII AA ", "CAAAIIIIIIIIIAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAABBBBBBBAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIFIIII AA ", "    IIIIFIIII    ", "CAAAIIIIFIIIIAAAC", "       EFE       ", "        F        ", "        F        ", "        F        ", "       EFE       ", "CAAAA BBFBB AAAAC", "  AAAAAA AAAAAA  ", "  AAAAAA AAAAAA  ", " AAAAAAA AAAAAAA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    HEEEH  H H   ", "    HEEEH  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "     IDDDDDI     ", "CAAJ IIIIIII JAAC", "   J IIFFFII J   ", " AAJ IIFFFII JAA ", "CAAJ IIFFFII JAAC", "       FFF       ", "       FFF       ", "       FFF       ", "       FFF       ", "       FFF       ", "CAAAA BFFFB AAAAC", "  A           A  ", "  A           A  ", " AA           AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIFIIII AA ", "    IIIIFIIII    ", "CAAAIIIIFIIIIAAAC", "       EFE       ", "        F        ", "        F        ", "        F        ", "       EFE       ", "CAAAA BBFBB AAAAC", "  AAAAAA AAAAAA  ", "  AAAAAA AAAAAA  ", " AAAAAAA AAAAAAA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IIIIIIIII AA ", "CAAAIIIIIIIIIAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAABBBBBBBAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIIIIII AA ", "    IIFIIIFII    ", "CAAAIIFIIIFIIAAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IFFFIFFFI AA ", "CAAAIFFFIFFFIAAAC", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "CAAABFFFBFFFBAAAC", "  A           A  ", "  A           A  ", " AA           AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "     IDDDDDI     ", "CAAJ IIIIIII JAAC", " AAJ IIIIIII JAA ", "   J IFIIIFI J   ", "CAAJ IFIIIFI JAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "     IIIIIII     ", "CAAA IIIIIII AAAC", "     IIIIIII     ", " AA  IIIIIII  AA ", "CAAA IIIIIII AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA BBB BBB AAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA         AAAC", " AA           AA ", "                 ", "CAAA         AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "            H    ", "           H H   ", "            H    ", "                 ")
                    .aisle("ADDA  DDDDD  ADDA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", " AA  A A A A  AA ", " AA A A A A A AA ", "CAAAAAAAAAAAAAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "            H    ", "           HEH   ", "            H    ", "                 ")
                    .aisle("AAAA  DDDDD  AAAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", "CAA           AA ", "CAA           AA ", "CAAAAAAAAAAAAAAAC", "CAA  A A A A  AAC", "CAA A A A A A AAC", "CAAAAAAAAAAAAAAAC", "BBBBAAAAAAAAABBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", "CAAAAAAAAAAAAAAAC", " AA  A     A  AA ", " AA  A     A  AA ", " AA  A     A  AA ", "BBBBGGGGGGGGGBBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  A A A A A A  A", "AEEAA A A A AAEEA", "AFFAAAAAAAAAAAFFA", "BFFBAAAAAAAAABFFB", " FF           FF ", " FF           FF ", " FF           FF ", "BFFB         BFFB", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  A A A A A A  A", "AEEAA A A A AAEEA", "AFFAAAAAAAAAAAFFA", "BFFB         BFFB", " FF           FF ", " FF           FF ", " FF           FF ", "BFFB         BFFB", "A  AAAAAAAAAAA  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAA          AAA", "AAAA          AAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", " AACCCCCCCCCCCAA ", " AAC         CAA ", " AAC         CAA ", " AACCCCCCCCCCCAA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.MOLECULAR_CASING.get()))
                    .where('B', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('C', frames(GTEMaterials.Inconel792))
                    .where('D', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('E', blocks(GTBlocks.MACHINE_CASING_UEV.get()))
                    .where('F', blocks(GTEBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('G', blocks(GTEBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('H', blocks(GTEBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('I', blocks(GTEBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('J', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('K', blocks(GTEBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('L', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('a', blocks(GTEBlocks.MOLECULAR_CASING.get())
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition HEAVY_ROLLING = multiblock("heavy_rolling", "重型辊轧机", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .allRotation()
            .recipe(GTERecipeTypes.CLUSTER_RECIPES)
            .recipe(GTERecipeTypes.ROLLING_RECIPES)
            .coilParallelTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("CCCCCCCCCCCCC", "CCCCCCCCCCCCC", " C         C ", " CCCCCCCCCCC ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("CPCCCCCCCCCPC", "CPDDDEEEDDDPC", " P         P ", " PPPPPPPPPPP ", "     HHH     ", "             ", "             ", "             ", "             ")
                    .aisle("CPPPPPPPPPPPC", "CPCCCCCCCCCPC", " P         P ", " PCCCCCCCCCP ", " PPPPPPPPPPP ", "     HHH     ", "     B B     ", "     B B     ", "     BBB     ")
                    .aisle("CPPPPPPPPPPPC", "CPQQQQQQQQQPC", " P         P ", " PQQQQQQQQQP ", " PPPPPPPPPPP ", "  KKKKHKKKK  ", "  KOOK KOOK  ", "  KOOK KOOK  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CP         PC", " P         P ", " P   Q  Q  P ", " PPPPPPPPPPP ", "  KKKKHKKKK  ", "  O  K K  O  ", "  O  K K  O  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CPQQQQQQQQQPC", " P         P ", " PQQQQQQQQQP ", " PPPQQPQQPPP ", "  KKQQHQQKK  ", "  ODDK KDDO  ", "  ODDK KDDO  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CP         PC", " P         P ", " P  QQ QQ  P ", " PPPPPPPPPPP ", "  KKKKHKKKK  ", "  KKKK KKKK  ", "  KKKK KKKK  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CPQQQQQQQQQPC", " P         P ", " PQQQQQQQQQP ", " PPPPPPPPPPP ", "     BHB     ", "     B B     ", "     B B     ", "     B B     ")
                    .aisle("CPPPPPPPPPPPC", "CPCCCCCCCCCPC", " P         P ", " PCCCCCCCCCP ", " PPPPPPPPPPP ", "      H      ", "             ", "             ", "     B B     ")
                    .aisle("CHHHHHHHHHHHC", "CHCCCCCCCCCHC", " H         H ", " H         H ", " HHHHHHHHHHH ", " HHHHHHHHHHH ", "             ", "             ", "     B B     ")
                    .aisle("HHHHHHHHHHHHH", "H           H", "HHOOOOOOOOOHH", " H         H ", " H         H ", " H         H ", " HHHHHHHHHHH ", "             ", "     B B     ")
                    .aisle("HHHHHHHHHHHHH", "HJJJJJJJJJJJH", "HHJJJJJJJJJHH", " H         H ", " H         H ", " H         H ", " HHHHHHHHHHH ", "   HHHHHH    ", "     B B     ")
                    .aisle("HHHHHHHHHHHHH", "HJJJJJJJJJJJH", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBBBBBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "DDDDDDDDDDDDD", " HKKKKKKKKKH ", "MNMMMMMMMMMNM", " NKKKKKKKKKN ", " H         H ", " HHHHHHHHHHH ", "     LLL     ")
                    .aisle("HHHHHHHHHHHHH", "H JJJJJJJJJJH", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBLLLBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "DDDDDDDDDDDDD", "EH         HE", "EH         HE", "EEEEEEEEEEEEE", " H         H ", " HHHHHHHHHHH ", "     LLL     ")
                    .aisle("HHHHHHHHHHHHH", "H           H", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBLLLBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "DDDDDDDDDDDDD", " HKKKKKKKKKH ", "MNMMMMMMMMMNM", " NKKKKKKKKKN ", " H         H ", " HHHHHHHHHHH ", "     LLL     ")
                    .aisle("HHHHHHHHHHHHH", "H           H", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBLLLBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "HHJJJJJJJJJHH", " H         H ", " H         H ", " H         H ", " H         H ", " HHHHHHHHHHH ", "             ")
                    .aisle("HHHHHHHHHHHHH", "HHHHHHHHHHHHH", " HCCCCCCCCCH ", " H         H ", " HCCCCCCCCCH ", " HHHHHHHHHHH ", " HIIIIHIIIIH ", " HHHHHHHHHHH ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " BCCC   CCCB ", " B         B ", "  AAAAAAAAA  ", "  HHHHHHHHH  ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " B         B ", " B         B ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " B         B ", " BCCCCCCCCCB ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", " A         A ", " ADDDEEEDDDA ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aA         AA", " A         A ", " A         A ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBGGGGGGGGGBA", "BBG       GBB", "BGGGGGGGGGGGB", "BGAAAAAAAAAGB", "BBBBBBBBBBBBB", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", " A         A ", " ADDDEEEDDDA ", " GAAAAAAAAAG ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aAGGGGGGGGGAA", "BAG       GAB", "BGGGGGGGGGGGB", "BGAAAAAAAAAGB", "BBBBBBBBBBBBB", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", " A         A ", " ADDDEEEDDDA ", " GAAAAAAAAAG ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBGGGGGGGGGBA", "BBG       GBB", "BGGGGGGGGGGGB", "BGAAAAAAAAAGB", "BBBBBBBBBBBBB", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aA         AA", "aA         A ", " A         A ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", "~A         A ", " ADDDEEEDDDA ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", "aB         B ", " BCCCCCCCCCB ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " B         B ", " BCCCCCCCCCB ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCC     CCBA", " B         B ", " B         B ", "             ", "             ", "             ", "             ", "             ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where('B', frames(GTMaterials.NaquadahAlloy))
                    .where('C', blocks(GTEBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTEBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('E', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('G', heatingCoils())
                    .where('H', blocks(GTEBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('I', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('J', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('K', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('L', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('M', blocks(GTBlocks.MACHINE_CASING_UHV.get()))
                    .where('N', blocks(GTEBlocks.AMPROSIUM_CASING.get()))
                    .where('O', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('P', blocks(GTEBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('Q', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('a', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get())
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/high_temperature_smelting_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition PHASE_CHANGE_CUBE = multiblock("phase_change_cube", "相变魔方", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .allRotation()
            .recipe(GTRecipeTypes.EXTRACTOR_RECIPES)
            .recipe(GTRecipeTypes.FLUID_SOLIDFICATION_RECIPES)
            .coilParallelTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("                   ", " AA    AAAAA    AA ", " A     AAAAA     A ", "                   ", "                   ", "                   ", "                   ", " AA             AA ", " AA             AA ", " AA             AA ", " AA             AA ", " AA             AA ", "                   ", "                   ", "                   ", "                   ", " A     AAAAA     A ", " AA    AAAAA    AA ", "                   ")
                    .aisle(" AA    AAAAA    AA ", "ABBBBBBB   BBBBBBBA", "ABCCCCCB   BCCCCCBA", " BCCDCCB   BCCDCCB ", " BCDEDCB   BCDEDCB ", " BCCDCCB   BCCDCCB ", " BCCCCCB   BCCCCCB ", "ABBBBBBB   BBBBBBBA", "A                 A", "A                 A", "A                 A", "ABBBBBBB   BBBBBBBA", " BCCCCCB   BCCCCCB ", " BCCDCCB   BCCDCCB ", " BCDEDCB   BCDEDCB ", " BCCDCCB   BCCDCCB ", "ABCCCCCB   BCCCCCBA", "ABBBBBBB   BBBBBBBA", " AA    AAAAA    AA ")
                    .aisle(" A     AAAAA     A ", "ABCCCCCB   BCCCCCBA", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", "ABCCCCCB   BCCCCCBA", "A                 A", "A                 A", "A                 A", "ABCCCCCB   BCCCCCBA", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", "ABCCCCCB   BCCCCCBA", " A     AAAAA     A ")
                    .aisle("                   ", " BCCDCCB   BCCDCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCFCCB   BCCFCCB ", "    F         F    ", "    F         F    ", "    F         F    ", " BCCFCCB   BCCFCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCDCCB   BCCDCCB ", "                   ")
                    .aisle("                   ", " BCDEDCB   BCDEDCB ", " C  E  C   C  E  C ", " D  E  FFFFF  E  D ", " EEEEEEEEEEEEEEEEE ", " D  E  FFFFF  E  D ", " C  E  C   C  E  C ", " BCFEFCB   BCFEFCB ", "   FEF       FEF   ", "   FEF       FEF   ", "   FEF       FEF   ", " BCFEFCB   BCFEFCB ", " C  E  C   C  E  C ", " D  E  FFFFF  E  D ", " EEEEEEEEEEEEEEEEE ", " D  E  FFFFF  E  D ", " C  E  C   C  E  C ", " BCDEDCB   BCDEDCB ", "                   ")
                    .aisle("                   ", " BCCDCCB   BCCDCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCFCCB   BCCFCCB ", "    F         F    ", "    F         F    ", "    F         F    ", " BCCFCCB   BCCFCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCDCCB   BCCDCCB ", "                   ")
                    .aisle("                   ", " BCCCCCB   BCCCCCB ", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     CGGGC     C ", " BCCCCCBHHHBCCCCCB ", "      GH   HG      ", "      GH   HG      ", "      GH   HG      ", " BCCCCCBHHHBCCCCCB ", " C     CGGGC     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", " BCCCCCB   BCCCCCB ", "                   ")
                    .aisle(" AA             AA ", "ABBBBBBB   BBBBBBBA", "ABCCCCCB   BCCCCCBA", " BCCFCCB   BCCFCCB ", " BCFEFCB   BCFEFCB ", " BCCFCCB   BCCFCCB ", " BCCCCCBHHHBCCCCCB ", " BBBBBBAAAAABBBBBB ", "      HAAAAAH      ", "      HAAAAAH      ", "      HAAAAAH      ", " BBBBBBAAAAABBBBBB ", " BCCCCCBHHHBCCCCCB ", " BCCFCCB   BCCFCCB ", " BCFEFCB   BCFEFCB ", " BCCFCCB   BCCFCCB ", "ABCCCCCB   BCCCCCBA", "ABBBBBBB   BBBBBBBA", " AA             AA ")
                    .aisle(" AA             AA ", "A                 A", "A                 A", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "      GH   HG      ", "      HAAAAAH      ", "      GA   A       ", "      GA   A       ", "      GA   A       ", "      HAAAAAH      ", "      GH   HG      ", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "A                 A", "A                 A", " AA             AA ")
                    .aisle(" AA             AA ", "A                 A", "A                 A", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "      GH   HG      ", "      HAAAAAH      ", "      GA   A       ", "      IA   A       ", "      GA   A       ", "      HAAAAAH      ", "      GH   HG      ", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "A                 A", "A                 A", " AA             AA ")
                    .aisle(" AA             AA ", "A                 A", "A                 A", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "      GH   HG      ", "      HAAAAAH      ", "      GA   A       ", "      GA   A       ", "      GA   A       ", "      HAAAAAH      ", "      GH   HG      ", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "A                 A", "A                 A", " AA             AA ")
                    .aisle(" AA             AA ", "ABBBBBBB   BBBBBBBA", "ABCCCCCB   BCCCCCBA", " BCCFCCB   BCCFCCB ", " BCFEFCB   BCFEFCB ", " BCCFCCB   BCCFCCB ", " BCCCCCBHHHBCCCCCB ", " BBBBBBAAAAABBBBBB ", "      HAAAAAH      ", "      HAAAAAH      ", "      HAAAAAH      ", " BBBBBBAAAAABBBBBB ", " BCCCCCBHHHBCCCCCB ", " BCCFCCB   BCCFCCB ", " BCFEFCB   BCFEFCB ", " BCCFCCB   BCCFCCB ", "ABCCCCCB   BCCCCCBA", "ABBBBBBB   BBBBBBBA", " AA             AA ")
                    .aisle("                   ", " BCCCCCB   BCCCCCB ", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     CGGGC     C ", " BCCCCCBHHHBCCCCCB ", "      GH   HG      ", "      GH   HG      ", "      GH   HG      ", " BCCCCCBHHHBCCCCCB ", " C     CGGGC     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", " BCCCCCB   BCCCCCB ", "                   ")
                    .aisle("                   ", " BCCDCCB   BCCDCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCFCCB   BCCFCCB ", "    F              ", "    F              ", "    F              ", " BCCFCCB   BCCFCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCDCCB   BCCDCCB ", "                   ")
                    .aisle("                   ", " BCDEDCB   BCDEDCB ", " C  E  C   C  E  C ", " D  E  FFFFF  E  D ", " EEEEEEEEEEEEEEEEE ", " D  E  FFFFF  E  D ", " C  E  C   C  E  C ", " BCFEFCB   BCFEFCB ", "   FEF        E    ", "   FEF        E    ", "   FEF        E    ", " BCFEFCB   BCFEFCB ", " C  E  C   C  E  C ", " D  E  FFFFF  E  D ", " EEEEEEEEEEEEEEEEE ", " D  E  FFFFF  E  D ", " C  E  C   C  E  C ", " BCDEDCB   BCDEDCB ", "                   ")
                    .aisle("                   ", " BCCDCCB   BCCDCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCFCCB   BCCFCCB ", "    F              ", "    F              ", "    F              ", " BCCFCCB   BCCFCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCDCCB   BCCDCCB ", "                   ")
                    .aisle(" A     AAAAA     A ", "ABCCCCCB   BCCCCCBA", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", "ABCCCCCB   BCCCCCBA", "A                 A", "A                 A", "A                 A", "ABCCCCCB   BCCCCCBA", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", "ABCCCCCB   BCCCCCBA", " A     AAAAA     A ")
                    .aisle(" AA    AAAAA    AA ", "ABBBBBBB   BBBBBBBA", "ABCCCCCB   BCCCCCBA", " BCCDCCB   BCCDCCB ", " BCDEDCB   BCDEDCB ", " BCCDCCB   BCCDCCB ", " BCCCCCB   BCCCCCB ", "ABBBBBBB   BBBBBBBA", "A                 A", "A                 A", "A                 A", "ABBBBBBB   BBBBBBBA", " BCCCCCB   BCCCCCB ", " BCCDCCB   BCCDCCB ", " BCDEDCB   BCDEDCB ", " BCCDCCB   BCCDCCB ", "ABCCCCCB   BCCCCCBA", "ABBBBBBB   BBBBBBBA", " AA    AAAAA    AA ")
                    .aisle("                   ", " AA    AAAAA    AA ", " A     AAAAA     A ", "                   ", "                   ", "                   ", "                   ", " AA             AA ", " AA             AA ", " AA             AA ", " AA             AA ", " AA             AA ", "                   ", "                   ", "                   ", "                   ", " A     AAAAA     A ", " AA    AAAAA    AA ", "                   ")
                    .where('A', blocks(GTEBlocks.MOLECULAR_CASING.get()))
                    .where('B', frames(GTMaterials.HastelloyC276))
                    .where('C', blocks(GTEBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('D', blocks(GTEBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('E', heatingCoils())
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('H', blocks(GTEBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('I', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition MEGA_CANNER = multiblock("mega_canner", "特大装罐机", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipe(GTRecipeTypes.CANNER_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GTEBlocks.LAFIUM_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "         ", "         ", "         ", "    B    ", "   DBD   ", "   D D   ", "         ", "         ", "   D D   ", "   D D   ", "    B    ", "    B    ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "    B    ", "   BBB   ", "   BBB   ", "   BDB   ", "  DDDDD  ", "  DEEED  ", "   EFE   ", "   EFE   ", "  DEEED  ", "  DDDDD  ", "   BDB   ", "   BBB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BBB   ", "   BCB   ", "   BCB   ", "  BDCDB  ", "  BDCDB  ", "   EEE   ", "   F F   ", "   F F   ", "   EEE   ", "  BDCDB  ", "  BDCDB  ", "  BBCBB  ", "   BBB   ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "   BBB   ", "   BDB   ", "  DDDDD  ", "  DEEED  ", "   EFE   ", "   EFE   ", "  DEEED  ", "  DDDDD  ", "   BDB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "         ", "    B    ", "   DBD   ", "   D D   ", "         ", "         ", "   D D   ", "   DDD   ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "    B    ", "         ", "         ", "         ", "         ", "         ", "         ", "    B    ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BBB   ", "   BCB   ", "   BBB   ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "   BBB   ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "    B    ", "   BBB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "    B    ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "         ", "    B    ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "    B    ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "         ", "         ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAGAAAA", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .where('A', blocks(GTEBlocks.LAFIUM_MECHANICAL_CASING.get())
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where('B', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('C', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('D', blocks(GTEBlocks.ENHANCE_HYPER_MECHANICAL_CASING.get()))
                    .where('E', blocks(GTBlocks.MACHINE_CASING_UV.get()))
                    .where('F', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('G', controller(blocks(definition.get())))
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/lafium_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_extractor"))
            .register();

    MultiblockMachineDefinition DISASSEMBLY = multiblock("disassembly", "拆解机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.DISASSEMBLY_RECIPES)
            .tooltipsText("Disassembleable: %s, %s, %s, %s, %s, %s", "可拆解: %s, %s, %s, %s, %s, %s", Component.translatable("gtceu.assembler"), Component.translatable("gtceu.precision_assembler"), Component.translatable("gtceu.assembler_module"), Component.translatable("gtceu.assembly_line"), Component.translatable("gtceu.circuit_assembly_line"), Component.translatable("gtceu.suprachronal_assembly_line"))
            .tooltipsText("Corresponding to the recipe time and energy consumption, items obtained from multiple recipes cannot be disassembled", "同对应配方时间与耗能，可由多个配方获取的物品无法拆解")
            .overclock()
            .block(GTEBlocks.PROCESS_MACHINE_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("AAA", "AAA", "AAA")
                    .aisle("BCB", "BDB", "CCC")
                    .aisle("BCB", "EFE", "GGG")
                    .aisle("HCB", "E#E", "GGG")
                    .aisle("BCB", "EFE", "GGG")
                    .aisle("BCB", "BDB", "CCC")
                    .aisle("AAA", "AAA", "AAA")
                    .where('A', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('C', blocks(GTEBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('D', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('E', frames(GTMaterials.StainlessSteel))
                    .where('F', blocks(Blocks.IRON_BARS))
                    .where('G', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where('B', blocks(GTEBlocks.PROCESS_MACHINE_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/process_machine_casing"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    MultiblockMachineDefinition ELEMENT_COPYING = multiblock("element_copying", "元素复制机", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipe(GTERecipeTypes.ELEMENT_COPYING_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GTEBlocks.MOLECULAR_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("     AAFAA     ", "     AAFAA     ", "      AAA      ")
                    .aisle("   AAAAAAAAA   ", "   AACCCCCAA   ", "     ADADA     ")
                    .aisle("  AAAAABAAAAA  ", "  ACCCABACCCA  ", "   AAE ~ EAA   ")
                    .aisle(" AAAAA   AAAAA ", " ACCAA   AACCA ", "  AE       EA  ")
                    .aisle(" AAA       AAA ", " ACA       ACA ", "  A         A  ")
                    .aisle("AAAA       AAAA", "ACCA       ACCA", " AE         EA ")
                    .aisle("AAA         AAA", "ACA         ACA", "AD           DA")
                    .aisle("FAB         BAF", "FCB         BCF", "AA           AA")
                    .aisle("AAA         AAA", "ACA         ACA", "AD           DA")
                    .aisle("AAAA       AAAA", "ACCA       ACCA", " AE         EA ")
                    .aisle(" AAA       AAA ", " ACA       ACA ", "  A         A  ")
                    .aisle(" AAAAA   AAAAA ", " ACCAA   AACCA ", "  AE       EA  ")
                    .aisle("  AAAAABAAAAA  ", "  ACCCABACCCA  ", "   AAE   EAA   ")
                    .aisle("   AAAAAAAAA   ", "   AACCCCCAA   ", "     ADADA     ")
                    .aisle("     AAFAA     ", "     AAFAA     ", "      AAA      ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.MOLECULAR_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(5).setPreviewCount(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTEPartAbility.THREAD_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('B', blocks(GTEBlocks.HYPER_CORE.get()))
                    .where('C', blocks(GTEBlocks.MOLECULAR_COIL.get()))
                    .where('D', blocks(GTEBlocks.HOLLOW_CASING.get()))
                    .where('E', blocks(GTEBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('F', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition ATOMIC_ENERGY_EXCITATION_PLANT = multiblock("atomic_energy_excitation_plant", "原子能激发工厂", CoilMultiblockMachine.createCoilMachine(false, true))
            .allRotation()
            .recipe(GTERecipeTypes.ATOMIC_ENERGY_EXCITATION_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(false, true, false)
            .parallelizableOverclock()
            .block(GTEBlocks.DIMENSIONALLY_TRANSCENDENT_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("                   ", "                   ", "                   ", "                   ", "         A         ", "        ABA        ", "        CCC        ", "        ABA        ", "         A         ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("DDD             DDD", "DDD     AAA     EEE", "EEE   AA A AA   EEE", "EEE  A   A   A  EEE", "EEE  A  AAA  A   B ", " A  A  AA#AA  A  A ", " AAAB  CC#CC  BAAA ", "    A  AA#AA  A    ", "     A  AAA  A     ", "     A   A   A     ", "      AA A AA      ", "        ABA        ", "                   ")
                    .aisle("DDD     AAA     DDD", "D#D   AAFGFAA   E#E", "E#E  AHHAHAHHA  E#E", "E#E AHAAAHAAAHA E#E", "E#E AHA AIA AHA A#A", "AHAAFA B###B AFAAHA", "AFHHGA C#J#C AGHHFA", " AAAFA B###B AFAAA ", "    AHA AIA AHA    ", "    AHAAAHAAAHA    ", "     AHHAHAHHA     ", "      AAFGFAA      ", "        AAA        ")
                    .aisle("D~D             DDD", "DDD     AAA     EEE", "EEE   AA A AA   EEE", "EEE  A   A   A  EEE", "EEE  A  AAA  A   B ", " A  A  AA#AA  A  A ", " AAAB  CC#CC  BAAA ", "    A  AA#AA  A    ", "     A  AAA  A     ", "     A   A   A     ", "      AA A AA      ", "        ABA        ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "         A         ", "        ABA        ", "        CCC        ", "        ABA        ", "         A         ", "                   ", "                   ", "                   ", "                   ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('B', blocks(GTEBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where('C', heatingCoils())
                    .where('D', blocks(GTEBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where('E', blocks(GTEBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('F', blocks(GTEBlocks.ACCELERATED_PIPELINE.get()))
                    .where('G', blocks(GTEBlocks.RESTRAINT_DEVICE.get()))
                    .where('H', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(GTEBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('J', blocks(GTEBlocks.AGGREGATIONE_CORE.get()))
                    .where(' ', any())
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/dimensionally_transcendent_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition INDUSTRIAL_FLOTATION_CELL = multiblock("industrial_flotation_cell", "工业浮选机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.FLOTATING_BENEFICIATION_RECIPES)
            .tooltipsText("Industrial Flotation Mining Pool", "工业级浮游选矿池")
            .parallelizableTooltips()
            .customTooltipsBuilder(true, false, false)
            .parallelizablePerfectOverclock()
            .block(GTEBlocks.HASTELLOY_N_75_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.BACK, RelativeDirection.UP)
                    .aisle("  AAA  ", " AAAAA ", "AAAAAAA", "AAAAAAA", "AAAAAAA", " AAAAA ", "  AAA  ")
                    .aisle("  A~A  ", " AADAA ", "AADDDAA", "ADDDDDA", "AADDDAA", " AADAA ", "  AAA  ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "       ", "   E   ", "  EEE  ", "   E   ", "       ", "       ")
                    .where('~', controller(blocks(definition.get())))
                    .where('D', blocks(GTEBlocks.HASTELLOY_N_75_GEARBOX.get()))
                    .where('B', blocks(GTEBlocks.FLOTATION_CELL.get()))
                    .where('A', blocks(GTEBlocks.HASTELLOY_N_75_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(PARALLEL_HATCH).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTEBlocks.HASTELLOY_N_75_PIPE.get()))
                    .where('E', blocks(GTEBlocks.HASTELLOY_N_75_CASING.get()))
                    .where(' ', any())
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/hastelloy_n_75_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    MultiblockMachineDefinition VACUUM_DRYING_FURNACE = multiblock("vacuum_drying_furnace", "真空干燥炉", CoilCustomParallelMultiblockMachine.createParallelCoil(m -> {
        if (m.getRecipeType() == GTERecipeTypes.DEHYDRATOR_RECIPES) {
            return Math.min(2147483647, 1 << (int) (m.gte$getTemperature() / 1200.0D));
        }
        return 1;
    }, true, false, false))
            .allRotation()
            .recipe(GTERecipeTypes.VACUUM_DRYING_RECIPES)
            .recipe(GTERecipeTypes.DEHYDRATOR_RECIPES)
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.2")
            .tooltipsKey("gtecore.machine.recipe.run", Component.translatable("gtceu.vacuum_drying"))
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.0")
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.1")
            .tooltipsKey("gtecore.machine.recipe.run", Component.translatable("gtceu.dehydrator"))
            .coilParallelTooltips()
            .recipeModifier((m, r) -> {
                if (m instanceof CoilCustomParallelMultiblockMachine machine) {
                    if (machine.getRecipeType() == GTERecipeTypes.DEHYDRATOR_RECIPES) {
                        return GTERecipeModifiers.overclocking(m, r);
                    } else {
                        return GTERecipeModifiers.ebfOverclock(m, r);
                    }
                }
                return null;
            })
            .block(GTEBlocks.RED_STEEL_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAA", "BBB", "BBB", "BBB", "AAA")
                    .aisle("AAA", "B B", "B B", "B B", "ACA")
                    .aisle("A~A", "BBB", "BBB", "BBB", "AAA")
                    .where('~', controller(blocks(definition.get())))
                    .where('C', abilities(MUFFLER).setExactLimit(1))
                    .where('A', blocks(GTEBlocks.RED_STEEL_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', heatingCoils())
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/red_steel_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition MOLTEN_CORE = multiblock("molten_core", "熔火之心", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipe(GTRecipeTypes.FLUID_HEATER_RECIPES)
            .coilParallelTooltips()
            .customTooltipsBuilder(true, true, true)
            .block(GTEBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("       AAA       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "                 ", "                 ")
                    .aisle("      AABAA      ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "                 ")
                    .aisle("    AACCCCCAA    ", "      CCCCC      ", "      CCCCC      ", "      DDDDD      ", "                 ", "      DDDDD      ", "      CCCCC      ", "      CCCCC      ", "       A A       ", "       ABA       ", "                 ")
                    .aisle("   ACCEEEEECCA   ", "    CCEEEEECC    ", "    CCEEEEECC    ", "    DDEEEEEDD    ", "      FFFFF      ", "    DDEEEEEDD    ", "    CCEEEEECC    ", "    CCEEEEECC    ", "      GGGGG      ", "       ABA       ", "                 ")
                    .aisle("  ACEEEEEEEEECA  ", "   CEEE   EEEC   ", "   CEEE   EEEC   ", "   DEEE   EEED   ", "    FFF   FFF    ", "   DEEE   EEED   ", "   CEEE   EEEC   ", "   CEEEEEEEEEC   ", "     GGGGGGG     ", "       BBB       ", "                 ")
                    .aisle("  ACEEEEEEEEECA  ", "   CE   H   EC   ", "   CE   H   EC   ", "   DE B H B ED   ", "    F   H   F    ", "   DE B H B ED   ", "   CE   H   EC   ", "   CEEEEEEEEEC   ", "    GGGGGGGGG    ", "      BGGGB      ", "                 ")
                    .aisle(" ACEEEEEEEEEEECA ", "  CEE       EEC  ", "  CEE       EEC  ", "  DEEBBBBBBBEED  ", "   FF       FF   ", "  DEEBBBBBBBEED  ", "  CEE       EEC  ", "  CEEEEEEEEEEEC  ", "   GGGGEEEGGGG   ", "     BGIIIGB     ", "                 ")
                    .aisle("AACEEEEEEEEEEECAA", "AACE    J    ECAA", "AACE    J    ECAA", "AADE  B J B  EDAA", "AA F    J    F AA", "AADE  B J B  EDAA", "AACE    J    ECAA", "AACEEEE J EEEECAA", "AAAGGGEEJEEGGGAAA", " AAABGIIIIIGBAAA ", "                 ")
                    .aisle("ABCEEEEEEEEEEECBA", " BCE H J J H ECB ", " BCE H J J H ECB ", " BDE HBJ JBH EDB ", " B F H J J H F B ", " BDE HBJ JBH EDB ", " BCE H J J H ECB ", " BCEEEEJ JEEEECB ", " B GGGEJ JEGGG B ", " BBBBGIIKIIGBBBB ", "                 ")
                    .aisle("AACEEEEEEEEEEECAA", "AACE    J    ECAA", "AACE    J    ECAA", "AADE  B J B  EDAA", "AA F    J    F AA", "AADE  B J B  EDAA", "AACE    J    ECAA", "AACEEEE J EEEECAA", "AAAGGGEEJEEGGGAAA", " AAABGIIIIIGBAAA ", "                 ")
                    .aisle(" ACEEEEEEEEEEECA ", "  CEE       EEC  ", "  CEE       EEC  ", "  DEEBBBBBBBEED  ", "   FF       FF   ", "  DEEBBBBBBBEED  ", "  CEE       EEC  ", "  CEEEEEEEEEEEC  ", "   GGGGEEEGGGG   ", "     BGIIIGB     ", "                 ")
                    .aisle("  ACEEEEEEEEECA  ", "   CE   H   EC   ", "   CE   H   EC   ", "   DE B H B ED   ", "    F   H   F    ", "   DE B H B ED   ", "   CE   H   EC   ", "   CEEEEEEEEEC   ", "    GGGGGGGGG    ", "      BGGGB      ", "                 ")
                    .aisle("  ACEEEEEEEEECA  ", "   CEEE   EEEC   ", "   CEEE   EEEC   ", "   DEEE   EEED   ", "    FFF   FFF    ", "   DEEE   EEED   ", "   CEEE   EEEC   ", "   CEEEEEEEEEC   ", "     GGGGGGG     ", "       BBB       ", "                 ")
                    .aisle("   ACCEEEEECCA   ", "    CCEEEEECC    ", "    CCEEEEECC    ", "    DDEEEEEDD    ", "      FFFFF      ", "    DDEEEEEDD    ", "    CCEEEEECC    ", "    CCEEEEECC    ", "      GGGGG      ", "       ABA       ", "                 ")
                    .aisle("    AACCCCCAA    ", "      CCCCC      ", "      CCCCC      ", "      DDDDD      ", "                 ", "      DDDDD      ", "      CCCCC      ", "      CCCCC      ", "       A A       ", "       ABA       ", "                 ")
                    .aisle("      AABAA      ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "                 ")
                    .aisle("       AAA       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "                 ", "                 ")
                    .where('A', blocks(GTEBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('B', frames(GTEMaterials.Inconel792))
                    .where('C', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTEBlocks.PI_HIGH_TEMPERATURE_INSULATION_MECHANICAL_HOUSING.get()))
                    .where('E', blocks(GTEBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GTEBlocks.MOLECULAR_CASING.get()))
                    .where('H', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(GTEBlocks.IRIDIUM_CASING.get())
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('J', heatingCoils())
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/iridium_casing"), GTECore.id("block/machines/molten_core"))
            .register();

    MultiblockMachineDefinition ELECTRIC_IMPLOSION_COMPRESSOR = multiblock("electric_implosion_compressor", "电力聚爆压缩机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipe(GTERecipeTypes.ELECTRIC_IMPLOSION_COMPRESSOR_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXXX", "F###F", "F###F", "F###F", "F###F", "F###F", "F###F", "XXXXX")
                    .aisle("XXXXX", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "XXXXX")
                    .aisle("XXXXX", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "XXMXX")
                    .aisle("XXXXX", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "XXXXX")
                    .aisle("XXSXX", "F###F", "F###F", "F###F", "F###F", "F###F", "F###F", "XXXXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X',
                            blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()).setMinGlobalLimited(40)
                                    .or(GTEPredicates.autoAccelerateAbilities(definition.getRecipeTypes()))
                                    .or(autoAbilities(true, false, true)))
                    .where('P', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('G', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', frames(GTMaterials.TungstenSteel))
                    .where('A', air())
                    .where('#', any())
                    .where('M', blocks(GTMachines.MUFFLER_HATCH[GTValues.LuV].get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"),
                    GTCEu.id("block/multiblock/implosion_compressor"))
            .register();

    MultiblockMachineDefinition STELLAR_FORGE = multiblock("stellar_forge", "恒星炎炀锻炉", StellarForgeMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.STELLAR_FORGE_RECIPES)
            .tooltipsText("Continue running the recipe after the first run, and the subsequent recipe duration will be reduced by 50%", "在第一次运行后继续运行配方，后续配方时间将减少50%")
            .tooltipsText("If there is a power shortage during the operation of the recipe, a huge explosion will occur.", "如果在配方运行时供电不足，将产生巨大爆炸")
            .alwaysTryModifyRecipe(true)
            .block(GCYMBlocks.CASING_ATOMIC)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("               ", "      bbb      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      bbb      ", "               ")
                    .aisle("      b b      ", "     ccccc     ", "               ", "               ", "               ", "               ", "               ", "     ccccc     ", "      b b      ")
                    .aisle("      b b      ", "   cc     cc   ", "               ", "               ", "               ", "               ", "               ", "   cc     cc   ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "     ccccc     ", "               ", "               ", "               ", "     ccccc     ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "    c ddd c    ", "      ddd      ", "      ddd      ", "      ddd      ", "    c ddd c    ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", " c    ddd    c ", "   c d   d c   ", "     d   d     ", "     d   d     ", "     d   d     ", "   c d   d c   ", " c    ddd    c ", "      b b      ")
                    .aisle(" bbbbbbbbbbbbb ", "bc   ddddd   cb", "b  cd     dc  b", "b   d     d   b", "b   d     d   b", "b   d     d   b", "b  cd     dc  b", "bc   ddddd   cb", " bbbbbbbbbbbbb ")
                    .aisle("      bbb      ", "bc   ddddd   cb", "   cd     dc   ", "    d     d    ", "    d     d    ", "    d     d    ", "   cd     dc   ", "bc   ddddd   cb", "      bbb      ")
                    .aisle(" bbbbbbbbbbbbb ", "bc   ddddd   cb", "b  cd     dc  b", "b   d     d   b", "b   d     d   b", "b   d     d   b", "b  cd     dc  b", "bc   ddddd   cb", " bbbbbbbbbbbbb ")
                    .aisle("      b b      ", " c    ddd    c ", "   c d   d c   ", "     d   d     ", "     d   d     ", "     d   d     ", "   c d   d c   ", " c    ddd    c ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "    c ddd c    ", "      ddd      ", "      ddd      ", "      ddd      ", "    c ddd c    ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "     ccccc     ", "               ", "               ", "               ", "     ccccc     ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", "   cc     cc   ", "               ", "               ", "               ", "               ", "               ", "   cc     cc   ", "      b b      ")
                    .aisle("      b b      ", "     ccccc     ", "               ", "               ", "               ", "               ", "               ", "     ccccc     ", "      b b      ")
                    .aisle("               ", "      bab      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      bbb      ", "               ")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GCYMBlocks.CASING_ATOMIC.get())
                            .setMinGlobalLimited(150)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.FUSION_COIL.get()))
                    .where('d', GTEPredicates.tierBlock(SCMAP, STELLAR_CONTAINMENT_TIER))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/atomic_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition COMPONENT_ASSEMBLY_LINE = multiblock("component_assembly_line", "部件装配线", TierCasingMultiblockMachine.createMachine(COMPONENT_ASSEMBLY_CASING_TIER))
            .allRotation()
            .recipe(GTERecipeTypes.COMPONENT_ASSEMBLY_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(false, true, false)
            .parallelizableOverclock()
            .block(GTEBlocks.IRIDIUM_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "A  NNN  A", "A       A", "A       A", "A       A", "A       A", "AA     AA", " AAAAAAA ", "         ", "         ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GHAAAHG ", "         ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F  M M  F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "AL     LA", "AL AAA LA", "AL     LA", "AL     LA", "AL  J  LA", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "AL     LA", "AL AAA LA", "AL     LA", "AL     LA", "AL  J  LA", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "AL     LA", "AL AAA LA", "AL     LA", "AL     LA", "AL  J  LA", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GHAAAHG ", "         ")
                    .aisle("AAAAAAAAA", "A  B B  A", "A  CCC  A", "A  CCC  A", "A       A", "A       A", "AA DDD AA", " AAD~DAA ", "   DDD   ", "         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('B', frames(GTMaterials.TungstenSteel)
                            .or(abilities(IMPORT_ITEMS))
                            .or(abilities(IMPORT_FLUIDS)))
                    .where('C', blocks(GTEBlocks.IRIDIUM_CASING.get())
                            .or(abilities(IMPORT_ITEMS))
                            .or(abilities(IMPORT_FLUIDS)))
                    .where('D', blocks(GTEBlocks.IRIDIUM_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('F', blocks(GTEBlocks.HSSS_BOROSILICATE_GLASS.get()))
                    .where('G', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('H', blocks(GTEBlocks.IRIDIUM_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1)))
                    .where('I', frames(GTEMaterials.HastelloyN))
                    .where('J', blocks(GTEBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('K', GTEPredicates.tierBlock(CALMAP, COMPONENT_ASSEMBLY_CASING_TIER))
                    .where('L', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('M', frames(GTMaterials.TungstenSteel))
                    .where('N', blocks(GTEBlocks.IRIDIUM_CASING.get())
                            .or(abilities(EXPORT_ITEMS)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    MultiblockMachineDefinition ADVANCED_INTEGRATED_ORE_PROCESSOR = multiblock("advanced_integrated_ore_processor", "进阶集成矿石处理厂", CrossRecipeMultiblockMachine.createParallel(false, false, m -> Integer.MAX_VALUE - 1))
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.INTEGRATED_ORE_PROCESSOR)
            .tooltipsKey("gtecore.machine.integrated_ore_processor.tooltip.0")
            .tooltipsKey("gtceu.universal.tooltip.parallel", Integer.MAX_VALUE - 1)
            .customTooltipsBuilder(true, true, true)
            .block(GTEBlocks.DIMENSION_INJECTION_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle(" ABBBBBBBBBBBBBA ", " A   BCCCCCB   A ", " A   BCCCCCB   A ", " A   BCCCCCB   A ", " A   BBBBBBB   A ", "      BBBBB      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAEEEEEEEEEEEEEAA", "AAFFFFFFFFFFFFFAA", "AAFFFFFFFFFFFFFAA", "AAFFFFFFFFFFFFFAA", "AA   BBBBBBB   AA", "      BBBBB      ", "       BBB       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "      BBIBB      ", "       BBB       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "        I        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  FFFFFJIJFFFFF  ", "    FFFJJJFFF    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   FFF     FFF   ", "                 ")
                    .aisle("AAGGGGGGGGGGGGGAA", "AAFFFFF   FFFFFAA", "AAFFIFF   FFIFFAA", "AAFFFFF   FFFFFAA", "AAGGGGGGGGGGGGGAA", "  LLLLL I LLLLL  ", "  RQQQR   SKKKS  ", "  R   R   S   S  ", "  O J O   O   O  ", "  O   O   O   O  ", "  O J O   O   O  ", "  O   O   O   O  ", "  O J O   O   O  ", "  R   R   S   S  ", "  RQQQR   SKKKS  ", "  FFFFF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  RQQQR   SKKKS  ", "  R   R   S Q S  ", "  RJJJR   O J O  ", "  R   R   O J O  ", "  RJJJR   O J O  ", "  R   R   O J O  ", "  RJJJR   O J O  ", "  R   R   S Q S  ", "  RQQQR   SKKKS  ", "  FFFFF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  RQQQR   SKKKS  ", "  R   R   S   S  ", "  O J O   O   O  ", "  O   O   O   O  ", "  O J O   O   O  ", "  O   O   O   O  ", "  O J O   O   O  ", "  R   R   S   S  ", "  RQQQR   SKKKS  ", "  FFFFF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   FFF     FFF   ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  FFFFFJIJFFFFF  ", "    FFFJJJFFF    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAGGGGGGGGGGGGGAA", "AAFFFFF   FFFFFAA", "AAFFIFF   FFIFFAA", "AAFFFFF   FFFFFAA", "AAGGGGGGGGGGGGGAA", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   LLL     PPP   ", "   OHO     PPP   ", "   OHO    PPPPP  ", "   QHQ     PPP   ", "   OHO    PPPPP  ", "   OHO     PPP   ", "   QHQ    PPPPP  ", "   OHO     PPP   ", "   OHO     PPP   ", "   FFF     FFF   ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  LHHHL   PPPPP  ", "  O   O    OOO   ", "  O   O   POOOP  ", "  Q   Q    OOO   ", "  O   O   POOOP  ", "  O   O    OOO   ", "  Q   Q   POOOP  ", "  O   O    OOO   ", "  O   O   PPPPP  ", "  FHHHF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  LHHHL   PPIPP  ", "  H I H    OIO   ", "  H I H   POIOP  ", "  H I H    OIO   ", "  H I H   POIOP  ", "  H I H    OIO   ", "  H I H   POIOP  ", "  H I H    OIO   ", "  H I H   PPIPP  ", "  FHHHF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  LHHHL   PPPPP  ", "  O   O    OOO   ", "  O   O   POOOP  ", "  Q   Q    OOO   ", "  O   O   POOOP  ", "  O   O    OOO   ", "  Q   Q   POOOP  ", "  O   O    OOO   ", "  O   O   PPPPP  ", "  FHHHF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   LLL     PPP   ", "   OHO     PPP   ", "   OHO    PPPPP  ", "   QHQ     PPP   ", "   OHO    PPPPP  ", "   OHO     PPP   ", "   QHQ    PPPPP  ", "   OHO     PPP   ", "   OHO     PPP   ", "   FFF     FFF   ", "                 ")
                    .aisle("AAGGGGGGGGGGGGGAA", "AAFFFFF   FFFFFAA", "AAFFIFF   FFIFFAA", "AAFFFFF   FFFFFAA", "AAGGGGGGGGGGGGGAA", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  FFFFFJIJFFFFF  ", "    FFFJJJFFF    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   MHM    HHHHH  ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   FFF     FFF   ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  MMMMM   HHJ H  ", "  MJNJM   OJ  O  ", "  OJ JO   O   O  ", "  OJ JO   O  JO  ", "  OJ JO   O J O  ", "  OJ JO   OJ  O  ", "  OJ JO   O   O  ", "  MJNJM   O  JO  ", "  MMMMM   O J O  ", "  FFFFF   FJ  F  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  MMMMM   H   H  ", "  MNNNM   O   O  ", "  O N O   OJ JO  ", "  O N O   O   O  ", "  O   O   O   O  ", "  O N O   O   O  ", "  O N O   OJ JO  ", "  MNNNM   O   O  ", "  MMMMM   O   O  ", "  FFFFF   F   F  ", "   FFF     FFF   ")
                    .aisle("AAGGGGGGGGGGGGGAA", "AAFFFFF   FFFFFAA", "AAFFIFF   FFIFFAA", "AAFFFFF   FFFFFAA", "AAGGGGGGGGGGGGGAA", "  LLLLL I LLLLL  ", "  MMMMM   H J H  ", "  MJNJM   O  JO  ", "  OJ JO   O   O  ", "  OJ JO   OJ  O  ", "  OJ JO   O J O  ", "  OJ JO   O  JO  ", "  OJ JO   O   O  ", "  MJNJM   OJ  O  ", "  MMMMM   O J O  ", "  FFFFF   F  JF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   MHM    HHHHH  ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   FFF     FFF   ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  FFFFFJIJFFFFF  ", "    FFFJJJFFF    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "        I        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "      BBIBB      ", "       BBB       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAEEEEEEEEEEEEEAA", "AAFFFFFFFFFFFFFAA", "AAFFFFFFFFFFFFFAA", "AAFFFFFFFFFFFFFAA", "AA   BBBBBBB   AA", "      BBBBB      ", "       BBB       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle(" ABBBBBBBBBBBBBA ", " A   BCCCCCB   A ", " A   BCCDCCB   A ", " A   BCCCCCB   A ", " A   BBBBBBB   A ", "      BBBBB      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .where('A', blocks(GTEBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('C', blocks(GTEBlocks.DIMENSION_INJECTION_CASING.get()).or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes())))
                    .where('D', controller(blocks(definition.get())))
                    .where('E', blocks(GTEBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('F', blocks(GCYMBlocks.CASING_ATOMIC.get()))
                    .where('G', blocks(GTEBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('H', blocks(GTEBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('I', blocks(GTEBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('J', frames(GTEMaterials.Mithril))
                    .where('K', blocks(GTEBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('L', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('M', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('N', blocks(GTEBlocks.HOLLOW_CASING.get()))
                    .where('O', blocks(GTEBlocks.AMPROSIUM_BOROSILICATE_GLASS.get()))
                    .where('P', blocks(GTEBlocks.HASTELLOY_N_75_CASING.get()))
                    .where('Q', blocks(GTEBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('R', blocks(GTEBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('S', blocks(GTEBlocks.QUARK_EXCLUSION_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/dimension_injection_casing"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    MultiblockMachineDefinition MAGE_ASSEMBLER = multiblock("mage_assembler", "综合组装车间", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipe(GTRecipeTypes.ASSEMBLER_RECIPES)
            .parallelizableTooltips()
            .customTooltipsBuilder(true, true, true)
            .parallelizablePerfectOverclock()
            .block(GTEBlocks.IRIDIUM_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "   A   AA AA   A   ", "   A   AA AA   A   ", "       AA AA       ", "                   ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCC", " CCCCCCCCCCCCCCCCC ", " CCCCCCCCCCCCCCCCC ", "  CCCCCCCCCCCCCCC  ", "  CCCCCCCCCCCCCCC  ", "  ACCCCCCCCCCCCCA  ", "   CCCCCCCCCCCCC   ", "   A CCCCCCCCC A   ", "       AA AA       ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "FCJ             JCF", "FCT             TCF", "FCJ             JCF", " FT             TF ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  GCCC       CCCG  ", "   GGGCCCJCCCGGG   ", "     GGGGJGGGG     ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "CCJ             JCC", "CCT             TCC", "CCJ             JCC", " CT             TC ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  LCCC       CCCL  ", "   LGGCCCJCCCGGL   ", "     GLGLJLGLG     ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "FCJ             JCF", "FCT             TCF", "FCJ             JCF", " FT             TF ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  LCCC       CCCL  ", "   LGGCCCJCCCGGL   ", "     GLGLJLGLG     ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CCCCCCCCCCCCCCCCCCC", "CCJ             JCC", "CCT             TCC", "CCJ             JCC", " CT             TC ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  GCCC       CCCG  ", "   GGGCCCJCCCGGG   ", "     GGGGJGGGG     ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCT   TCCCCCCC", " JCCCCCT   TCCCCCJ ", "CCCCCCCT   TCCCCCCC", " CCCCCCT   TCCCCCC ", " CCCCCCCCCCCCCCCCC ", "  CCCCCCCCCCCCCCC  ", "  CCCCCCCCCCCCCCC  ", "   CCCCCCCCCCCCC   ", "   CCCCCCCCCCCCC   ", "     CCCCCCCCC     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC I   ICCCI   I CC", "CC I   I H I   I CC", " J I   I   I   I J ", "CC I   I   I   I CC", " CCI   I   I   ICC ", " EJJ   I   I   JJE ", " EEJ   I   I   JEE ", "  EJIIIIIIIIIIIJE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC    O CCC O    CC", "CC    O  H  O    CC", " J    O R R O    J ", "CC    OFFFFFO    CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC    E     E    CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC I    CCC    I CC", "CC I     H     I CC", " J I           I J ", "CC I  E     E  I CC", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC    O CCC O    CC", "CC    O  H  O    CC", " J    O R R O    J ", "CC    OFFFFFO    CC", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC   DS CCC SD   CC", "CC   DS  H  SD   CC", " J    S     S    J ", "CC    S     S    CC", " CC   SSSSSSS   CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC I DE CCC ED I CC", "CC I DE  H  ED I CC", " J I DE     ED I J ", "CC I DE     ED I CC", " CCI DEEEEEEED ICC ", " EJJ  DDDDDDD  JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC   DD CCC DD   CC", "CC   DD  H  DD   CC", "CC    J     J    CC", "CC    J     J    CC", " CC   DDJJJDD   CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "DC   DD CCC DD   CD", "DC   DD  H  DD   CD", "CC    J     J    CC", "EC    J     J    CE", " CC   DDJJJDD   CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "DC   DD CCC DD   CD", "DC   DD  H  DD   CD", "CC    J     J    CC", "EC    J     J    CE", " CC   DDJJJDD   CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC   DE CCC ED   CC", "CC   DE  H  ED   CC", "CC   DE     ED   CC", "CC   DE     ED   CC", " CC  DEEEEEEED  CC ", " DD   DDDDDDD   DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C I DS CCC SD I C ", "SG I DS  H  SD I GS", " G I  S     S  I G ", "SC I  S     S  I CS", " CCI  SSSSSSS  ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", " C      CCC      C ", "SG       H       GS", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", " C      CCC      C ", "SG       H       GS", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C      CCC      C ", "SG       H       GS", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "SC   L  CCC  L   CS", "SG   L   H   L   GS", " G   L  R R  L   G ", "SC   L  R R  L   CS", " CC  FLFR RFLF  CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C I    CCC    I C ", " G I     H     I G ", " G I           I G ", "SC I           I CS", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", " C      CCC      C ", " G       H       G ", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "SC      CCC      CS", "SG       H       GS", "SG               GS", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C   Q  CCC  Q   C ", " G   Q   H   Q   G ", " G   Q  R R  Q   G ", " C   FRRR RRRF   C ", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C      CCC      C ", " G       H       G ", " G               G ", " C               C ", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC I Q  CCC  Q I CB", "CC I Q   H   Q I CC", "CC I Q  R R  Q I CC", "CC I FRRR RRRF I CC", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       D ", " D               D ", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       D ", " D               D ", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC    O CCC O    CB", "ED    O  H  O    DE", "ED    FF   FF    DE", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC      CCC      CB", " D       H       DB", " D               DB", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC I  O CCC O  I CB", " D I  O  H  O  I DB", " D I  FF   FF  I DB", "JC I           I CJ", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       D~", " D               DB", "JC               CJ", " CC             CC ", " DD             DD ", " DD    F   F    DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       DB", " D               DB", "JC     LM ML     CJ", " CC    L   L    CC ", " DD    L   L    DD ", " DD    CCCCC    DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", "ED       H       DE", "ED               DE", "JC               CJ", " CC             CC ", " DD             DD ", " DD    F   F    DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       D ", " D               D ", "JC               CJ", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC I   ICCCI   I CB", " D I   I H I   I D ", " D I   I   I   I D ", "JC I   I   I   I CJ", " CCI   I   I   ICC ", " EJJ   I   I   JJE ", " EEJ   I   I   JEE ", "  EJIIIIIIIIIIIJE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", "CC       H       CC", "CC               CC", "CC               CC", " CCD           DCC ", " FDD           DDF ", "  FD           DF  ", "   FD         DF   ", "    FDDDDDDDDDF    ", "     FCCCCCCCF     ", "       CCCCC       ", "                   ")
                    .aisle("AAAAAGGGDDDGGGAAAAA", " CC             CC ", " DD             DD ", " DD             DD ", " CC             CC ", " CCD           DCC ", " CDD           DDC ", "  CD           DC  ", "   CD         DC   ", "    CDDDDDDDDDC    ", "     CCCCCCCCC     ", "       CCCCC       ", "                   ")
                    .aisle(" AAAAAAAAAAAAAAAAA ", "  CCFDCC   CCDFCC  ", "  DDFDCC   CCDFDD  ", "  DDFDCC   CCDFDD  ", "  CCFDCC   CCDFCC  ", "  DDFDCCCCCCCDFDD  ", "  DDFDDDDDDDDDFDD  ", "  EDFDDDDDDDDDFDE  ", "   EDFFFFFFFFFDE   ", "    EDDDDDDDDDE    ", "     ECCCCCCCE     ", "        CCC        ", "                   ")
                    .aisle("  AAAAAAAAAAAAAAA  ", "   C  CC   CC  C   ", "   D  CC   CC  D   ", "   D  CC   CC  D   ", "   C  CC   CC  C   ", "   C  CCCCCCC  C   ", "   C           C   ", "   CC         CC   ", "    CCEEEEEEECC    ", "     CCCCCCCCC     ", "        CCC        ", "                   ", "                   ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTEBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('B', blocks(GTEBlocks.IRIDIUM_CASING.get())
                            .or(GTEPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTEBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTEBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('E', frames(GTMaterials.HSLASteel))
                    .where('F', blocks(GTEBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('G', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('H', blocks(GTEBlocks.SPACETIME_ASSEMBLY_LINE_UNIT.get()))
                    .where('I', frames(GTMaterials.StainlessSteel))
                    .where('J', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('K', blocks(GTBlocks.LAMPS.get(DyeColor.WHITE).get()))
                    .where('L', blocks(GTEBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('M', blocks(GTEBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('O', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('P', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('Q', blocks(GTEBlocks.MACHINE_CASING_CIRCUIT_ASSEMBLY_LINE.get()))
                    .where('R', blocks(Blocks.IRON_BARS))
                    .where('S', blocks(GTEBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('T', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();
}
