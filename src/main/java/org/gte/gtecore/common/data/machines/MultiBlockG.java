package org.gte.gtecore.common.data.machines;

import org.gte.gtecore.GTECore;
import org.gte.gtecore.api.GTEValues;
import org.gte.gtecore.api.data.GTEDimensions;
import org.gte.gtecore.api.machine.multiblock.CoilMultiblockMachine;
import org.gte.gtecore.api.machine.multiblock.ElectricMultiblockMachine;
import org.gte.gtecore.api.machine.part.GTEPartAbility;
import org.gte.gtecore.api.pattern.GTEPredicates;
import org.gte.gtecore.client.renderer.machine.ArrayMachineRenderer;
import org.gte.gtecore.client.renderer.machine.CustomPartRenderer;
import org.gte.gtecore.common.data.*;
import org.gte.gtecore.common.machine.multiblock.electric.ChiselMachine;
import org.gte.gtecore.common.machine.multiblock.electric.DrawingTowerMachine;
import org.gte.gtecore.common.machine.multiblock.electric.SuperMolecularAssemblerMachine;
import org.gte.gtecore.common.machine.multiblock.electric.TreeGrowthSimulator;
import org.gte.gtecore.common.machine.multiblock.electric.adventure.BossSummonerMachine;
import org.gte.gtecore.common.machine.multiblock.electric.processing.ProcessingArrayMachine;
import org.gte.gtecore.common.machine.multiblock.electric.space.SatelliteControlCenterMachine;
import org.gte.gtecore.common.machine.multiblock.electric.voidseries.DrillingControlCenterMachine;
import org.gte.gtecore.common.machine.multiblock.electric.voidseries.VoidTransporterMachine;
import org.gte.gtecore.common.machine.multiblock.noenergy.AlgaeFarmMachine;
import org.gte.gtecore.common.machine.multiblock.noenergy.DroneControlCenterMachine;
import org.gte.gtecore.common.machine.multiblock.storage.WirelessDimensionRepeaterMachine;
import org.gte.gtecore.common.machine.multiblock.storage.WirelessEnergySubstationMachine;
import org.gte.gtecore.config.GTEConfig;
import org.gte.gtecore.utils.RegistriesUtils;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTMachines;
import com.gregtechceu.gtceu.common.data.GTMaterials;
import com.gregtechceu.gtceu.common.data.GTRecipeTypes;
import com.gregtechceu.gtceu.common.machine.multiblock.primitive.CokeOvenMachine;

import net.minecraft.core.BlockPos;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.phys.shapes.Shapes;

import com.enderio.EnderIO;
import com.hepdd.gtmthings.data.CreativeMachines;
import com.hepdd.gtmthings.data.CustomMachines;
import earth.terrarium.adastra.common.registry.ModBlocks;

import static com.gregtechceu.gtceu.api.GTValues.*;
import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gregtechceu.gtceu.common.data.GTBlocks.CASING_COKE_BRICKS;
import static com.gregtechceu.gtceu.common.data.GTMachines.COKE_OVEN_HATCH;
import static com.gregtechceu.gtceu.common.data.GTRecipeTypes.DUMMY_RECIPES;
import static org.gte.gtecore.utils.register.MachineRegisterUtils.multiblock;
import static org.gte.gtecore.utils.register.MachineRegisterUtils.registerTieredMultis;

public interface MultiBlockG {

    static void init() {}

    MultiblockMachineDefinition BLOOK_TEXT = GTEConfig.INSTANCE.enablePrimitiveVoidOre ? multiblock("blook_test",
            "方块测试", ElectricMultiblockMachine::new)
            .allRotation().recipe(GTERecipeTypes.PRIMITIVE_VOID_ORE_RECIPES).block(GTEBlocks.PHASE_CHANGE_BIOCOMPUTER_COOLING_VENTS)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP,
                    RelativeDirection.BACK)
                    .aisle("AAAAAAA").aisle("AA AAAA").aisle("A   AAA").aisle("AA AAAA").aisle("AMFNAAA")
                    .where('A', blocks(GTEBlocks.MANASTEEL_CASING.get()))
                    .where('M', blocks(CreativeMachines.CREATIVE_FLUID_INPUT_HATCH.get()))
                    .where('N', blocks(CustomMachines.ME_EXPORT_BUFFER.get()))
                    .where('F', controller(blocks(definition.get()))).where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"),
                    GTCEu.id("block/multiblock/multi_furnace"))
            .register() : null;

    MultiblockMachineDefinition LARGE_COKE_OVEN = multiblock("large_coke_oven", "大型焦炉", CokeOvenMachine::new)
            .nonYAxisRotation()
            .tooltipsKey("gtceu.universal.tooltip.parallel", 16)
            .recipeModifiers(GTERecipeModifiers.accurateParallel(16))
            .recipe(GTRecipeTypes.COKE_OVEN_RECIPES)
            .block(GTBlocks.CASING_COKE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "CAAAC", "CAAAC", "CAAAC")
                    .aisle("AAAAA", "AA AA", "AA AA", "AAAAA")
                    .aisle("AAAAA", "AA AA", "A   A", "AAAAA")
                    .aisle("AAAAA", "AA AA", "A   A", "AAAAA")
                    .aisle("AAAAA", "AA AA", "AA AA", "AAAAA")
                    .aisle("AAAAA", "CAAAC", "CABAC", "CAAAC")
                    .where('A', blocks(CASING_COKE_BRICKS.get()).or(blocks(COKE_OVEN_HATCH.get()).setMaxGlobalLimited(5)))
                    .where('B', controller(blocks(definition.get())))
                    .where(' ', air())
                    .where('C', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_coke_bricks"), GTCEu.id("block/multiblock/coke_oven"))
            .register();

    MultiblockMachineDefinition CRYSTALLIZATION_CHAMBER = multiblock("crystallization_chamber", "结晶器", CoilMultiblockMachine.createCoilMachine(false, true))
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.CRYSTALLIZATION_RECIPES)
            .overclock()
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AaaaA", "ABBBA", "ABBBA", "AAAAA", "     ")
                    .aisle("aCCCa", "B   B", "B   B", "ACCCA", " AAA ")
                    .aisle("aCDCa", "B E B", "B E B", "ACDCA", " AAA ")
                    .aisle("aCCCa", "B   B", "B   B", "ACCCA", " AAA ")
                    .aisle("Aa~aA", "ABBBA", "ABBBA", "AAAAA", "     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('a', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('C', heatingCoils())
                    .where('D', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    MultiblockMachineDefinition ALGAE_FARM = multiblock("algae_farm", "藻类农场", AlgaeFarmMachine::new)
            .nonYAxisRotation()
            .tooltipsText("Every 10 seconds, randomly consume 5-10B water, and randomly output 1-10 algae", "每10秒随机消耗5-10B水，随机输出1-10个藻类")
            .tooltipsText("If 10B fermentation biomass is placed on the input bus, then increase the output amount by 10 times", "如果输入10B发酵生物质，则输出量提升10倍")
            .tooltipsText("If n algae are in the input bus, specify the output content, and increase the output amount by n/4 times", "如果在输入总线放入n个特定藻类，则指定输出内容，且输出量提升n/4倍")
            .recipe(GTERecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.PLASTCRETE)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAGGGAAA", "CCCGGGCCC", "CCCCCCCCC")
                    .aisle("AEAEAEAEA", "C C C C C", "CFCFCFCFC")
                    .aisle("AEAEAEAEA", "C C C C C", "CCCCCCCCC")
                    .aisle("AEAEAEAEA", "C C C C C", "DFDFDFDFD")
                    .aisle("BBBBBBBBB", "C C C C C", "DFDFDFDFD")
                    .aisle("AEAEAEAEA", "C C C C C", "DFDFDFDFD")
                    .aisle("AEAEAEAEA", "C C C C C", "CCCCCCCCC")
                    .aisle("AEAEAEAEA", "C C C C C", "CFCFCFCFC")
                    .aisle("AAAGHGAAA", "CCCGGGCCC", "CCCCCCCCC")
                    .where('A', blocks(GTBlocks.PLASTCRETE.get()))
                    .where('B', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('C', blocks(GTEBlocks.BRASS_REINFORCED_WOODEN_CASING.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Aluminium)))
                    .where('E', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('F', blocks(Blocks.GLASS))
                    .where('G', blocks(GTBlocks.PLASTCRETE.get())
                            .or(blocks(GTMachines.ITEM_IMPORT_BUS[ULV].getBlock()).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(EXPORT_ITEMS).setExactLimit(1)))
                    .where('H', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/cleanroom/plascrete"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    MultiblockMachineDefinition POLYMERIZATION_REACTOR = multiblock("polymerization_reactor", "聚合反应器", CoilMultiblockMachine.createCoilMachine(false, false))
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.POLYMERIZATION_REACTOR_RECIPES)
            .recipeModifier(GTERecipeModifiers.coilReductionOverclock(false))
            .existingTooltips("chemical_plant", 0)
            .parallelizableTooltips()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("A   A", "ABBBA", "ACDCA", "BCDCB", " BBB ")
                    .aisle("  B  ", "BEEEB", "C   C", "C   C", "BBBBB")
                    .aisle(" BBB ", "BEBEB", "D B D", "D B D", "BBBBB")
                    .aisle("  B  ", "BEEEB", "C   C", "C   C", "BBBBB")
                    .aisle("A   A", "AB~BA", "ACDCA", "BCDCB", " BBB ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('E', heatingCoils())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    MultiblockMachineDefinition SATELLITE_CONTROL_CENTER = multiblock("satellite_control_center", "卫星控制中心", SatelliteControlCenterMachine::new)
            .allRotation()
            .tooltipsText("Launch a satellite and bring back planet data", "发射卫星，带回星球数据")
            .recipe(DUMMY_RECIPES)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle(" FFFFF ", "       ", "       ", "       ", "       ", "       ", "       ", "       ", "       ")
                    .aisle("FFFFFFF", " GHHHG ", " GHHHG ", " GHHHG ", " GHHHG ", "  HHH  ", "       ", "       ", "       ")
                    .aisle("FFFFFFF", " HICIH ", " HICIH ", " HICIH ", " HICIH ", " HICIH ", "  HHH  ", "       ", "       ")
                    .aisle("FFFFFFF", " HCJCH ", " KCJCH ", " HCJCH ", " HCJCH ", " HCJCH ", "  HHH  ", "       ", "       ")
                    .aisle("FFFFFFF", " HICIH ", " HICIH ", " HICIH ", " HICIH ", " HICIH ", "  HHH  ", "       ", "       ")
                    .aisle("FFFFFFF", " GHHHG ", " GHCHG ", " GHHHG ", " GHHHG ", "  HHH  ", "       ", "       ", "       ")
                    .aisle(" FBBBF ", "  BDB  ", "  BCB  ", "  BBB  ", "       ", "       ", "       ", "  AAA  ", "  AAA  ")
                    .aisle("  BBB  ", "  BDB  ", "  BCB  ", "  BCB  ", "   E   ", "   E   ", "  ACA  ", " A   A ", "       ")
                    .aisle("  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "       ", "  AAA  ", " A   A ", "   C   ", "       ")
                    .aisle("       ", "       ", "       ", "       ", "       ", "  AAA  ", "       ", "       ", "       ")
                    .where('A', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('B', blocks(GTEBlocks.MULTI_FUNCTIONAL_CASING.get()))
                    .where('C', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_STEEL_GEARBOX.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('F', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('H', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(2))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('I', blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('J', blocks(GTBlocks.HERMETIC_CASING_HV.get()))
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition ELECTRIC_COOKING = multiblock("electric_cooking", "电力烹饪锅", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.ELECTRIC_COOKING_RECIPES)
            .perfectOverclock()
            .customTooltipsBuilder(true, false, false)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("  A A  ", "       ", "       ", "       ", "       ", "       ", "       ", "       ")
                    .aisle("       ", "  A A  ", "  BFB  ", "  CDC  ", "  CDC  ", "  CDC  ", "  CCC  ", "       ")
                    .aisle("A EEE A", " ACBCA ", " B   B ", " C   C ", " C   C ", " C   C ", " C   C ", "  CBC  ")
                    .aisle("  ECE  ", "  BCB  ", " B   B ", " D   D ", " D   D ", " D   D ", " C   C ", "  BBB  ")
                    .aisle("A EEE A", " ACBCA ", " B   B ", " C   C ", " C   C ", " C   C ", " C   C ", "  CBC  ")
                    .aisle("       ", "  A A  ", "  BBB  ", "  CDC  ", "  CDC  ", "  CDC  ", "  CCC  ", "       ")
                    .aisle("  A A  ", "       ", "       ", "       ", "       ", "       ", "       ", "       ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('D', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('E', blocks(GTBlocks.COIL_CUPRONICKEL.get()))
                    .where('F', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/multi_furnace"))
            .register();

    MultiblockMachineDefinition TREE_GROWTH_SIMULATOR = multiblock("tree_growth_simulator", "原木拟生场", TreeGrowthSimulator::new)
            .allRotation()
            .tooltipsText("Requires a tree cutting tools", "需要安装伐木工具，仅支持GT工具")
            .tooltipsText("Output and efficiency determined by tool type and quality", "根据工具类型和品质决定产出和效率")
            .recipe(GTERecipeTypes.TREE_GROWTH_SIMULATOR_RECIPES)
            .alwaysTryModifyRecipe(true)
            .block(GTEBlocks.BRASS_REINFORCED_WOODEN_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaa", "aaa", "aaa")
                    .aisle("aaa", "aca", "aaa")
                    .aisle("aaa", "aia", "aaa")
                    .where('a', blocks(GTEBlocks.BRASS_REINFORCED_WOODEN_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(2))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('i', controller(blocks(definition.get())))
                    .where('c', air())
                    .build())
            .workableCasingRenderer(GTECore.id("block/casings/brass_reinforced_wooden_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition LARGE_GREENHOUSE = multiblock("large_greenhouse", "大型温室", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.GREENHOUSE_RECIPES)
            .recipe(GTERecipeTypes.TREE_GROWTH_SIMULATOR_RECIPES)
            .tooltipsText("Can operate without sunlight", "无需要阳光就能运行")
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("aaaaaaaaa", "aaaaaaaaa", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "aaaaaaaaa", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "c       c", "c       c", "c       c", "c       c", "c       c", "c       c", "accccccca", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "aaaa~aaaa", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "aaaaaaaaa", "aaaaaaaaa")
                    .where('~', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('c', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('d', blocks(RegistriesUtils.getBlock("farmersdelight:rich_soil")))
                    .where('e', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('f', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('a', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(180)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition AUTOMATIC_CHISEL = multiblock("automatic_chisel", "自动凿子", ChiselMachine::new)
            .allRotation()
            .tooltipsText("Determine the output based on the sum of all circuits", "根据全部电路之和决定输出")
            .tooltipsText("For each increase of 1 tier in the voltage grade above LV, the maximum number of parallel is multiplied by 4.", "电压等级每高出LV等级1级，最大并行数x4")
            .recipe(DUMMY_RECIPES)
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaa", "aaa", "aaa")
                    .aisle("aaa", "aca", "aaa")
                    .aisle("aaa", "aia", "aaa")
                    .where('a', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('i', controller(blocks(definition.get())))
                    .where('c', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition ANCIENT_REACTOR_CORE = multiblock("ancient_reactor_core", "远古反应核", VoidTransporterMachine.create(1, 0, VoidTransporterMachine.teleportToDimension(GTEDimensions.ANCIENT_WORLD, new BlockPos(0, 128, 0))))
            .nonYAxisRotation()
            .recipe(DUMMY_RECIPES)
            .tooltipsText("Right-click the core to send it to Ancient World.", "右键核心传送到远古世界")
            .block(RegistriesUtils.getSupplierBlock("enderio:soularium_block"))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("ABA")
                    .aisle("BCB")
                    .aisle("ABA")
                    .where('A', blocks(Blocks.DIAMOND_BLOCK))
                    .where('B', blocks(ModBlocks.STEEL_BLOCK.get()))
                    .where('C', controller(blocks(definition.get())))
                    .build())
            .workableCasingRenderer(EnderIO.loc("block/reinforced_obsidian_block"), GTECore.id("block/multiblock/ancient_reactor_core"))
            .register();

    MultiblockMachineDefinition NETHER_REACTOR_CORE = multiblock("nether_reactor_core", "下界反应核", VoidTransporterMachine.create(2, 1920, VoidTransporterMachine.teleportToDimension(GTEDimensions.THE_NETHER, new BlockPos(0, 128, 0))))
            .nonYAxisRotation()
            .recipe(DUMMY_RECIPES)
            .tooltipsKey("gtceu.universal.tooltip.voltage_in", VA[EV], VNF[EV])
            .tooltipsText("Right-click the core to send it to the Nether.", "运行后右键核心传送到下界")
            .block(RegistriesUtils.getSupplierBlock("enderio:soularium_block"))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("ABA", "B B", " B ")
                    .aisle("BBB", " C ", "BBB")
                    .aisle("ABA", "B B", " B ")
                    .where('A', blocks(Blocks.GOLD_BLOCK))
                    .where('B', blocks(RegistriesUtils.getBlock("enderio:soularium_block"))
                            .or(abilities(INPUT_ENERGY).setExactLimit(1)))
                    .where('C', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(EnderIO.loc("block/soularium_block"), GTECore.id("block/multiblock/nether_reactor_core"))
            .register();

    MultiblockMachineDefinition VOID_TRANSPORTER = multiblock("void_transporter", "虚空传送器", VoidTransporterMachine.create(0, 480))
            .nonYAxisRotation()
            .recipe(DUMMY_RECIPES)
            .tooltipsKey("gtceu.universal.tooltip.voltage_in", VA[HV], VNF[HV])
            .tooltipsText("Right-click obsidian to send it to the void, and if it is crying obsidian, it will be flat.", "运行后右键黑曜石传送到虚空，如果是哭泣黑曜石则为超平坦")
            .block(RegistriesUtils.getSupplierBlock("enderio:reinforced_obsidian_block"))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAA", "AAA", "AAA")
                    .aisle("AAA", "ABA", "AAA")
                    .aisle("A~A", "ACA", "AAA")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(RegistriesUtils.getBlock("enderio:reinforced_obsidian_block"))
                            .or(abilities(INPUT_ENERGY).setExactLimit(1)))
                    .where('B', blocks(ANCIENT_REACTOR_CORE.getBlock()))
                    .where('C', blocks(Blocks.OBSIDIAN).or(blocks(Blocks.CRYING_OBSIDIAN)))
                    .build())
            .workableCasingRenderer(EnderIO.loc("block/reinforced_obsidian_block"), GTCEu.id("block/multiblock/implosion_compressor"))
            .register();

    MultiblockMachineDefinition BOSS_SUMMONER = multiblock("boss_summoner", "BOSS召唤器", BossSummonerMachine::new)
            .nonYAxisRotation()
            .tooltipsText("Electricity and Reactor Core Function", "电力与反应核的作用")
            .recipe(DUMMY_RECIPES)
            .block(GTBlocks.MACHINE_CASING_ULV)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAaAA", "     ")
                    .aisle("AAAAA", " AAA ")
                    .aisle("aAAAa", " ABA ")
                    .aisle("AAAAA", " AAA ")
                    .aisle("AA~AA", "     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.MACHINE_CASING_ULV.get()))
                    .where('a', blocks(GTBlocks.MACHINE_CASING_ULV.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2, 1)))
                    .where('B', blocks(ANCIENT_REACTOR_CORE.getBlock()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/ulv/side"), GTCEu.id("block/multiblock/implosion_compressor"))
            .register();

    MultiblockMachineDefinition DRILLING_CONTROL_CENTER = multiblock("drilling_control_center", "钻井控制中枢", DrillingControlCenterMachine::new)
            .nonYAxisRotation()
            .tooltipsText("Voltage tier is increased by one level above IV, it can increase the fluid drill's output within a 16 M range by x1.5", "电压等级每高出IV一级，可使16M范围内的流体钻机产量x1.5")
            .recipe(DUMMY_RECIPES)
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle(" AAAAA ", "  AIA  ", "       ", "       ", "       ", "       ", "       ", "       ", "       ", "       ")
                    .aisle("AABBBAA", " CBBBC ", " CDDDC ", "  DDD  ", "  DDD  ", "  DDD  ", "  DDD  ", "  BBB  ", "  BBB  ", "       ")
                    .aisle("ABEEEBA", "ABEEEBA", " DEFED ", " DEFED ", " DEFED ", " DEFED ", " DEFED ", " BEEEB ", " BBBBB ", "   B   ")
                    .aisle("ABEEEBA", "ABEEEBA", " DFGFD ", " DFHFD ", " DFGFD ", " DFHFD ", " DFGFD ", " BEEEB ", " BBBBB ", "  BBB  ")
                    .aisle("ABEEEBA", "ABEEEBA", " DEFED ", " DEFED ", " DEFED ", " DEFED ", " DEFED ", " BEEEB ", " BBBBB ", "   B   ")
                    .aisle("AABBBAA", " CBBBC ", " CDDDC ", "  DDD  ", "  DDD  ", "  DDD  ", "  DDD  ", "  BBB  ", "  BBB  ", "       ")
                    .aisle(" AAAAA ", "  AAA  ", "       ", "       ", "       ", "       ", "       ", "       ", "       ", "       ")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('C', blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where('D', blocks(GTEBlocks.TUNGSTEN_BOROSILICATE_GLASS.get()))
                    .where('E', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('F', blocks(GTBlocks.MACHINE_CASING_IV.get()))
                    .where('G', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('H', blocks(GTBlocks.HERMETIC_CASING_IV.get()))
                    .where('I', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition DRONE_CONTROL_CENTER = multiblock("drone_control_center", "无人机控制中心", DroneControlCenterMachine::new)
            .nonYAxisRotation()
            .recipe(DUMMY_RECIPES)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("ABAAA  ", "ADA A  ", "AAA A  ", "AABAA  ", "A A A  ", "A A A  ", "AAAAA  ")
                    .aisle("AAAAAAA", "A ACAAA", "A ACAAA", "AAAAAAA", "ACACAAA", "ACACA  ", "AAAAA  ")
                    .aisle("AAAAAAB", "A A A A", "A A A A", "AAAAA A", "A A A A", "A A A  ", "AAAAA  ")
                    .aisle("AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAA  ", "AAAAA  ")
                    .where('A', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(GTEPartAbility.DRONE_HATCH).setExactLimit(1)))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('D', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    MultiblockMachineDefinition WIRELESS_ENERGY_SUBSTATION = multiblock("wireless_energy_substation", "无线能源塔", WirelessEnergySubstationMachine::new)
            .nonYAxisRotation()
            .recipe(DUMMY_RECIPES)
            .tooltipsText("Provides capacity support to the wireless grid", "为无线电网提供容量支持")
            .tooltipsText("You can install any wireless energy unit inside to increase the capacity limit", "可在内部安装任意无线能量单元来提高容量上限")
            .tooltipsText("The actual working units are limited by the glass tier", "实际起作用的单元受玻璃等级限制")
            .tooltipsText("Total capacity is the sum of unit capacities x number of units / 2, total loss is the average loss of units", "总容量为单元容量之和x单元数的一半，总损耗为单元损耗平均值")
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.FRONT, RelativeDirection.UP)
                    .aisle("AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAABAAA")
                    .aisle("ACCCCCA", "CDDDDDC", "CDDDDDC", "CDDDDDC", "CDDDDDC", "CDDDDDC", "ACCCCCA").setRepeatable(2, 30)
                    .aisle("AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', GTEPredicates.glass())
                    .where('D', air().or(GTEPredicates.wirelessEnergyUnit()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/power_substation"))
            .register();

    MultiblockMachineDefinition WIRELESS_DIMENSION_REPEATER = multiblock("wireless_dimension_repeater", "无线电网维度中继器", WirelessDimensionRepeaterMachine::new)
            .nonYAxisRotation()
            .recipe(DUMMY_RECIPES)
            .block(GTBlocks.CASING_PALLADIUM_SUBSTATION)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "      AAA      ", "     BBBB      ", "      AAA      ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "       C AA    ", "      DCDBB    ", "       C AA    ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "       C   A   ", "       E DDB   ", "       C   A   ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "            A  ", "           DB  ", "            A  ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "             A ", "            DB ", "             A ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "             A ", "       F    DB ", "             A ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("      AAA      ", "    AA C       ", "   A   C       ", "  A            ", " A             ", " A             ", "A             A", "ACC          DB", "A             A", " A             ", " A             ", "  A            ", "   A   C       ", "    AA C       ", "      AAA      ")
                    .aisle("      BBBB     ", "    BGECE      ", "   BEE         ", "  BE           ", " BE            ", " BE    F       ", "BE          CCA", "HCD  F   F  ECB", "BE          CCA", " BE    F       ", " BE            ", "  BE           ", "   BEE D       ", "    BBECE      ", "      BBBB     ")
                    .aisle("      AAA      ", "    AA C       ", "   A   C       ", "  A            ", " A             ", " A             ", "A             A", "ACC          DB", "A             A", " A             ", " A             ", "  A            ", "   A   C       ", "    AA C       ", "      AAA      ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "             A ", "       F    DB ", "             A ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "             A ", "            DB ", "             A ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "            A  ", "           DB  ", "            A  ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "       C   A   ", "       E DDB   ", "       C   A   ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "       C AA    ", "      DCDBB    ", "       C AA    ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "      AAA      ", "     BBBB      ", "      AAA      ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .where('A', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('B', GTEPredicates.integralFramework())
                    .where('C', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('D', blocks(Blocks.SEA_LANTERN))
                    .where('E', blocks(Blocks.CRYING_OBSIDIAN))
                    .where('F', blocks(RegistriesUtils.getBlock("ae2:quantum_ring")))
                    .where('G', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_palladium_substation"), GTCEu.id("block/multiblock/power_substation"))
            .register();

    MultiblockMachineDefinition[] PROCESSING_ARRAY = registerTieredMultis("processing_array", t -> GTEValues.VNFR[t] + "处理阵列",
            ProcessingArrayMachine::new, (tier, builder) -> builder
                    .langValue(VNF[tier] + " Processing Array")
                    .nonYAxisRotation()
                    .recipe(DUMMY_RECIPES)
                    .tooltipsKey("gtecore.machine.processing_array.tooltip.0")
                    .tooltipsKey("gtecore.machine.processing_array.tooltip.1")
                    .tooltipsKey("gtceu.universal.tooltip.parallel", ProcessingArrayMachine.getMachineLimit(tier))
                    .alwaysTryModifyRecipe(true)
                    .customTooltipsBuilder(false, true, false)
                    .block(() -> ProcessingArrayMachine.getCasingState(tier))
                    .blockProp(p -> p.noOcclusion().isViewBlocking((state, level, pos) -> false))
                    .shape(Shapes.box(0.001, 0.001, 0.001, 0.999, 0.999, 0.999))
                    .pattern(definition -> FactoryBlockPattern.start()
                            .aisle("XXX", "CCC", "XXX")
                            .aisle("XXX", "C#C", "XXX")
                            .aisle("XSX", "CCC", "XXX")
                            .where('S', controller(blocks(definition.getBlock())))
                            .where('X', blocks(ProcessingArrayMachine.getCasingState(tier))
                                    .setMinGlobalLimited(6)
                                    .or(abilities(IMPORT_ITEMS))
                                    .or(abilities(EXPORT_ITEMS))
                                    .or(abilities(IMPORT_FLUIDS))
                                    .or(abilities(EXPORT_FLUIDS))
                                    .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(1))
                                    .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                                    .or(blocks(GTEMachines.MACHINE_ACCESS_INTERFACE.getBlock()).setExactLimit(1))
                                    .or(abilities(MAINTENANCE).setExactLimit(1)))
                            .where('C', GTEPredicates.glass())
                            .where('#', air())
                            .build())
                    .renderer(() -> new ArrayMachineRenderer(tier == IV ? GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel") : GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/gcym/large_assembler")))
                    .register(),
            IV, LuV);

    MultiblockMachineDefinition SINTERING_FURNACE = multiblock("sintering_furnace", "烧结炉", CoilMultiblockMachine.createCoilMachine(false, true))
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipe(GTERecipeTypes.SINTERING_FURNACE_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("     ", " AAA ", " AHA ", " AAA ", "     ")
                    .aisle(" CCC ", "CDDDC", "CD DC", "CDDDC", " CCC ")
                    .aisle(" CEC ", "CDFDC", "GF FG", "CDFDC", " CEC ")
                    .aisle(" CEC ", "CDFDC", "GF FG", "CDFDC", " CEC ")
                    .aisle(" CEC ", "CDFDC", "GF FG", "CDFDC", " CEC ")
                    .aisle(" CCC ", "CDDDC", "CD DC", "CDDDC", " CCC ")
                    .aisle("     ", " AAA ", " ABA ", " AAA ", "     ")
                    .where('A', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('F', heatingCoils())
                    .where('G', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('H', abilities(MUFFLER))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/electric_blast_furnace"))
            .register();

    MultiblockMachineDefinition ISOSTATIC_PRESS = multiblock("isostatic_press", "等静压成型", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipe(GTERecipeTypes.ISOSTATIC_PRESSING_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_TITANIUM_STABLE)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "A   A", "A   A", "A   A", "BBBBB", "CCCCC", "     ", "     ")
                    .aisle("ABBBA", " DDD ", " DDD ", " DDD ", "BDDDB", "C   C", "     ", " BBB ")
                    .aisle("ABBBA", " DDD ", " D D ", " D D ", "BDFDB", "B F B", "B F B", "BBFBB")
                    .aisle("ABBBA", " DDD ", " DDD ", " DDD ", "BDDDB", "C   C", "     ", " BBB ")
                    .aisle("AAEAA", "A   A", "A   A", "A   A", "BBBBB", "CCCCC", "     ", "     ")
                    .where('A', blocks(GTBlocks.CASING_TITANIUM_STABLE.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlueSteel)))
                    .where('D', blocks(GTEBlocks.COMPRESSOR_CONTROLLER_CASING.get()))
                    .where('E', controller(blocks(definition.get())))
                    .where('F', blocks(GTEBlocks.COMPRESSOR_PIPE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_stable_titanium"), GTCEu.id("block/multiblock/gcym/large_material_press"))
            .register();

    MultiblockMachineDefinition DRAWING_TOWER = multiblock("drawing_tower", "拉丝塔", DrawingTowerMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.DRAWING_RECIPES)
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.RIGHT, RelativeDirection.UP)
                    .aisle("NNNNNNNN", "NAAAAAAN", "NAAAAAAN", "NAAAAAAN", "NNNNNNNN")
                    .aisle("NNNNNNNN", "NAFA   N", "HCC    N", "NAFA   N", "NNNNNNNN")
                    .aisle(" AAAAAAA", " AFA   A", " CC B  A", " AFA   A", " AAAAAAA")
                    .aisle(" AAAAAAA", " AFFF  A", " CCBBB A", " AFFF  A", " AAAIAAA")
                    .aisle("  AAAAAA", "  AAA  A", "  C B  A", "  AAA  A", "  AAAAAA")
                    .aisle("   AABAA", "   A   A", "   B   A", "   A   A", "   AABAA")
                    .aisle("   CCBCC", "   C   C", "   B   B", "   C   C", "   CCBcC").setRepeatable(16, 96)
                    .aisle("   AAAAA", "   A   A", "   A   A", "   A   A", "   AAAAA")
                    .aisle("   DDADD", "   DGGGD", "   AG GA", "   DGGGD", "   DDADD")
                    .aisle("   DDADD", "   DGGGD", "   AG GA", "   DGGGD", "   DDADD")
                    .aisle("   AAAAA", "   A   A", "   A   A", "   A   A", "   AAAAA")
                    .aisle("   DDEDD", "   D   D", "   E   E", "   D   D", "   DDEDD")
                    .aisle("   DDEDD", "   D   D", "   E   E", "   D   D", "   DDEDD")
                    .aisle("   DDEDD", "   DDEDD", "   EEEEE", "   DDEDD", "   DDEDD")
                    .aisle("   AAAAA", "   AAAAA", "   AAMAA", "   AAAAA", "   AAAAA")
                    .where('A', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('M', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(abilities(IMPORT_ITEMS).setExactLimit(1)))
                    .where('N', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(abilities(EXPORT_ITEMS))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('C', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('c', GTEPredicates.countBlock("laminated_glass", GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('D', blocks(GTEBlocks.TUNGSTEN_BOROSILICATE_GLASS.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel)))
                    .where('F', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('G', heatingCoils())
                    .where('H', controller(blocks(definition.get())))
                    .where('I', blocks(GTEMachines.SPOOL_HATCH.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/large_miner"))
            .register();

    MultiblockMachineDefinition ROCKET_ASSEMBLER = multiblock("rocket_assembler", "火箭装配机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.ROCKET_ASSEMBLER_RECIPES)
            .noRecipeModifier()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("      AAAAA      ", "       JJJ       ", "       JKJ       ", "       JJJ       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("    AAAAAAAAA    ", "      ABBBA      ", "       JJJ       ", "       JJJ       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("   AAAAAAAAAAA   ", "    AADDDDDAA    ", "       JJJ       ", "       JJJ       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("  AAAAABABAAAAA  ", "   ADD     DDA   ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("  AAAAABABAAAAA  ", "  ADCC     CCDA  ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "   CCCCCCCCCCC   ", "     C     C     ", "     C     C     ", "     C     C     ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle(" AAAAAABABAAAAAA ", " AAD         DAA ", " AAA         AAA ", "  AE         EA  ", "  AE         EA  ", "  AE         EA  ", "  AE         EA  ", "  AE         EA  ", "  AE         EA  ", "  AA         AA  ", "   A         A   ", "   A         A   ", "   A         A   ", "   A         A   ", "   C         C   ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAABABAAAAAAA", "AAAD         DAAA", " AAA         AAA ", " AAA         AAA ", " AAA         AAA ", " AAAFF     FFAAA ", " AAA         AAA ", " AAA         AAA ", " AAA         AAA ", " AAAFF     FFAAA ", "  AA         AA  ", "  AA         AA  ", "  AA         AA  ", "  AA         AA  ", "  AAFF     FFAA  ", "  AAF       FAA  ", "  AAF       FAA  ", "   AF       FA   ", "   AFF     FFA   ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAABABAAAAAAA", "AAGHI       IHGAA", " DGHI       IHGD ", " DGHI       IHGD ", " DGHI       IHGD ", " DGHI       IHGD ", " DGHI       IHGD ", " DGHI       IHGD ", " DGHI       IHGD ", " AGHI       IHGA ", "  DAI       IAD  ", "  DBI       IBD  ", "  DBI       IBD  ", "  DBI       IBD  ", "  DBI       IBD  ", "  DBI       IBD  ", "  ABI       IBA  ", "  AAI       IAA  ", "  AAA       AAA  ", "   AF       FA   ", "   AF       FA   ", "   AF       FA   ", "   A         A   ", "   A         A   ")
                    .aisle("AAAAAAABABAAAAAAA", "AAAD         DAAA", " AAA         AAA ", " AAA         AAA ", " AAA         AAA ", " AAAFF     FFAAA ", " AAA         AAA ", " AAA         AAA ", " AAA         AAA ", " AAAFF     FFAAA ", "  AA         AA  ", "  AA         AA  ", "  AA         AA  ", "  AA         AA  ", "  AAFF     FFAA  ", "  AAF       FAA  ", "  AAF       FAA  ", "   AF       FA   ", "   AFF     FFA   ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle(" AAAAAABABAAAAAA ", " AAD         DAA ", " AAA         AAA ", "  AE         EA  ", "  AE         EA  ", "  AE         EA  ", "  AE         EA  ", "  AE         EA  ", "  AE         EA  ", "  AA         AA  ", "   A         A   ", "   A         A   ", "   A         A   ", "   A         A   ", "   C         C   ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("  AAAAABABAAAAA  ", "  ADCC     CCDA  ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "     C     C     ", "   CCCCCCCCCCC   ", "     C     C     ", "     C     C     ", "     C     C     ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("  AAAAABABAAAAA  ", "   ADC     CDA   ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("   AAAABABAAAA   ", "    AC     CA    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("    AAABABAAA    ", "    AC     CA    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('B', blocks(GTBlocks.CASING_STEEL_GEARBOX.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('D', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('E', blocks(GTBlocks.HERMETIC_CASING_LV.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('G', blocks(GTBlocks.HERMETIC_CASING_HV.get()))
                    .where('H', blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('I', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('J', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    MultiblockMachineDefinition GAS_COMPRESSOR = multiblock("gas_compressor", "气体压缩机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.GAS_COMPRESSOR_RECIPES)
            .parallelizablePerfectOverclock()
            .parallelizableTooltips()
            .customTooltipsBuilder(true, false, false)
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" A A     ", " A A     ", " BBB     ", " BBB     ", " BBB     ", "         ")
                    .aisle("AAAAA CCC", "ABBBA CCC", "B   B CCC", "B E B    ", "B   B    ", " BBB     ")
                    .aisle("      CCC", " BBB  CFC", "B   B CEC", "B E B  G ", "B   B  G ", " BBBGGGG ")
                    .aisle("AAAAA CCC", "ABBBA CFC", "B   B CCC", "B E B    ", "B   B    ", " BBB     ")
                    .aisle("      CCC", " BBB  CFC", "B   B CEC", "B E B  G ", "B   BGGG ", " BBB     ")
                    .aisle("AAAAA CCC", "ABBBA CDC", "B   B CCC", "B E B    ", "B   B    ", " BBB     ")
                    .aisle(" A A     ", " A A     ", " BBB     ", " BBB     ", " BBB     ", "         ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Invar)))
                    .where('B', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('C', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', controller(blocks(definition.get())))
                    .where('E', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('F', blocks(GTBlocks.HERMETIC_CASING_LV.get()))
                    .where('G', blocks(GTBlocks.STEEL_HULL.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/gcym/large_material_press"))
            .register();

    MultiblockMachineDefinition SUPER_MOLECULAR_ASSEMBLER = multiblock("super_molecular_assembler", "超级分子装配室", SuperMolecularAssemblerMachine::new)
            .nonYAxisRotation()
            .recipe(GTERecipeTypes.DUMMY_RECIPES)
            .block(GTEBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("         ", "    A    ", "    A    ", "    A    ", "    B    ", "  BBLBB  ", "    B    ", "    A    ", "    A    ", "    A    ", "         ")
                    .aisle("    A    ", "   CBC   ", "  CCBCC  ", "  DCBCD  ", "  DCECD  ", " BDCECDB ", "  DCECD  ", "  DCBCD  ", "  CCBCC  ", "   CBC   ", "    A    ")
                    .aisle("    A    ", "  CFGFC  ", " CHHHHHC ", " D  E  D ", " D     D ", "BD     DB", " D     D ", " D  E  D ", " CHHHHHC ", "  CFGFC  ", "    A    ")
                    .aisle("    A    ", " CFFGFFC ", " CHIIIHC ", " C  J  C ", " C     C ", "BC     CB", " C     C ", " C  J  C ", " CHIIIHC ", " CFFGFFC ", "    A    ")
                    .aisle(" AAAAAAA ", "ABGGGGGBA", "ABHIIIHBA", "ABEJKJEBA", "BE  K  EB", "BE  K  EB", "BE  K  EB", "ABEJKJEBA", "ABHIIIHBA", "ABGGGGGBA", " AAAAAAA ")
                    .aisle("    A    ", " CFFGFFC ", " CHIIIHC ", " C  J  C ", " C     C ", "BC     CB", " C     C ", " C  J  C ", " CHIIIHC ", " CFFGFFC ", "    A    ")
                    .aisle("    A    ", "  CFGFC  ", " CHHHHHC ", " D  E  D ", " D     D ", "BD     DB", " D     D ", " D  E  D ", " CHHHHHC ", "  CFGFC  ", "    A    ")
                    .aisle("    A    ", "   CBC   ", "  CCBCC  ", "  DCBCD  ", "  DCECD  ", " BDCECDB ", "  DCECD  ", "  DCBCD  ", "  CCBCC  ", "   CBC   ", "    A    ")
                    .aisle("         ", "    A    ", "    A    ", "    A    ", "    B    ", "  BBBBB  ", "    B    ", "    A    ", "    A    ", "    A    ", "         ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTEMaterials.HastelloyN)))
                    .where('B', blocks(GTEBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('C', blocks(GTEBlocks.ZIRCONIA_CERAMIC_HIGH_STRENGTH_BENDING_RESISTANCE_MECHANICAL_BLOCK.get()).setMinGlobalLimited(20)
                            .or(blocks(GTEMachines.ME_CRAFT_PATTERN_PART_MACHINE.get()))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(abilities(EXPORT_ITEMS)))
                    .where('D', blocks(GTEBlocks.NAQUADAH_BOROSILICATE_GLASS.get()))
                    .where('E', blocks(GTEBlocks.MAGTECH_CASING.get()))
                    .where('F', blocks(GTEBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('G', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('H', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('I', blocks(GTEBlocks.COMPRESSOR_CONTROLLER_CASING.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Europium)))
                    .where('K', blocks(GTEBlocks.EXTREME_DENSITY_CASING.get()))
                    .where('L', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .renderer(() -> new CustomPartRenderer(GTECore.id("block/casings/oxidation_resistant_hastelloy_n_mechanical_casing"), GTCEu.id("block/multiblock/fusion_reactor"), GTECore.id("block/zirconia_ceramic_high_strength_bending_resistance_mechanical_block")))
            .register();

    MultiblockMachineDefinition RARITY_FORGE = multiblock("rarity_forge", "珍宝锻炉", ElectricMultiblockMachine::new)
            .allRotation()
            .recipe(GTERecipeTypes.RARITY_FORGE_RECIPES)
            .block(GTBlocks.MACHINE_CASING_ULV)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaa", "aaa", "aaa")
                    .aisle("aaa", "aca", "aaa")
                    .aisle("aaa", "aia", "aaa")
                    .where('a', blocks(GTBlocks.MACHINE_CASING_ULV.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(3))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2)))
                    .where('i', controller(blocks(definition.get())))
                    .where('c', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/ulv/side"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
}
